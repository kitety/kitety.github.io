<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一首找了五年的歌</title>
    <url>/posts/a-song-that-has-been-searched-for-five-years.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=567510388&auto=0&height=66"></iframe>


        <h2 id="题记"   >
          <a href="#题记" class="heading-link"><i class="fas fa-link"></i></a><a href="#题记" class="headerlink" title="题记"></a>题记</h2>
      <blockquote>
<p>听听从前的歌，想起走过的路。</p>
</blockquote>

        <h2 id="想起了这首歌"   >
          <a href="#想起了这首歌" class="heading-link"><i class="fas fa-link"></i></a><a href="#想起了这首歌" class="headerlink" title="想起了这首歌"></a>想起了这首歌</h2>
      <p>今天和朋友去西岭那边漂流，结果回来的车上有点晕车，搞得我心神不宁。因为是返程，又是从川西那边回来，心里不由自主的回想起从前的时光，然后就很想找一首歌。</p>
<span id="more"></span>

<p>回来就在手机上摆弄着当我输入：<strong>六月的雨 四川农业大学 就让六月的雨带走我的感伤的时候</strong>，出现了下面的搜索结果</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171305.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171430.png" >
      </p>
<p>没错我看到了这首歌，原来这首歌的名字叫做《六月》，而我之前一直都以为叫做《六月的雨》。我当时就立马分享给了我的好友晓静，感觉找到了什么宝藏。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171532.png" >
      </p>
<p>这一刻，感觉时间回到了久远的从前。</p>

        <h2 id="知道这首歌"   >
          <a href="#知道这首歌" class="heading-link"><i class="fas fa-link"></i></a><a href="#知道这首歌" class="headerlink" title="知道这首歌"></a>知道这首歌</h2>
      <p>你也许会问，为什么知道这首歌。</p>
<p>现在想想，这是一个小故事，也是我的宝藏，每次想起我都些许懊悔，也会让我欣慰自豪。</p>

        <h2 id="未完待续"   >
          <a href="#未完待续" class="heading-link"><i class="fas fa-link"></i></a><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>
      ]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>8个小技巧让你成为更好的开发</title>
    <url>/posts/8-tips-to-make-you-a-better-developer.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210226115624.png" >
      </p>

        <h2 id="摘要"   >
          <a href="#摘要" class="heading-link"><i class="fas fa-link"></i></a><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2>
      <p>本文主要讲了 8 个小技巧，让你知道如何安排你的工作日和休息时间，以及使用小技巧的重要原因。</p>
<span id="more"></span>

        <h2 id="技巧要点"   >
          <a href="#技巧要点" class="heading-link"><i class="fas fa-link"></i></a><a href="#技巧要点" class="headerlink" title="技巧要点"></a>技巧要点</h2>
      <ol>
<li><p>不要过度计划。</p>
<p>小而简单的思考是成功的关键，比如尽量完成 3 到 5 个工作就差不多了。这个过程不是一次短跑，更像是一次马拉松。</p>
</li>
<li><p>只提前计划一周的工作。</p>
<p>长期的工作安排并不见得很好，因为你很难坚持下去。再次强调，<strong>这个过程不是一次短跑，更像是一次马拉松。</strong></p>
</li>
<li><p>选择一些有意义的事情去做，比如一些<strong>健康活动</strong>就是很好的选择（锻炼等）。</p>
<p>有趣的是，锻炼也可以提高新的神经元的存活率。到目前为止，锻炼能够帮助你更好的学习，他比如今市面上任何的药物都有效。他不仅对你的大脑有益，对你的全身都有益。</p>
</li>
<li><p>尽量在工作的时候保持专注。</p>
<p>在确保质量的前提下，花更少的时间去专注工作，比花更对的时间分散精力的工作好得多。记住一点，一旦已从你当前的工作中分心时，想会回到之前专注的状态都会耗费你更多的精力。</p>
</li>
<li><p>在工作和学习中尽量远离你的手机。</p>
<p>我建议把手机当做一种奖励，比如专注工作一段时间之后的奖励。还有一种很有帮助的是，在工作的时候将你的手机开启“勿扰模式”。</p>
</li>
<li><p>明确你一天的期望和要求。</p>
<p>我建议可以把它写下来，可以在纸上或者屏幕上，这对避免分散注意力很有用。</p>
</li>
<li><p>睡眠是你学习和记忆过程中的重要组成部分。</p>
<p>睡眠也被证明可以明显发现困难问题和理解所学内容的能力。</p>
</li>
<li><p>多喝水。</p>
</li>
</ol>

        <h2 id="结论"   >
          <a href="#结论" class="heading-link"><i class="fas fa-link"></i></a><a href="#结论" class="headerlink" title="结论"></a>结论</h2>
      <p>关键是要对自己要做的事情出一个<strong>优先级排序</strong>和<strong>良好的组织</strong>。然后坚持你的目标，或者至少要遵循你的计划。</p>
<p>有时候遵循计划会很困难，但是这是很正常的，不必太过担心和太多压力。</p>
<p>感谢你的阅读。</p>

        <h2 id="引用地址"   >
          <a href="#引用地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用地址" class="headerlink" title="引用地址"></a>引用地址</h2>
      <blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://dev.to/easaaa/8-tips-on-how-to-improve-your-day-as-a-developer-1b0m" >https://dev.to/easaaa/8-tips-on-how-to-improve-your-day-as-a-developer-1b0m</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <tags>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome Console面板解析</title>
    <url>/posts/chrome-console-panel-analysis.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h3 id="Console-面板的打开方式"   >
          <a href="#Console-面板的打开方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Console-面板的打开方式" class="headerlink" title="Console 面板的打开方式"></a>Console 面板的打开方式</h3>
      <ul>
<li>在控制台打开的情况选择 console 按钮</li>
<li>在 DevTool 的其他面板按 ESC 键打开面板（在开发者工具获得焦点的情况下）</li>
<li>在右上角的菜单打开（setting–show–console–drawer）</li>
<li>输入快捷键<code>Ctrl+Shift+P</code>，再输入 <code>Console</code><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10006.gif" >
      </li>
</ul>
<span id="more"></span>


        <h3 id="初识面板"   >
          <a href="#初识面板" class="heading-link"><i class="fas fa-link"></i></a><a href="#初识面板" class="headerlink" title="初识面板"></a>初识面板</h3>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172121.png" >
      </p>

        <h4 id="面板分析"   >
          <a href="#面板分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#面板分析" class="headerlink" title="面板分析"></a>面板分析</h4>
      <p>上面部分为工具栏<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172130.png" >
      </p>
<p>下面部分为命令区</p>

        <h3 id="工具栏使用方法"   >
          <a href="#工具栏使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#工具栏使用方法" class="headerlink" title="工具栏使用方法"></a>工具栏使用方法</h3>
      
        <h4 id="展开关闭侧边栏"   >
          <a href="#展开关闭侧边栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#展开关闭侧边栏" class="headerlink" title="展开关闭侧边栏"></a>展开关闭侧边栏</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/09/23/NwpqoC8jKfMcB41.gif"  alt="ia_10009.gif">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172330.png" >
      </p>
<p>点击可以切换侧边栏的展示和隐藏，点击一栏可以对命令区的进行过滤。默认是以关闭的，就不会对信息进行过滤。</p>
<p>左侧的分类栏目主要由以下几类:</p>
<ul>
<li>message<br>全部的信息，就是未分类的信息，是以下信息的综合。</li>
<li>user message</li>
<li>errors<br>日志级别为 error 的日志</li>
<li>warning<br>日志级别为 warning 的日志</li>
<li>info<br>日志级别为 info 的日志</li>
<li>verbose<br>日志级别为 verbose(冗长) 的日志</li>
</ul>
<p>前面会显示该栏目总的日志数量，具体的信息会显示在该栏目的子栏目上，比如文件路径，产生日志数量，文件名等</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172403.png" >
      <br>点击对应的消息会在右侧展示过滤的结果。</p>

        <h4 id="清空命令行"   >
          <a href="#清空命令行" class="heading-link"><i class="fas fa-link"></i></a><a href="#清空命令行" class="headerlink" title="清空命令行"></a>清空命令行</h4>
      <p>点击这个图标
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172422.png"  width="26px" style="display:inline;" class="nofancybox"/>
      可以清空命令行</p>
<p>列举出可以清空命令行的一些操作</p>
<ul>
<li>右键菜单 Clear Console</li>
<li>在命令行输入 clear()</li>
<li>js 调用 console.clear()</li>
<li>快捷键<code>Ctrl + L</code></li>
</ul>

        <h4 id="上下文选择"   >
          <a href="#上下文选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#上下文选择" class="headerlink" title="上下文选择"></a>上下文选择</h4>
      <p>默认的上下文环境为 top，也就是当前网页打开的环境。你也可以选择切换为你需要你的环境</p>
<p>比如在<span class="exturl"><a class="exturl__link"   href="https://7q43c.csb.app/" >这个 iframe 页面</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，你就可以切换环境为 iframe 的环境。</p>
<p>源代码:<span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/upbeat-frog-c6n68?file=/index.html" >源代码 1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/focused-tesla-7q43c?file=/index.html" >源代码 2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>当我进入 iframe 的上下文的时候就可以打印出 iframe 里面的数据<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10012.gif" >
      </p>

        <h4 id="实时表达式"   >
          <a href="#实时表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#实时表达式" class="headerlink" title="实时表达式"></a>实时表达式</h4>
      <p>Live Expressions 实时执行的表达式,可以创建多个表达式，失去焦点就会保存，创建之后也可以删除。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10013.gif" >
      </p>

        <h4 id="过滤选项"   >
          <a href="#过滤选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#过滤选项" class="headerlink" title="过滤选项"></a>过滤选项</h4>
      <p>可以输入文本、正则等对打印的信息进行搜索和过滤。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600854061519-ia_10014.gif"  alt="ia_10014">
      </p>

        <h4 id="打印级别过滤"   >
          <a href="#打印级别过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#打印级别过滤" class="headerlink" title="打印级别过滤"></a>打印级别过滤</h4>
      <p>打印级别过滤有如下选项：<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172458.png" >
      </p>
<blockquote>
<p>Default: 默认为警告信息和错误<br>Verbose: 冗长的的打印<br>其余为常规的信息、警告、错误级别</p>
</blockquote>
<p>当过滤级别不是全部展示的话会在右侧显示被隐藏的条数。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172507.png" >
      </p>

        <h4 id="设置"   >
          <a href="#设置" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置" class="headerlink" title="设置"></a>设置</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172514.png" >
      </p>
<ul>
<li><p>Hide Network</p>
<p>是否对有关网络的日志进行隐藏<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10018.gif" >
      </p>
</li>
<li><p>Log XmlHttpRequests</p>
<p>是否打印 XHR 请求<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10019.gif" >
      </p>
</li>
<li><p>Preserve Log<br>是否保留日志，每次刷新是否自动清空日志。</p>
</li>
<li><p>Selected Context Only<br>是否只显示当前的上下文环境的日志信息<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10020.gif" >
      </p>
</li>
<li><p>Group Similar</p>
</li>
</ul>
<ul>
<li><p>Eager Evaluation</p>
<p>及时显示执行结果<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10021.gif" >
      </p>
</li>
</ul>
<ul>
<li><p>Autocomplete From History</p>
<p>根据历史记录自动完成命令<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10022.gif" >
      </p>
</li>
<li><p>Group Similar<br>相同日志归到一个组里面，此选项在禁用日志时间戳事才有效</p>
</li>
<li><p>Evaluate triggers user activation</p>
</li>
</ul>

        <h3 id="命令区使用方法"   >
          <a href="#命令区使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令区使用方法" class="headerlink" title="命令区使用方法"></a>命令区使用方法</h3>
      
        <h4 id="基本使用"   >
          <a href="#基本使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4>
      <ul>
<li>上一行输入，下一行输出结果</li>
<li>键盘的上线键可根据历史记录自动补全</li>
</ul>

        <h4 id="右键菜单"   >
          <a href="#右键菜单" class="heading-link"><i class="fas fa-link"></i></a><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172532.png" >
      </p>
<ul>
<li><p>Clear console</p>
<p>清空命令区</p>
</li>
<li><p>Clear console history</p>
<p>清空历史记录，这时上下键的补全将失效</p>
</li>
<li><p>Save as</p>
<p>存储当前的日志信息</p>
</li>
</ul>

        <h4 id="Console-Api"   >
          <a href="#Console-Api" class="heading-link"><i class="fas fa-link"></i></a><a href="#Console-Api" class="headerlink" title="Console Api"></a>Console Api</h4>
      <p>参看<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console" >MDN 文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://developers.google.com/web/tools/chrome-devtools/console/api" >谷歌文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="Console-工具库-Api"   >
          <a href="#Console-工具库-Api" class="heading-link"><i class="fas fa-link"></i></a><a href="#Console-工具库-Api" class="headerlink" title="Console 工具库 Api"></a>Console 工具库 Api</h4>
      <p>整理自<span class="exturl"><a class="exturl__link"   href="https://developers.google.com/web/tools/chrome-devtools/console/utilities" >谷歌文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<div class="table-container"><table>
<thead>
<tr>
<th>语句</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>$_</td>
<td>返回最近执行的结果</td>
</tr>
<tr>
<td>$0-$4</td>
<td>日志历史的最近五个 DOM 元素</td>
</tr>
<tr>
<td>$</td>
<td>document.querySelector(如果引用了 jquery 等库，就会被覆盖为引入的库)</td>
</tr>
<tr>
<td>$$</td>
<td>document.querySelectorAll</td>
</tr>
<tr>
<td>$x</td>
<td>$x(path) 返回与给定 XPath 表达式匹配的 DOM 元素数组。</td>
</tr>
<tr>
<td>clear</td>
<td>清除控制台</td>
</tr>
<tr>
<td>copy</td>
<td>copy(object) 将指定对象的字符串表示形式复制到剪贴板。</td>
</tr>
<tr>
<td>debug</td>
<td>当调用指定的函数时，调试器将被调用并在 Sources 面板上的函数内部中断，从而逐步执行代码并进行调试。</td>
</tr>
<tr>
<td>dir</td>
<td>dir(object)显示所有指定对象属性的对象样式列表。此方法是 Console API console.dir()方法的别名。</td>
</tr>
<tr>
<td>dirxml</td>
<td>dirxml(object)打印指定对象的 XML 表示形式。此方法等效于 console.dirxml（）方法。</td>
</tr>
<tr>
<td>inspect</td>
<td>inspect(object/function) 打开并在适当的面板中选择指定的元素或对象：DOM 元素的 Elements 面板或 JavaScript 堆对象的 Profiles 面板。</td>
</tr>
<tr>
<td>getEventListeners</td>
<td>getEventListeners(object)返回在指定对象上注册的事件</td>
</tr>
<tr>
<td>keys</td>
<td>keys(object)返回一个数组，其中包含属于指定对象的属性的名称</td>
</tr>
<tr>
<td>monitor</td>
<td>调用指定的函数时，一条消息会记录到控制台，该消息指示函数名称以及调用该函数时传递给该函数的参数。</td>
</tr>
<tr>
<td>monitorEvents</td>
<td>当指定对象上发生指定事件之一时，事件对象将记录到控制台。您可以指定要监视的单个事件，事件数组或映射到预定义事件集合的一般事件“类型”之一。</td>
</tr>
</tbody></table></div>

        <h3 id="参考资源"   >
          <a href="#参考资源" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3>
      <blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://developers.google.com/web/tools/chrome-devtools/console/utilities" >https://developers.google.com/web/tools/chrome-devtools/console/utilities</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> &gt; <span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console" >https://developer.mozilla.org/zh-CN/docs/Web/API/Console</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> &gt; <span class="exturl"><a class="exturl__link"   href="https://segmentfault.com/a/1190000002511877" >https://segmentfault.com/a/1190000002511877</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> &gt; <span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/80751021" >https://zhuanlan.zhihu.com/p/80751021</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome开发者工具总览</title>
    <url>/posts/overview-of-chrome-developer-tools.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="缘起"   >
          <a href="#缘起" class="heading-link"><i class="fas fa-link"></i></a><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2>
      <p>起初本来是看到旁边的一个同事在看<strong>Application</strong>面板的<strong>Service Workers</strong>的功能，然后想到自己虽然说是工作也接近两年了，但是 Chrome 开发者工具的面板自己又有多少的理解呢？</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923174740.png" >
      </p>
<span id="more"></span>

<p>俗话说：工欲善其事，必先利其器。对于我们 WEB 开发者来说，Chrome 就和我们的吃饭的工具相差无异。因此，我就想做一个系列，在<span class="exturl"><a class="exturl__link"   href="https://developers.google.com/web/tools/chrome-devtools?hl=zh-cn" >谷歌官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>的基础上，全方位的解读 DevTool 的每一个面板。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923174758.png" >
      </p>
<p>我想，这无论是对于初学者的入门，还是对于已从事 WEB 开发的工作人员的深入，都是很有必要的。</p>

        <h2 id="计划"   >
          <a href="#计划" class="heading-link"><i class="fas fa-link"></i></a><a href="#计划" class="headerlink" title="计划"></a>计划</h2>
      <p>现计划的是每周更新一个面板的使用方法，里面将包含基本的操作和一些高级的使用技巧。</p>
<p>这对于我来说，无疑是一个考验，也是一次学习的机会。</p>
<p>加油！</p>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome Elements面板解析</title>
    <url>/posts/chrome-elements-panel-analysis.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h3 id="Chrome-开发者工具的打开方式"   >
          <a href="#Chrome-开发者工具的打开方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Chrome-开发者工具的打开方式" class="headerlink" title="Chrome 开发者工具的打开方式"></a>Chrome 开发者工具的打开方式</h3>
      <p>在开始面板分析之前，说下 DevTool 的打开方式。</p>
<ul>
<li>右键 Inspect(Ctrl+Shift+I)</li>
<li>F12 打开(或者光标放在地址栏 F12 打开)</li>
<li>Menu -&gt; More tools -&gt; Developer Tools</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192035.png" >
      </p>
<span id="more"></span>


        <h3 id="初识面板"   >
          <a href="#初识面板" class="heading-link"><i class="fas fa-link"></i></a><a href="#初识面板" class="headerlink" title="初识面板"></a>初识面板</h3>
      <p>在打 DevTool 之后选择 Elements 就可以打开 Elements 面板<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192117.png" >
      </p>

        <h4 id="面板分析"   >
          <a href="#面板分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#面板分析" class="headerlink" title="面板分析"></a>面板分析</h4>
      <p>最左侧面板为实际网页；在右侧的面板中，主要分为两部分，一部分是左侧的 DOM Tree 结构，右侧则是属性的子面板。</p>

        <h3 id="DOM-面板使用方法"   >
          <a href="#DOM-面板使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#DOM-面板使用方法" class="headerlink" title="DOM 面板使用方法"></a>DOM 面板使用方法</h3>
      
        <h4 id="选择元素"   >
          <a href="#选择元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h4>
      <p>选择元素之后，右侧的 DOM Tree 面板会高亮此元素，底部会显示当前的 DOM 元素的路径，属性子面板也会展示该元素的属性。</p>
<p>选择元素的方式有几种：</p>
<ul>
<li>在元素上右键审查</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192155.png" >
      </p>
<ul>
<li>使用选择工具在页面审查<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192204.png" >
      </li>
<li>在 DOM Tree 面板 hover 选中元素。此时两边的显示是及时联动的，可以及时观察，底部显示了 DOM 元素路径。</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192215.png" >
      </p>
<p>在元素选中之后，DOM Tree 会呈现高亮状态，hover 的时候在网页的实际视图也会呈现高亮。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192227.png" >
      </p>

        <h4 id="切换元素"   >
          <a href="#切换元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#切换元素" class="headerlink" title="切换元素"></a>切换元素</h4>
      <p>在选择元素之后，可以通过键盘的<strong>上下键</strong>来进行上一级和下一级的选择，<strong>左右键</strong>可以对这个 DOM 节点进行展开和闭合。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600860508428-ia_10012.gif" >
      <br>同时，在选择了元素之后，可以直接输入$0，打印当前的元素。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192850.png" >
      </p>

        <h4 id="基本编辑操作"   >
          <a href="#基本编辑操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本编辑操作" class="headerlink" title="基本编辑操作"></a>基本编辑操作</h4>
      <p>所有的属性编辑之后再网页都可以及时看到效果。</p>

        <h5 id="文本编辑"   >
          <a href="#文本编辑" class="heading-link"><i class="fas fa-link"></i></a><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h5>
      <p>在对应的文本上面双击可以快速选择属性，进行修改。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192905.png" >
      </p>

        <h5 id="属性编辑"   >
          <a href="#属性编辑" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性编辑" class="headerlink" title="属性编辑"></a>属性编辑</h5>
      <p>在对应的属性上面双击可以快速选择属性，进行修改。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923192928.png" >
      </p>

        <h5 id="元素拖拽"   >
          <a href="#元素拖拽" class="heading-link"><i class="fas fa-link"></i></a><a href="#元素拖拽" class="headerlink" title="元素拖拽"></a>元素拖拽</h5>
      <p>选中的元素右键单击按住不放可以拖拽，DOM Tree 的结构顺序被改变。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10016.gif" >
      </p>

        <h5 id="元素隐藏、删除，恢复"   >
          <a href="#元素隐藏、删除，恢复" class="heading-link"><i class="fas fa-link"></i></a><a href="#元素隐藏、删除，恢复" class="headerlink" title="元素隐藏、删除，恢复"></a>元素隐藏、删除，恢复</h5>
      <p>选中元素，按<strong>H</strong>键（英文输入模式下）可以切换元素的显隐，<strong>delete</strong>键可以直接删除 DOM 节点，<strong>Ctrl+Z</strong>可以恢复上一步的操作。</p>
<ul>
<li>显隐切换<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10017.gif" >
      </li>
<li>删除和恢复<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600860698279-ia_10018.gif" >
      </li>
</ul>

        <h4 id="hover-效果"   >
          <a href="#hover-效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#hover-效果" class="headerlink" title="hover 效果"></a>hover 效果</h4>
      
        <h5 id="hover"   >
          <a href="#hover" class="heading-link"><i class="fas fa-link"></i></a><a href="#hover" class="headerlink" title="hover"></a>hover</h5>
      <p>hover 的时候，网页内容会随鼠标位置联动，同时如果是图片元素会显示图片的缩略图和图片地址。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923193201.png" >
      </p>

        <h4 id="右键菜单"   >
          <a href="#右键菜单" class="heading-link"><i class="fas fa-link"></i></a><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h4>
      <p>当我们在 DOM tree 面板对元素右键的的时候会显示右键菜单。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923193213.png" >
      </p>
<p>接下来我们将对右键菜单一一解析。</p>

        <h5 id="Reveal-in-Source-panel-在资源面板显示（图片、音视频等资源会显示）"   >
          <a href="#Reveal-in-Source-panel-在资源面板显示（图片、音视频等资源会显示）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Reveal-in-Source-panel-在资源面板显示（图片、音视频等资源会显示）" class="headerlink" title="Reveal in Source panel 在资源面板显示（图片、音视频等资源会显示）"></a>Reveal in Source panel 在资源面板显示（图片、音视频等资源会显示）</h5>
      
        <h5 id="Open-in-new-tab-在新窗口打开资源（图片、音视频等资源会显示）"   >
          <a href="#Open-in-new-tab-在新窗口打开资源（图片、音视频等资源会显示）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Open-in-new-tab-在新窗口打开资源（图片、音视频等资源会显示）" class="headerlink" title="Open in new tab 在新窗口打开资源（图片、音视频等资源会显示）"></a>Open in new tab 在新窗口打开资源（图片、音视频等资源会显示）</h5>
      
        <h5 id="Add-attribute-为当前元素添加属性"   >
          <a href="#Add-attribute-为当前元素添加属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#Add-attribute-为当前元素添加属性" class="headerlink" title="Add attribute 为当前元素添加属性"></a>Add attribute 为当前元素添加属性</h5>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600860770382-ia_10021.gif" >
      </p>

        <h5 id="Edit-as-HTML-以-HTML-方式编辑当前元素"   >
          <a href="#Edit-as-HTML-以-HTML-方式编辑当前元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#Edit-as-HTML-以-HTML-方式编辑当前元素" class="headerlink" title="Edit as HTML 以 HTML 方式编辑当前元素"></a>Edit as HTML 以 HTML 方式编辑当前元素</h5>
      <p>点击其他地方，编辑区域失去焦点就会保存</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600860994416-ia_10022.gif" >
      </p>

        <h5 id="Delete-Element-删除当前的元素，和键盘的-Delete-一样"   >
          <a href="#Delete-Element-删除当前的元素，和键盘的-Delete-一样" class="heading-link"><i class="fas fa-link"></i></a><a href="#Delete-Element-删除当前的元素，和键盘的-Delete-一样" class="headerlink" title="Delete Element 删除当前的元素，和键盘的 Delete 一样"></a>Delete Element 删除当前的元素，和键盘的 Delete 一样</h5>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861077498-ia_10023.gif" >
      </p>

        <h5 id="Copy-复制"   >
          <a href="#Copy-复制" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-复制" class="headerlink" title="Copy 复制"></a>Copy 复制</h5>
      
        <h6 id="Cut-element-剪切元素"   >
          <a href="#Cut-element-剪切元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#Cut-element-剪切元素" class="headerlink" title="Cut element 剪切元素"></a>Cut element 剪切元素</h6>
      <p><strong>粘贴的时候原来元素会消失</strong></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861109023-ia_10024.gif" >
      </p>

        <h6 id="Copy-element-复制元素"   >
          <a href="#Copy-element-复制元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-element-复制元素" class="headerlink" title="Copy element 复制元素"></a>Copy element 复制元素</h6>
      <p><strong>粘贴的时候原来元素不会消失</strong></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861135705-ia_10025.gif" >
      </p>

        <h6 id="Paste-element-粘贴元素（在已复制的情况）"   >
          <a href="#Paste-element-粘贴元素（在已复制的情况）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Paste-element-粘贴元素（在已复制的情况）" class="headerlink" title="Paste element 粘贴元素（在已复制的情况）"></a>Paste element 粘贴元素（在已复制的情况）</h6>
      <p>粘贴操作</p>

        <h6 id="Copy-outerHTML-复制序列化的-HTML-片段（outerHTML）"   >
          <a href="#Copy-outerHTML-复制序列化的-HTML-片段（outerHTML）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-outerHTML-复制序列化的-HTML-片段（outerHTML）" class="headerlink" title="Copy outerHTML 复制序列化的 HTML 片段（outerHTML）"></a>Copy outerHTML 复制序列化的 HTML 片段（<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/outerHTML" >outerHTML</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861179087-ia_10026.gif" >
      </p>

        <h6 id="Copy-selector-复制选择器（可以直接放到选择语句中使用）"   >
          <a href="#Copy-selector-复制选择器（可以直接放到选择语句中使用）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-selector-复制选择器（可以直接放到选择语句中使用）" class="headerlink" title="Copy selector 复制选择器（可以直接放到选择语句中使用）"></a>Copy selector 复制选择器（可以直接放到选择语句中使用）</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861215618-ia_10027.gif" >
      </p>

        <h6 id="Copy-JS-path-复制-JS-路径，可以直接使用"   >
          <a href="#Copy-JS-path-复制-JS-路径，可以直接使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-JS-path-复制-JS-路径，可以直接使用" class="headerlink" title="Copy JS path 复制 JS 路径，可以直接使用"></a>Copy JS path 复制 JS 路径，可以直接使用</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861240014-ia_10028.gif" >
      </p>

        <h6 id="Copy-styles-复制作用在此元素的样式"   >
          <a href="#Copy-styles-复制作用在此元素的样式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-styles-复制作用在此元素的样式" class="headerlink" title="Copy styles 复制作用在此元素的样式"></a>Copy styles 复制作用在此元素的样式</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861263916-ia_10029.gif" >
      </p>

        <h6 id="Copy-XPath-复制元素的-XPath"   >
          <a href="#Copy-XPath-复制元素的-XPath" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-XPath-复制元素的-XPath" class="headerlink" title="Copy XPath 复制元素的 XPath"></a>Copy XPath 复制元素的 XPath</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861288306-ia_10030.gif" >
      </p>

        <h6 id="Copy-full-XPath-复制元素的完整-XPath"   >
          <a href="#Copy-full-XPath-复制元素的完整-XPath" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-full-XPath-复制元素的完整-XPath" class="headerlink" title="Copy full XPath 复制元素的完整 XPath"></a>Copy full XPath 复制元素的完整 XPath</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-23/1600861309572-ia_10031.gif" >
      </p>

        <h6 id="Copy-link-address-复制当前的连接地址（在图片等媒体元素上会显示）"   >
          <a href="#Copy-link-address-复制当前的连接地址（在图片等媒体元素上会显示）" class="heading-link"><i class="fas fa-link"></i></a><a href="#Copy-link-address-复制当前的连接地址（在图片等媒体元素上会显示）" class="headerlink" title="Copy link address 复制当前的连接地址（在图片等媒体元素上会显示）"></a>Copy link address 复制当前的连接地址（在图片等媒体元素上会显示）</h6>
      
        <h5 id="Force-state-强制当前元素的状态"   >
          <a href="#Force-state-强制当前元素的状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#Force-state-强制当前元素的状态" class="headerlink" title="Force state 强制当前元素的状态"></a>Force state 强制当前元素的状态</h5>
      <p>一共有五种<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923194429.png" >
      <br>(附： <span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes" >全部伪类</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、 <span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/crimson-water-3phqw" >简单的 demo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)<br>1.:active 激活状态<br> 2.:hover 虚指状态<br> 3.:focus 获得焦点状态<br> 4.:visited 已访问过的链接状态<br> 5.:focus-within 元素获得焦点或该元素的后代元素获得焦点的状态<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10033.gif" >
      </p>

        <h5 id="Brake-on-断点"   >
          <a href="#Brake-on-断点" class="heading-link"><i class="fas fa-link"></i></a><a href="#Brake-on-断点" class="headerlink" title="Brake on 断点"></a>Brake on 断点</h5>
      <p>(附： <span class="exturl"><a class="exturl__link"   href="https://fewn8.csb.app/" >简单的 demo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923194446.png" >
      </p>
<p>一共有三种可以为<strong>JS</strong>修改 DOM 的情况打断点：</p>
<p>1.subtree modification 子节点修改</p>
<p>2.attribute modification 属性修改</p>
<p>3.node removal 节点移除<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10035.gif" >
      </p>

        <h5 id="expand-recursively-将此节点的每个子节点展开"   >
          <a href="#expand-recursively-将此节点的每个子节点展开" class="heading-link"><i class="fas fa-link"></i></a><a href="#expand-recursively-将此节点的每个子节点展开" class="headerlink" title="expand recursively 将此节点的每个子节点展开"></a>expand recursively 将此节点的每个子节点展开</h5>
      
        <h5 id="collapse-children-将子节点全部折叠"   >
          <a href="#collapse-children-将子节点全部折叠" class="heading-link"><i class="fas fa-link"></i></a><a href="#collapse-children-将子节点全部折叠" class="headerlink" title="collapse children 将子节点全部折叠"></a>collapse children 将子节点全部折叠</h5>
      <p>一起演示：<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10036.gif" >
      </p>

        <h5 id="Scroll-into-view-将元素滚动到视图中"   >
          <a href="#Scroll-into-view-将元素滚动到视图中" class="heading-link"><i class="fas fa-link"></i></a><a href="#Scroll-into-view-将元素滚动到视图中" class="headerlink" title="Scroll into view 将元素滚动到视图中"></a>Scroll into view 将元素滚动到视图中</h5>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10037.gif" >
      </p>

        <h5 id="Focus-将在视图中高亮选择的元素，但是不一定在视图显示"   >
          <a href="#Focus-将在视图中高亮选择的元素，但是不一定在视图显示" class="heading-link"><i class="fas fa-link"></i></a><a href="#Focus-将在视图中高亮选择的元素，但是不一定在视图显示" class="headerlink" title="Focus 将在视图中高亮选择的元素，但是不一定在视图显示"></a>Focus 将在视图中高亮选择的元素，但是不一定在视图显示</h5>
      
        <h5 id="Store-as-global-variable-将此元素存储为全局变量"   >
          <a href="#Store-as-global-variable-将此元素存储为全局变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#Store-as-global-variable-将此元素存储为全局变量" class="headerlink" title="Store as global variable 将此元素存储为全局变量"></a>Store as global variable 将此元素存储为全局变量</h5>
      <p>接下来就可以像操作 JS 一样直接操作元素。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10038.gif" >
      </p>

        <h3 id="属性子面板使用方法"   >
          <a href="#属性子面板使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性子面板使用方法" class="headerlink" title="属性子面板使用方法"></a>属性子面板使用方法</h3>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923194836.png" >
      </p>

        <h4 id="Styles"   >
          <a href="#Styles" class="heading-link"><i class="fas fa-link"></i></a><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h4>
      <p>当我们选中元素的时候，右侧子面板就会显示当前元素的 Styles 面板。这个面板主要有三个部分<strong>Filter 栏</strong>、<strong>样式操作栏</strong>、<strong>盒模型栏</strong></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923194844.png" >
      </p>

        <h5 id="Filter-栏"   >
          <a href="#Filter-栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#Filter-栏" class="headerlink" title="Filter 栏"></a>Filter 栏</h5>
      <p>可以对元素的样式进行筛选，强制状态，切换 class 和增加 class</p>
<p>过滤操作<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10041.gif" >
      </p>
<p>强制状态，和右键菜单的区别就是在这里还可以直接看到作用的样式<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10042.gif" >
      <br>切换、增加 class<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10043.gif" >
      </p>
<p>增加样式（最右侧）</p>
<p>此处的添加可以下拉添加到已经存在的 class 中，或者仅仅在开发者工具中<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10044.gif" >
      </p>

        <h5 id="样式操作栏"   >
          <a href="#样式操作栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#样式操作栏" class="headerlink" title="样式操作栏"></a>样式操作栏</h5>
      <p>选中一个元素可以出现一下的样式操作面板</p>

        <h6 id="样式操作栏概览"   >
          <a href="#样式操作栏概览" class="heading-link"><i class="fas fa-link"></i></a><a href="#样式操作栏概览" class="headerlink" title="样式操作栏概览"></a>样式操作栏概览</h6>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195025.png" >
      </p>
<ul>
<li>1：元素行内样式</li>
<li>2：元素受 class 影响的样式</li>
<li>3：浏览器默认的样式</li>
<li>4：继承的样式，并且有标出继承自何处</li>
</ul>

        <h6 id="操作细节"   >
          <a href="#操作细节" class="heading-link"><i class="fas fa-link"></i></a><a href="#操作细节" class="headerlink" title="操作细节"></a>操作细节</h6>
      <ul>
<li>右下角可以新增<strong>文本阴影</strong>，<strong>盒子阴影</strong>，<strong>文字淹死</strong>，<strong>背景色</strong>，<strong>权重更高的 class</strong></li>
<li>右上角有显示具体的文件地址</li>
<li>单击可以新增 css 的属性，编辑的时候会有提示</li>
<li>双击可以款速选中</li>
<li>前面的 checkbox 可以切换此条样式的作用</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10046.gif" >
      </p>
<p>颜色选择工具<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195153.png" >
      <br>文本阴影编辑<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195201.png" >
      <br>box-shadow 工具<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195208.png" >
      </p>

        <h5 id="盒模型栏"   >
          <a href="#盒模型栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#盒模型栏" class="headerlink" title="盒模型栏"></a>盒模型栏</h5>
      <p>见 Computed 面板</p>

        <h4 id="Computed"   >
          <a href="#Computed" class="heading-link"><i class="fas fa-link"></i></a><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h4>
      <p>展示当前实际作用在元素的盒模型</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195221.png" >
      </p>
<p>一共有三个部分：盒模型，作用样式列表，字体加载</p>

        <h5 id="盒模型"   >
          <a href="#盒模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h5>
      <p>展示当前元素的 position，margin，padding，border 值，在不同的边距上面 hover 元素会对应的高亮。</p>
<p>直接双击值可以直接修改。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10051.gif" >
      </p>

        <h5 id="作用样式列表"   >
          <a href="#作用样式列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#作用样式列表" class="headerlink" title="作用样式列表"></a>作用样式列表</h5>
      <p>列出作用在元素的列表，可以切换是否展示默认的样式，可以进行 filter（同 Styles Filter）</p>

        <h5 id="字体加载"   >
          <a href="#字体加载" class="heading-link"><i class="fas fa-link"></i></a><a href="#字体加载" class="headerlink" title="字体加载"></a>字体加载</h5>
      <p>展示字体加载情况</p>

        <h4 id="Event-Listeners"   >
          <a href="#Event-Listeners" class="heading-link"><i class="fas fa-link"></i></a><a href="#Event-Listeners" class="headerlink" title="Event Listeners"></a>Event Listeners</h4>
      <p><span class="exturl"><a class="exturl__link"   href="https://jd4oz.csb.app/" >练习 demo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195248.png" >
      <br>从左到右，分别为</p>
<ul>
<li>刷新</li>
<li>是否显示父元素及祖先元素的事件<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10053.gif" >
      </li>
<li>事件监听类型选择（被动类型和非阻塞类型）</li>
</ul>
<p>Passive event listeners:<a href="https://zhuanlan.zhihu.com/p/24555031"><strong>提升页面滑动的流畅度</strong></a></p>
<ul>
<li>框架绑定的事件监听</li>
</ul>
<p>resolve event listeners bound with framework 是否看到的是原始的代码<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10054.gif" >
      </p>
<p>下面就是绑定元素和具体的代码位置，key 是绑定事件名,点击 remove 可以解绑对应的事件。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195345.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10056.gif" >
      </p>

        <h4 id="DOM-Breakpoints"   >
          <a href="#DOM-Breakpoints" class="heading-link"><i class="fas fa-link"></i></a><a href="#DOM-Breakpoints" class="headerlink" title="DOM Breakpoints"></a>DOM Breakpoints</h4>
      <p>展示出在右键菜单中所打的断点</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_10057.gif" >
      </p>

        <h4 id="Properties"   >
          <a href="#Properties" class="heading-link"><i class="fas fa-link"></i></a><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4>
      <p>展示所选中元素的各种属性<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195449.png" >
      <br>如图列举出了当前节点的：</p>
<ul>
<li>img#hplogo 的属性</li>
<li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement" >图片元素的属性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement" >元素的属性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node" >Node 的属性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget" >EventTarget 的属性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" >Object 的属性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<p>如果有需要就可以展开详细查看<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195458.png" >
      </p>

        <h4 id="Accessibility"   >
          <a href="#Accessibility" class="heading-link"><i class="fas fa-link"></i></a><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h4>
      <p>可访问性，<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BE%85%E5%8A%A9%E5%8A%9F%E8%83%BD" >计算机辅助功能</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/ARIA" >无障碍访问</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923195505.png" >
      </p>
<p>从上往下依次为：</p>
<ul>
<li>可访问树</li>
</ul>
<p>可访问性树是 DOM 树的子集。它仅包含 DOM 树中与在屏幕阅读器中显示页面内容相关且有用的元素。</p>
<ul>
<li>可访问属性</li>
</ul>
<p>ARIA 属性可确保屏幕阅读器拥有他们需要的所有信息，以正确表示页面的内容</p>
<ul>
<li>最终渲染的属性，计算的可访问性属性</li>
</ul>

        <h3 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h3>
      <p>以上，就是 Chrome Elements 面板的全部内容，如有错误，还望各位看官斧正。</p>
<p>预告：Chrome Console 面板进行中</p>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome Network面板解析</title>
    <url>/posts/chrome-network-panel-analysis.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="Network-打开方式"   >
          <a href="#Network-打开方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Network-打开方式" class="headerlink" title="Network 打开方式"></a>Network 打开方式</h2>
      <ul>
<li>在控制台打开的情况选择 Network 按钮</li>
<li>输入快捷键<code>Ctrl+Shift+P</code>，再输入 <code>Network</code></li>
</ul>

        <h2 id="初识面板"   >
          <a href="#初识面板" class="heading-link"><i class="fas fa-link"></i></a><a href="#初识面板" class="headerlink" title="初识面板"></a>初识面板</h2>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175812.png" >
      </p>
<span id="more"></span>


        <h2 id="工具栏"   >
          <a href="#工具栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h2>
      <p>工具栏差不多有十个按钮，每个按钮都有不同的功能。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175847.png" >
      </p>

        <h3 id="启用网络记录"   >
          <a href="#启用网络记录" class="heading-link"><i class="fas fa-link"></i></a><a href="#启用网络记录" class="headerlink" title="启用网络记录"></a>启用网络记录</h3>
      <p>控制是否开启记录网络请求，高亮时开启。</p>

        <h3 id="清除请求日志"   >
          <a href="#清除请求日志" class="heading-link"><i class="fas fa-link"></i></a><a href="#清除请求日志" class="headerlink" title="清除请求日志"></a>清除请求日志</h3>
      <p>清除当前的网络请求列表</p>

        <h3 id="请求过滤"   >
          <a href="#请求过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求过滤" class="headerlink" title="请求过滤"></a>请求过滤</h3>
      <p>点击此按钮会出现过滤栏，接下来对过滤栏进行分析</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175907.png" >
      </p>

        <h4 id="过滤输入框"   >
          <a href="#过滤输入框" class="heading-link"><i class="fas fa-link"></i></a><a href="#过滤输入框" class="headerlink" title="过滤输入框"></a>过滤输入框</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201221173352.png" >
      </p>
<p>我们可以利用输入框来进行过滤搜索，允许通过:<code>key:value</code>的形式来进行过滤，多个条件之间使用<strong>空格</strong>进行分隔，并且支持正则匹配。</p>
<p>输入框支持一些默认字段来增强功能，比如<code>mime-type:image/gif larger-than:1K</code>可以过滤出大于 1KB 的 GIF 图片。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201221173802.png" >
      <br>当我们输入对应的键之后，Chrome 会智能将一些可以选择的值作为下拉列表展示出来。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201221174610.png" >
      </p>
<p>具体的字段如下：</p>
<ul>
<li>cookie-domain cookie 所在的域</li>
<li>cookie-name cookie 的键的名字</li>
<li>cookie-path cookie 所在的目录</li>
<li>cookie-value cookie 的值</li>
<li>domain 只展示具体的域名的资源</li>
<li>has-response-header 显示包含指定 HTTP 响应标头的资源</li>
<li>is 使用<code>is:running</code>匹配<code>WebSocket</code>资源</li>
<li>larger-than 过滤出资源比指定值大的资源</li>
<li>method 请求方法过滤</li>
<li>mime-type MIME type 过滤</li>
<li>mixed-content HTTP 和 HTTPS 混合页面过滤<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-TW/docs/Web/Security/Mixed_content#Mixed_active_content" >相关</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>priority 优先级与指定值匹配</li>
<li>resource-type 资源类型过滤</li>
<li>scheme HTTP/HTTPS 过滤</li>
<li>set-cookie-domain 根据 set-Cookie 的 Domain 过滤</li>
<li>set-cookie-name 根据 set-Cookie 的 name 过滤</li>
<li>set-cookie-value 根据 set-Cookie 的 value 过滤</li>
<li>status-code 状态码过滤</li>
<li>url 请求 URL 过滤</li>
</ul>

        <h4 id="类型过滤"   >
          <a href="#类型过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#类型过滤" class="headerlink" title="类型过滤"></a>类型过滤</h4>
      
        <h5 id="Hide-Data-URLs"   >
          <a href="#Hide-Data-URLs" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hide-Data-URLs" class="headerlink" title="Hide Data URLs"></a>Hide Data URLs</h5>
      <p>含义：前缀为 data: 协议的 URL，其允许内容创建者向文档中嵌入小文件。简单的例子：用 base64 展示图片<br><span class="exturl"><a class="exturl__link"   href="https://www.w3docs.com/tools/code-editor/10848" >demo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/ia_1900000653.gif" >
      </p>

        <h5 id="具体类型"   >
          <a href="#具体类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#具体类型" class="headerlink" title="具体类型"></a>具体类型</h5>
      <p>后面展示了一些具体的类型 All(全部)、XHR(XMLHttpRequest 和 fetch)、CSS(样式表)、Img(图片资源)、Media(媒体资源)、Font(字体资源)、WS(WebSocket)、MainFest()</p>

        <h3 id="请求搜索"   >
          <a href="#请求搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求搜索" class="headerlink" title="请求搜索"></a>请求搜索</h3>
      <p>点击搜索按钮，或者在 Network 面板按快捷键<code>Ctrl+F</code>,将会出现搜索侧边栏。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608537844605-image.png" >
      <br>侧边栏不仅可以搜索<code>请求地址</code>、<code>请求参数</code>、<code>头信息</code>，还可以搜索<code>响应数据</code>，简单说来就是可以搜索<strong>请求的所有信息</strong>，感觉还比讲到的<code>Filter</code>还要强大，但是不能够针对响应的文件类型做过滤。</p>
<p>以下举例请求地址、Response 数据和 cookie。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608537986338-image.png"  alt="请求地址">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608538087481-image.png"  alt="Response响应">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608538063517-image.png"  alt="cookie">
      </p>

        <h3 id="保留请求日志"   >
          <a href="#保留请求日志" class="heading-link"><i class="fas fa-link"></i></a><a href="#保留请求日志" class="headerlink" title="保留请求日志"></a>保留请求日志</h3>
      <p><code>Preserve Log</code>:是否保留日志，一般的是关闭，代表每次刷新就会清空请求的数据；勾选代表一直保留，可以跨页面保留。</p>

        <h3 id="禁用缓存"   >
          <a href="#禁用缓存" class="heading-link"><i class="fas fa-link"></i></a><a href="#禁用缓存" class="headerlink" title="禁用缓存"></a>禁用缓存</h3>
      <p><code>Disable cache</code>：是否禁用缓存，发勾选则禁用，否则代表可以使用缓存。</p>
<p>请注意，禁用缓存功能当且仅当开发者工具面板打开的时候有效。</p>

        <h3 id="网络情况模拟"   >
          <a href="#网络情况模拟" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络情况模拟" class="headerlink" title="网络情况模拟"></a>网络情况模拟</h3>
      <p>我们在开发的时候有时候需要用到网速模拟来查看页面的加载情况，Chrome 也很贴心的提供了这个功能。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608538559387-image.png" >
      <br>这里有几项预设：</p>
<ul>
<li>Online 默认选项，不对网络进行模拟</li>
<li>Fast 3G 下载 1.5 Mb/s,延迟 500ms</li>
<li>Slow 3G 下载 376 kb/s,延迟 2000ms</li>
</ul>
<p>你也可以选择<code>Add</code>自定义添加</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608538845190-image.png" >
      </p>

        <h3 id="请求文件的导入导出"   >
          <a href="#请求文件的导入导出" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求文件的导入导出" class="headerlink" title="请求文件的导入导出"></a>请求文件的导入导出</h3>
      <p>将当前开发者工具的 NetWork 记录的请求记录全部导入和导出的功能，导出生成<code>HAR</code>文件,后面也可以导入到开发者工具。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608538973115-image.png" >
      </p>

        <h3 id="设置"   >
          <a href="#设置" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置" class="headerlink" title="设置"></a>设置</h3>
      <p>点击最右侧的设置按钮将出现设置条目，总共有四个功能：</p>

        <h4 id="用更高的行展示请求"   >
          <a href="#用更高的行展示请求" class="heading-link"><i class="fas fa-link"></i></a><a href="#用更高的行展示请求" class="headerlink" title="用更高的行展示请求"></a>用更高的行展示请求</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608539961418-image.png" >
      </p>

        <h4 id="Group-by-frame-通过请求域名分组"   >
          <a href="#Group-by-frame-通过请求域名分组" class="heading-link"><i class="fas fa-link"></i></a><a href="#Group-by-frame-通过请求域名分组" class="headerlink" title="Group by frame 通过请求域名分组"></a>Group by frame 通过请求域名分组</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608540037194-image.png" >
      </p>

        <h4 id="Show-overview-展示请求总览，上面有时间线和请求，可以选择范围"   >
          <a href="#Show-overview-展示请求总览，上面有时间线和请求，可以选择范围" class="heading-link"><i class="fas fa-link"></i></a><a href="#Show-overview-展示请求总览，上面有时间线和请求，可以选择范围" class="headerlink" title="Show overview 展示请求总览，上面有时间线和请求，可以选择范围"></a>Show overview 展示请求总览，上面有时间线和请求，可以选择范围</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608539865340-image.png" >
      </p>

        <h4 id="Capture-screenShots-屏幕捕捉"   >
          <a href="#Capture-screenShots-屏幕捕捉" class="heading-link"><i class="fas fa-link"></i></a><a href="#Capture-screenShots-屏幕捕捉" class="headerlink" title="Capture screenShots 屏幕捕捉"></a>Capture screenShots 屏幕捕捉</h4>
      <p>开启之后可以进行屏幕捕捉，双击左键可以放大当前帧的图片，并且底部可以切换</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608540355194-image.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608540251524-image.png" >
      </p>
<p>按住<code>Ctrl</code>再点击图片，可以看到当前帧所发出的请求。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-21/1608540509955-scr1.gif" >
      </p>

        <h2 id="信息总览栏"   >
          <a href="#信息总览栏" class="heading-link"><i class="fas fa-link"></i></a><a href="#信息总览栏" class="headerlink" title="信息总览栏"></a>信息总览栏</h2>
      <p>信息总览栏列出了一些页面加载情况的参数和指标，一共有<code>requests</code>、<code>transferred</code>、<code>resources</code>、<code>Finish</code>、<code>DOMContentLoaded</code>、<code>Load</code>等字段。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201221171308.png" >
      </p>

        <h3 id="含义解析"   >
          <a href="#含义解析" class="heading-link"><i class="fas fa-link"></i></a><a href="#含义解析" class="headerlink" title="含义解析"></a>含义解析</h3>
      <ul>
<li>requests 记录的是请求的数量</li>
<li>transferred 所有资源的压缩大小</li>
<li>resources 所有资源未压缩的大小</li>
<li>Finish 页面上所有 http 请求发送到响应完成的时间总和</li>
<li>DOMContentLoaded DOM 树构建完成。</li>
<li>Load 页面加载完毕。</li>
</ul>

        <h3 id="Filter"   >
          <a href="#Filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3>
      <p>当与<code>Filter</code>搭配的时候，可以过滤出当前类型的所占全部请求的数据。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201221171911.png" >
      </p>

        <h2 id="请求区"   >
          <a href="#请求区" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求区" class="headerlink" title="请求区"></a>请求区</h2>
      <p>请求区总体可以看似一个表格，其中表头的列可以进行拖拽直到达到你想展示的效果，表头的项目是可以进行筛选和排序的。</p>

        <h3 id="表头分析"   >
          <a href="#表头分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#表头分析" class="headerlink" title="表头分析"></a>表头分析</h3>
      <p>在表头右键可以展示出表头项目（在请求区域右键也可以调出）,可以通过单击来切换是否展示表头项。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609744994318-image.png" >
      </p>

        <h4 id="基本表头"   >
          <a href="#基本表头" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本表头" class="headerlink" title="基本表头"></a>基本表头</h4>
      <p>具体含义如下:</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">表头</th>
<th align="center">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Name</td>
<td align="center">资源的文件名或者唯一标识符</td>
</tr>
<tr>
<td align="center">Path</td>
<td align="center">请求路径</td>
</tr>
<tr>
<td align="center">Url</td>
<td align="center">请求完整地址</td>
</tr>
<tr>
<td align="center">Method</td>
<td align="center">请求方法</td>
</tr>
<tr>
<td align="center">Status</td>
<td align="center">HTTP 状态码</td>
</tr>
<tr>
<td align="center">Protocol</td>
<td align="center">请求协议</td>
</tr>
<tr>
<td align="center">Scheme</td>
<td align="center">请求方法 http/https 等等</td>
</tr>
<tr>
<td align="center">Domain</td>
<td align="center">域名</td>
</tr>
<tr>
<td align="center">Remote Address</td>
<td align="center">远程地址</td>
</tr>
<tr>
<td align="center">Type</td>
<td align="center">请求资源的 MIME type</td>
</tr>
<tr>
<td align="center">Initator</td>
<td align="center">发起请求的对象或者流程（Html Parser、http 重定向、JS 函数、其他-比如新网址输入）</td>
</tr>
<tr>
<td align="center">Cookies</td>
<td align="center">发送 cookie 数量</td>
</tr>
<tr>
<td align="center">Set Cookies</td>
<td align="center">请求的响应设置 cookie 数量</td>
</tr>
<tr>
<td align="center">Size</td>
<td align="center">响应头的大小和响应体的大小，若从缓存中获取会显示 disk cache/memory cache 等</td>
</tr>
<tr>
<td align="center">Time</td>
<td align="center">请求开始到响应中最后一个字节接收的总持续时间</td>
</tr>
<tr>
<td align="center">Priority</td>
<td align="center">优先级</td>
</tr>
<tr>
<td align="center">Waterfall</td>
<td align="center">每个请求活动的可视化分解</td>
</tr>
<tr>
<td align="center">Connection ID</td>
<td align="center">链接 ID</td>
</tr>
</tbody></table></div>

        <h5 id="其他释义"   >
          <a href="#其他释义" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他释义" class="headerlink" title="其他释义"></a>其他释义</h5>
      <ul>
<li><p>Sort By 设置排序的依据，可以是表头中的项目，这个和双击表头项目的作用是一样的。</p>
</li>
<li><p>Reset Columns 重置表头的宽度</p>
</li>
<li><p>Response Headers</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609745184616-image.png" >
      <br>可以在表头显示 Cache-Control 等响应头信息，你还可以点击底部的<code>Manage Header Columns</code>编辑头信息<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609745286619-image.png" >
      </p>
</li>
<li><p>Waterfall<br>展示的是请求的时间分布，用柱状的形式展示出来。目前可以展示出以下的时间，具体的释义在后面有详细的阐述。</p>
<ul>
<li>Start Time 开始时间</li>
<li>Response Time 响应时间</li>
<li>End Time 结束时间</li>
<li>Total Duration 总共耗时</li>
<li>Latency 延迟</li>
</ul>
</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609745498940-image.png" >
      </p>

        <h3 id="请求区分析"   >
          <a href="#请求区分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求区分析" class="headerlink" title="请求区分析"></a>请求区分析</h3>
      
        <h4 id="请求区概览"   >
          <a href="#请求区概览" class="heading-link"><i class="fas fa-link"></i></a><a href="#请求区概览" class="headerlink" title="请求区概览"></a>请求区概览</h4>
      <p>下图是访问谷歌官网的实例，其中大多数项目是可以像 Name 一样，hover 就可以看到详情。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609746895024-image.png" >
      <br>其中：</p>
<ul>
<li>Initator hover 的时候会显示具体的触发调用栈<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609747118058-image.png" >
      </li>
<li>Waterfall hover 的时候会显示一些指标</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609748268570-image.png" >
      </p>

        <h4 id="Waterfall-指标"   >
          <a href="#Waterfall-指标" class="heading-link"><i class="fas fa-link"></i></a><a href="#Waterfall-指标" class="headerlink" title="Waterfall 指标"></a>Waterfall 指标</h4>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">表头</th>
<th align="center">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Queuedat</td>
<td align="center">执行到Initator的时间</td>
</tr>
<tr>
<td align="center">Startedat</td>
<td align="center">开始请求流程的时间</td>
</tr>
<tr>
<td align="center">Queueing</td>
<td align="center">排队：已有高优先级的请求、已经达到了TCP链接数量、浏览器正在磁盘缓存中短暂分配空间</td>
</tr>
<tr>
<td align="center">Stalled</td>
<td align="center">由于排队而停下来等待的时间</td>
</tr>
<tr>
<td align="center">DNSLookup</td>
<td align="center">DNS查找IP</td>
</tr>
<tr>
<td align="center">Initialconnection</td>
<td align="center">初始化链接</td>
</tr>
<tr>
<td align="center">Proxynegotiation</td>
<td align="center">代理协商</td>
</tr>
<tr>
<td align="center">Requestsent</td>
<td align="center">请求发送</td>
</tr>
<tr>
<td align="center">ServiceWorkerPreparation</td>
<td align="center">浏览器准备启动ServiceWorker</td>
</tr>
<tr>
<td align="center">RequesttoServiceWorker</td>
<td align="center">向ServiceWorker发送请求</td>
</tr>
<tr>
<td align="center">Waiting(TTFB)</td>
<td align="center">第一个字节返回的时间。TTFB代表到第一个字节的时间。此时间包括一次往返延迟和服务器准备响应所花费的时间。</td>
</tr>
<tr>
<td align="center">ContentDownload</td>
<td align="center">浏览器正在接收响应</td>
</tr>
<tr>
<td align="center">ReceivingPush</td>
<td align="center">浏览器正在通过HTTP/2服务器推送接收数据</td>
</tr>
<tr>
<td align="center">ReadingPush</td>
<td align="center">浏览器正在读取先前接收的本地数据</td>
</tr>
</tbody></table></div>

        <h4 id="单个请求选中分析"   >
          <a href="#单个请求选中分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#单个请求选中分析" class="headerlink" title="单个请求选中分析"></a>单个请求选中分析</h4>
      <p>当我们选择一个请求事，右侧面板会展示出这个请求的信息。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609749026512-image.png" >
      <br>一共有以下几项：</p>
<ul>
<li>Headers 请求的头信息，包含Query参数和Post数据，请求头响应头等详见<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" >HTTP Header</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>Preview 对返回的数据格式化预览</li>
<li>Response 展示返回的原始数据</li>
<li>Initator 同表头Initator</li>
<li>Cookies 同表头Cookies</li>
<li>Timing 同Waterfall
        <h4 id="单个请求右键分析"   >
          <a href="#单个请求右键分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#单个请求右键分析" class="headerlink" title="单个请求右键分析"></a>单个请求右键分析</h4>
      当我们选择一个请求右键的时候会弹出菜单</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609750559655-image.png" >
      <br>我们来具体分析：</p>
<ul>
<li><p>Open in new tab 在新窗口打开，这个和双击某个请求的行为是一样的，都是打开新窗口GET请求</p>
</li>
<li><p>Clear browser cache 清楚浏览器缓存</p>
</li>
<li><p>Clear browser cookies 清楚浏览器cookies</p>
</li>
<li><p>Copy 复制此请求，会展开二级菜单<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609751200913-image.png" >
      </p>
<ul>
<li>Copy link address 复制链接地址</li>
<li>Copy as Powershell 复制为Powershell 命令</li>
<li>Copy as fetch 复制为fetch函数</li>
<li>Copy as Nodejs fetch 复制为Nodejs fetch函数</li>
<li>Copy as cURl(cmd) 复制cmd执行的命令</li>
<li>Copy as cURl(bash) 复制bash执行的命令</li>
<li>… 后面五个为将全部的请求复制为对应的模式</li>
<li>Copy all as HAR 将所有请求复制为HAR内容格式（还是文本）</li>
</ul>
</li>
<li><p>Block request URL 禁止请求此地址，禁止之后在相同位置可以启用，禁止之后无法访问该请求。</p>
<p>可以进入<code>network request blocking</code>面板查看已经禁止的请求<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2021-1-4/1609752010644-image.png" >
      </p>
</li>
<li><p>Block request Domain 禁止请求此域名<br>可以进入<code>network request blocking</code>面板查看已经禁止的域名</p>
</li>
<li><p>Replay XHR 重发此请求</p>
</li>
<li><p>Sort By 设置排序依据</p>
</li>
<li><p>Header Options 设置表头项目</p>
</li>
<li><p>Save all as HAR with content 同“导出”功能，将请求导出为HAR文件</p>
</li>
</ul>

        <h2 id="引用地址"   >
          <a href="#引用地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用地址" class="headerlink" title="引用地址"></a>引用地址</h2>
      <blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://developers.google.com/web/tools/chrome-devtools/network/reference" >https://developers.google.com/web/tools/chrome-devtools/network/reference</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Github和Gitee同步中的坑</title>
    <url>/posts/pitfalls-in-github-and-gitee-synchronization.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在做 Github Pages 到 Gitee Pages 的同步操作，做个镜像备份</p>

        <h2 id="仓库同步"   >
          <a href="#仓库同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#仓库同步" class="headerlink" title="仓库同步"></a>仓库同步</h2>
      <p>我的博客构建使用的是 Github Action，因此同步功能使用的是<a href="https://github.com/wearerequired/git-mirror-action"><code>wearerequired/git-mirror-action@master</code></a>。因为 Gitee Page 的并不会随着仓库更新主动更新，因此还需要<a href="https://github.com/yanglbme/gitee-pages-action"><code>yanglbme/gitee-pages-action@master</code></a>做一个 build 的操作。</p>
<span id="more"></span>

<p><span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/blog/blob/master/.github/workflows/main.yml" >具体可以参照我的配置文件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，部分整体配置如下：</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">to</span> <span class="hljs-string">Gitee</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">wearerequired/git-mirror-action@master</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span><br>  <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACTION_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-attr">with:</span><br>  <span class="hljs-comment"># 注意替换为你的 GitHub 源仓库地址</span><br>  <span class="hljs-attr">source-repo:</span> <span class="hljs-string">&quot;git@github.com:kitety/kitety.github.io.git&quot;</span><br>  <span class="hljs-comment"># 注意替换为你的 Gitee 目标仓库地址</span><br>  <span class="hljs-attr">destination-repo:</span> <span class="hljs-string">&quot;git@gitee.com:kitety/kitety.git&quot;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Gitee</span> <span class="hljs-string">Pages</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">yanglbme/gitee-pages-action@master</span><br><span class="hljs-attr">with:</span><br>  <span class="hljs-comment"># 注意替换为你的 Gitee 用户名</span><br>  <span class="hljs-attr">gitee-username:</span> <span class="hljs-string">kitety</span><br>  <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span><br>  <span class="hljs-attr">gitee-password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITEE_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>  <span class="hljs-comment"># 注意替换为你的 Gitee 仓库</span><br>  <span class="hljs-attr">gitee-repo:</span> <span class="hljs-string">kitety/kitety</span><br><br></code></pre></td></tr></table></div></figure>

<p>其中：ACTION_DEPLOY_KEY 是私钥，GITEE_PASSWORD 是 Gitee 的密码。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201009155932.png" >
      </p>

        <h2 id="踩坑"   >
          <a href="#踩坑" class="heading-link"><i class="fas fa-link"></i></a><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2>
      
        <h3 id="第一次同步"   >
          <a href="#第一次同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次同步" class="headerlink" title="第一次同步"></a>第一次同步</h3>
      <p>第一次同步的时候必须先再自己的电脑上提交上去，就是不要用上面的命令行做第一次提交。</p>

        <h3 id="登陆问题"   >
          <a href="#登陆问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#登陆问题" class="headerlink" title="登陆问题"></a>登陆问题</h3>
      <p>开始我的也是跑 Github Action 没有问题，看起正常。但是在 gitee 的博客内容不更新，每次跑的时候还有短信的异地登录提醒。</p>
<p>后来发现有人也有相同的<span class="exturl"><a class="exturl__link"   href="https://github.com/yanglbme/gitee-pages-action/issues/6" >问题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>,仔细看了解决。</p>
<p><strong>解决方案</strong><br>就是要关注<code>Gitee（Gitee.com）官方账号</code>,绑定自己的 Gitee 账号，后面就会有推送的提醒，这样就可以同步更新了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201009212425.png" >
      </p>
<p>以上就是解决问题的方法了。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Github在线IDE初体验</title>
    <url>/posts/github-online-ide-first-experience.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前就有听说 Github 将推出在线 IDE，一搜索发现很多结果。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201014212657.png" >
      </p>
<p>现在 Github 的在线 IDE 发布一段时间了，官方命名为：<span class="exturl"><a class="exturl__link"   href="https://github.com/features/codespaces" >Github Codespaces</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（点击可以申请），今天我们就来体验一下。</p>
<span id="more"></span>


        <h2 id="基础体验"   >
          <a href="#基础体验" class="heading-link"><i class="fas fa-link"></i></a><a href="#基础体验" class="headerlink" title="基础体验"></a>基础体验</h2>
      <p>在这里，我就拿本博客的<span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/blog" >仓库</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>来简单体验一下 Github Codespaces。</p>

        <h3 id="创建-IDE"   >
          <a href="#创建-IDE" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建-IDE" class="headerlink" title="创建 IDE"></a>创建 IDE</h3>
      <p>在 Clone 的按钮选择<code>Open With Codespaces</code><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602682721438-image.png"  alt="image">
      <br>进入之后会列出已有的 IDE 列表，没有的话点击下面的新建就是了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602682784043-image.png"  alt="image">
      </p>

        <h3 id="进入-IDE"   >
          <a href="#进入-IDE" class="heading-link"><i class="fas fa-link"></i></a><a href="#进入-IDE" class="headerlink" title="进入 IDE"></a>进入 IDE</h3>
      <p>开始进入是在初始化，然后就是同步一些配置，会发现在 Vscode 的配置和插件扩展都会被同步过来（当然，前提是你本地的 VSC 和自己的 Github 绑定起来，并且同步配置）。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602682883142-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602683153389-image.png"  alt="image">
      <br><strong>并且可以看到，IDE 可以自动识别 package.json 安装依赖，进来就自动安装好了。</strong><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602682955735-image.png"  alt="image">
      </p>
<p>点击查看日志还可以查看初始化的日志。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602683024095-image.png"  alt="image">
      </p>

        <h3 id="基本使用"   >
          <a href="#基本使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3>
      
        <h4 id="预装基础环境"   >
          <a href="#预装基础环境" class="heading-link"><i class="fas fa-link"></i></a><a href="#预装基础环境" class="headerlink" title="预装基础环境"></a>预装基础环境</h4>
      <p>简单的几行代码 我们可以发现 IDE 已经预装了 node、docker、npm、git、python 等等基础开发环境。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602690279501-image.png"  alt="image">
      </p>

        <h4 id="启动项目"   >
          <a href="#启动项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4>
      <p>首先 <strong>全局安装 Hexo</strong><code>yarn global add hexo</code>，再启动项目<code>yarn d</code>.</p>
<p>因为 github 的环境在外面，因此安装速度还是很快的，纵享丝滑。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602690553256-image.png"  alt="image">
      </p>
<p><strong>外部端口的打开</strong></p>
<p>如果我们的页面需要启动本地端口，IDE 也会提示出来有外部端口。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-14/1602690647172-image.png"  alt="image">
      </p>
<p>我们也可以在<code>Remote Explorer</code>看到全部的端口映射情况</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-15/1602694549227-image.png" >
      </p>
<p>我们点击在浏览器打开，然后就可以看到页面了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-15/1602694402020-image.png" >
      </p>
<p>当我们修改之后，在侧边栏至直接提交就是了，简单快捷。也不用任何的设置。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-15/1602694872590-image.png" >
      </p>

        <h2 id="更多好玩的"   >
          <a href="#更多好玩的" class="heading-link"><i class="fas fa-link"></i></a><a href="#更多好玩的" class="headerlink" title="更多好玩的"></a>更多好玩的</h2>
      <p>我们的项目不仅仅是前端项目，也有可能是后端 Server，这里我就用一个<span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/likeReddit" >后端 Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>来简单演示一下。</p>

        <h3 id="安装依赖跑起来"   >
          <a href="#安装依赖跑起来" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装依赖跑起来" class="headerlink" title="安装依赖跑起来"></a>安装依赖跑起来</h3>
      <ul>
<li>全局安装 nodemon</li>
<li>进入 server 目录安装依赖</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015152911.png" >
      <br>很明显报错，因为我们的 server 需要连接 PostgreSQL，而我们没有安装，因此报错。</p>

        <h3 id="错误的安装方法"   >
          <a href="#错误的安装方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#错误的安装方法" class="headerlink" title="错误的安装方法"></a>错误的安装方法</h3>
      <p>找到一篇<span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/postgresql/linux-install-postgresql.html" >教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，照着代码跑起来。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install postgresql postgresql-client<br><span class="hljs-comment"># 创建一个数据库超级用户 postgres</span><br><span class="hljs-built_in">sudo</span> -i -u postgres<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015153252.png" >
      <br>最后，我们会卡在这里，因为我们不知道 codespace 的密码，因此安装失败</p>

        <h3 id="docker-出马"   >
          <a href="#docker-出马" class="heading-link"><i class="fas fa-link"></i></a><a href="#docker-出马" class="headerlink" title="docker 出马"></a>docker 出马</h3>
      <p>我们可以观察到 codespace 已经为我们安装了 docker，而且在现在相当流行容器化部署，上面的那种安装方式也不够优雅。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015153359.png" >
      </p>
<p>因此运行命令，安装 postgresql</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker run -p 5432:5432 -v /home/docker/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 -e TZ=PRC -d --name=some-postgres postgres<br>//-p端口映射<br>//-v将数据存到宿主服务器<br>//-e POSTGRES_PASSWORD 密码（默认用户名postgres）<br>//-e TZ=PRC时区，中国<br>//-d后台运行<br>//--name容器名称<br></code></pre></td></tr></table></div></figure>

<p>运行之后，找不到镜像会自动去拉取镜像<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015153646.png" >
      <br>查看下状态<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015153710.png" >
      <br>现在重启 server，发现已经可以连接上了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015153818.png" >
      </p>

        <h3 id="端口"   >
          <a href="#端口" class="heading-link"><i class="fas fa-link"></i></a><a href="#端口" class="headerlink" title="端口"></a>端口</h3>
      <p>我们可以在<code>Forwarded Ports</code>增加端口转发<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015153909.png" >
      <br>简单演示一下 get 请求，并且是即时的，修改之后可以通过域名来访问。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015154129.png" >
      <br>顺便说一句，如果我们在代码中写好 url 地址，就可以直接用鼠标在命令行打开对应端口，网址也会被进行替换。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015154329.png" >
      </p>

        <h3 id="注意"   >
          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意" class="headerlink" title="注意"></a>注意</h3>
      <p>但是也需要注意，如果我们用 postman 去请求就无法正常请求结果。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015154656.png" >
      <br>如果我们访问<code>/graphql</code>,请求就会提示<code>Server cannot be reached</code>和一些跨域错误。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201015154819.png" >
      </p>

        <h2 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
      
        <h3 id="优点"   >
          <a href="#优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#优点" class="headerlink" title="优点"></a>优点</h3>
      <p>俗话说，工欲善其事必先利其器。</p>
<p>编程更重要的是一种思想，而编码更重要的是去表达思想。</p>
<p>如果我们将配置环境，机器选择的的步骤省下来，让自己更加专注于思想表达，专注于编码的话，这样会让我们事半功倍。而现在 Github IDE 就可以看成 VSC 的网页版。如果你将 VSC 的配置同步到 Github 账户的话，你打开在线 IDE 的时候就会直接同步配置，你会很快上手。</p>
<p>除此之外，Github 的里面预装各种环境，让你不再苦恼于环境安装，而且所处的网络环境也很棒，各种库、配置下载起来也是很快，我想这对我们的帮助也是很大的。比如再也不用纠结<code>node-sass</code>下载不下等尴尬场景。</p>
<p><strong>遇到紧急的事情，一个浏览器就可以让你专注开发，这难道不香吗？</strong></p>

        <h3 id="不足"   >
          <a href="#不足" class="heading-link"><i class="fas fa-link"></i></a><a href="#不足" class="headerlink" title="不足"></a>不足</h3>
      <p>虽然 Github 在线 IDE 有很多优点,但是还是有一些不足，肯定不能和 VSC 真机比拟。比如一些接口<code>/graphql</code>，就没有本地真机开发的那么爽。除此之外，真机的 VSC 就有很多辅助扩展。比如 PicGo 来实现图片上传到 Github 做图床，在浏览器 IDE 里面经过测试是跑不通的。</p>
<p>因为每个人所处的网络环境不同，不用高级姿势访问有可能会出现链接断开的情况，这倒是有点硬伤。🤣</p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>之前听过“阿里 云电脑”，加上现在 5G 的逐渐普及，说不定未来大家需要的只是一个显示器，可以完成学习、工作和娱乐，配置全部都在远端。听起来天方夜谭，说不定在未来就会实现。</p>
<p>一个新兴事物的出来，肯定引起人们的好奇和质疑。仔细想想 Github 被微软收购之后，先后推出了个人无限私有仓库，免费使用 Github Actions，再有 Github Codespaces。而微软也先后推出 TS、VSC 等市场举足轻重的开源项目。我所看到是开源界的发展和繁荣，也希望未来越来越好。</p>
<p>撒花！</p>
]]></content>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>RXJS学习</title>
    <url>/posts/rxjs-learning.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h1 id="RxJS-学习"   >
          <a href="#RxJS-学习" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJS-学习" class="headerlink" title="RxJS 学习"></a>RxJS 学习</h1>
      <p>Reactive 响应式编程是一种思维模式，并且针对各种语言都有其各自的实现，如：RxJava、RxGo、RxJS 等等。</p>
<p>在前端领域 Reactive 响应式使用的比较多的 RxJS，比如在<strong>Angular</strong>和<strong>Nestjs</strong>等框架中就有内置 RxJS。</p>
<p>RxJS 是 Reactive Extensions for JavaScript 的缩写，起源于 Reactive Extensions，是一个基于可观测数据流 Stream 结合观察者模式和迭代器模式的一种异步编程的应用库。</p>
<p>官网声称可以讲 Rxjs 理解为处理事件的“Lodash”<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20220411193345.png" >
      </p>
<span id="more"></span>


        <h2 id="认识-Observable-和-Observe"   >
          <a href="#认识-Observable-和-Observe" class="heading-link"><i class="fas fa-link"></i></a><a href="#认识-Observable-和-Observe" class="headerlink" title="认识 Observable 和 Observe"></a><strong>认识 Observable 和 Observe</strong></h2>
      <p>首先我们需要说一下简单的观察者模式 Observe</p>
<p>其实我们最简单的点击事件就是一种观察者模式</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clickHandler</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;user click!&quot;</span>);<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, clickHandler);<br></code></pre></td></tr></table></div></figure>

<p>我们也可以简单的手写一个类来模拟。</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">addListener</span>(<span class="hljs-params">listener</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> listener === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">push</span>(listener);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;listener 必須是 function&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">removeListener</span>(<span class="hljs-params">listener</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">indexOf</span>(listener), <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-title function_">notify</span>(<span class="hljs-params">message</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">listener</span>(message);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>我们将数据放在数组中，需要的时候在遍历调用</p>
<p>还有一种是迭代器模式</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-keyword">var</span> iterator = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 1, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 2, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 3, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></div></figure>

<p>而<strong>Observable</strong>具有以上两者的通性，都是渐进式的获取值<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20220411193200.png" >
      </p>
<p><strong>Observable 就像是一个序列，里面的元素会随着时间推送</strong></p>

        <h2 id="创建-Observable"   >
          <a href="#创建-Observable" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建-Observable" class="headerlink" title="创建 Observable"></a><strong>创建 Observable</strong></h2>
      <p>create</p>
<ul>
<li><p>create</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> observable = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">create</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">observer</span>) &#123;<br>  observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>  observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;anna&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;RxJS 30 Days!&quot;</span>);<br>  &#125;, <span class="hljs-number">30</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;observable: &quot;</span>, observable);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br>observable.<span class="hljs-title function_">subscribe</span>(&#123;<br>  <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>  &#125;,<br>  <span class="hljs-attr">complete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;complete!&quot;</span>);<br>  &#125;,<br>  <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;,<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></div></figure>

</li>
</ul>
<p>of</p>
<ul>
<li>of<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&quot;jerry&quot;</span>, <span class="hljs-string">&quot;Anna&quot;</span>);<br></code></pre></td></tr></table></div></figure>

</li>
</ul>
<p>from 把类数组的值转换为 observable</p>
<ul>
<li>from<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Set, WeakSet, Iterator</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;jerry&quot;</span>, <span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2016</span>, <span class="hljs-string">&quot;30 days&quot;</span>];<br><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">from</span>(arr);<br></code></pre></td></tr></table></div></figure>

</li>
</ul>
<p>empty 没有做任何事</p>
<ul>
<li>empty<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">empty</span>();<br></code></pre></td></tr></table></div></figure>

</li>
</ul>
<p><em>never</em></p>
<ul>
<li>never 都不会发生，它只是一个可以观察到的存在<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">never</span>();<br></code></pre></td></tr></table></div></figure>

</li>
</ul>
<p>throw 抛出错误</p>
<ul>
<li>throw<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&quot;Oop!&quot;</span>);<br></code></pre></td></tr></table></div></figure>

</li>
</ul>
<p>timer 间隔输出数字</p>
<ul>
<li>timer<br>两个参数，第一个参数表示第一个输出的延迟时间；第二个参数表示后序输出的间隔时间，没有的话就只输出一个数字</li>
</ul>
<p>interval 间隔输出数字</p>
<p>fromEvent 将事件转换成 observable 序列</p>
<p>fromPromise 将*<strong>*promise**</strong>转换成 observable 序列</p>
<p>Rxjs 提供了一些纯函数作为工具函数，叫做 Operator。</p>
<p>Rxjs 的 operator 可以和数组的一些方法类比起来学习</p>
<div class="table-container"><table>
<thead>
<tr>
<th>RxJS</th>
<th>类比学习</th>
</tr>
</thead>
<tbody><tr>
<td>map</td>
<td>和数组 map 一样，对每一项执行函数并返回</td>
</tr>
<tr>
<td>concat</td>
<td>和数组 concat 类似，做 observable 的拼接</td>
</tr>
<tr>
<td>take</td>
<td>和数组 slice 类似，去除 n 个，直接输入数字</td>
</tr>
<tr>
<td>skip</td>
<td>跳过 n 个</td>
</tr>
<tr>
<td>takeLast</td>
<td>取后面 n 个</td>
</tr>
<tr>
<td>last</td>
<td>最后一个</td>
</tr>
<tr>
<td>merge</td>
<td>对各个 observable 送出的值做”或“处理</td>
</tr>
<tr>
<td>combineLatest</td>
<td>取得各个 observable 最后送出的值</td>
</tr>
<tr>
<td>zip</td>
<td>分别在推出第 n 个数的时候触发 同时</td>
</tr>
<tr>
<td>scan</td>
<td>逐次的从 observable 获取订阅的值，执行函数</td>
</tr>
<tr>
<td>debounceTime</td>
<td>消抖时间</td>
</tr>
<tr>
<td>distinct</td>
<td>去重</td>
</tr>
<tr>
<td>distinctUntilChanged</td>
<td>去重，只和最近的上一个的值进行比较</td>
</tr>
<tr>
<td>repeat</td>
<td>重复次数或者无限</td>
</tr>
<tr>
<td>retryWhen</td>
<td>一个回调，接受一个由 error 组成的 Observable 并且会循环</td>
</tr>
<tr>
<td>switch</td>
<td>数组的 flatten</td>
</tr>
</tbody></table></div>
]]></content>
      <tags>
        <tag>RXJS</tag>
      </tags>
  </entry>
  <entry>
    <title>实现自己的React之渲染Class Component</title>
    <url>/posts/realize-your-own-react-rendering-class-component.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>之前我们已经实现了字符串和数字、原生 DOM 的渲染，接下来我们将渲染 Class Component。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-11-5/1604586613544-image.png" >
      </p>
<span id="more"></span>


        <h2 id="原理分析"   >
          <a href="#原理分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2>
      <p>在 React 15 中，更新主要是由 Class Component 的 setState 执行更新的，然后更新的子元素再依次更新。而更新涉及到 DOM diff，我们将在后面的文章讲述。现在，我们先讲讲 Class Component 的渲染。</p>

        <h3 id="思路分析"   >
          <a href="#思路分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3>
      <p>在 React 中我们会这样写一个类。其中包含了一个 componentWillMount 等生命周期，handleClick 等内部方法，render 函数等，其中 render 函数 return 的才是我们真正渲染的元素，handleClick 函数调用会触发 setState 更新。</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> &#125;;<br>  &#125;<br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Counter componentWillMount&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Counter componentDidMount&quot;</span>);<br>  &#125;<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">number</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">number</span> + <span class="hljs-number">1</span> &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          console.log(1);</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">        style=&#123;&#123; backgroundColor: &quot;red&quot; &#125;&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        你好&#123;this.props.name&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;thisisaspan&quot;</span>&gt;</span></span><br><span class="language-xml">          数字是：&#123;this.state.number&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>我们最终渲染的代码如下</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ele = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-title class_">Counter</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;haha&quot;</span> &#125;);<br></code></pre></td></tr></table></div></figure>

<p>经过 babel 转换和在<span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/cool-cloud-vfbkc?file=/src/App.js" >CRA 项目中</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>打印 Class Component，我们可以看到下面的结果。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-11-5/1604587310842-image.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-11-5/1604587472964-image.png" >
      <br>从上面两张图我们看到，这个组件会经过 React.creareElement 渲染，这个和我们的渲染原生 DOM 的方式的调用是一样的。回忆我们讲的渲染原生 DOM，区别就在于原生 DOM 经 React.creareElement 返回的对象的 type 是字符串，<strong>这次返回的 type 是个函数，其实也就是个类</strong>，类也是函数。</p>

        <h3 id="步骤理解"   >
          <a href="#步骤理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#步骤理解" class="headerlink" title="步骤理解"></a>步骤理解</h3>
      <p>我们这次渲染 Class Component，区别就是调用 React.creareElement 返回的对象的 type 属性数个函数（也是个类）。我们拿到这样一个类之后，发现 render 方法返回的就是渲染的元素，因此我们实例化这个类，执行 render 方法拿到了我们渲染的元素。拿到的元素之后，他可能是原生 DOM、Class Component 或者字符串数字，因此我们要不断的递归调用 createUnit 生成 unit，调用 getmarkUp 自己去转换直到渲染出字符串。<br>除此之外，React 中写类我们要继承 React.Component ，那么我们至少要新建这个类。还有我们在处理 class 函数的时候，要注意到还有生命周期，我们要在合适的时候调用。</p>
<p>因此我们可以整理出这幅顺序图</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-11-5/1604589129707-image.png" >
      </p>
<p>我们简单理一下步骤</p>
<ul>
<li><p>创建 React.Componet 类</p>
</li>
<li><p>在 createUnit 添加判断</p>
</li>
<li><p>创建 CompositeUnit</p>
</li>
<li><p>添加 getMarkup 方法处理 Class Component</p>
<ul>
<li>实例化类</li>
<li>执行 render 方法拿到子元素</li>
<li>递归渲染子元素</li>
<li>在各个阶段执行生命周期</li>
</ul>
</li>
<li><p>全部挂载，触发 componentDidMount</p>
</li>
</ul>

        <h2 id="动手实现"   >
          <a href="#动手实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#动手实现" class="headerlink" title="动手实现"></a>动手实现</h2>
      
        <h3 id="React-Componet-类"   >
          <a href="#React-Componet-类" class="heading-link"><i class="fas fa-link"></i></a><a href="#React-Componet-类" class="headerlink" title="React.Componet 类"></a>React.Componet 类</h3>
      <p>我们创建 component.js，然后在里面添加代码</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\react\component.js</span><br><span class="hljs-comment">// 初始化这个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = props;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">Component</span> &#125;;<br></code></pre></td></tr></table></div></figure>

<p>然后还要在 react/index.js 引入这个 Component。</p>

        <h3 id="在-createUnit-判断"   >
          <a href="#在-createUnit-判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#在-createUnit-判断" class="headerlink" title="在 createUnit 判断"></a>在 createUnit 判断</h3>
      <p>我们在渲染 Class 的时候，仍然是经过了 React.createElement 返回，我们可以和原生 DOM 类似来判断。</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\react\unit.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUnit</span> (<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">if</span> ([<span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> element)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextUint</span>(element)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span> &amp;&amp; [<span class="hljs-string">&#x27;string&#x27;</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> element.<span class="hljs-property">type</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeUint</span>(element)<br>+  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span> &amp;&amp; [<span class="hljs-string">&#x27;function&#x27;</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> element.<span class="hljs-property">type</span>)) &#123;<br>+    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompositeUnit</span>(element)<br>+  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>我们判断 element 是不是 Element 的实例，同时判断 element.type 的类型是不是函数，都满足的话我们就进入创建复合单元 CompositeUnit。</p>

        <h3 id="创建-CompositeUnit-类"   >
          <a href="#创建-CompositeUnit-类" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建-CompositeUnit-类" class="headerlink" title="创建 CompositeUnit 类"></a>创建 CompositeUnit 类</h3>
      <figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\react\unit.js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompositeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Unit</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure>


        <h3 id="添加-getMarkUp-方法"   >
          <a href="#添加-getMarkUp-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加-getMarkUp-方法" class="headerlink" title="添加 getMarkUp 方法"></a>添加 getMarkUp 方法</h3>
      <p>我们添加 getMarkup 方法，接下来我们来讲解代码</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src\react\unit.js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompositeUnit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Unit</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; reactId 传入id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125; 返回一个字符串</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">getMarkUp</span>(<span class="hljs-params">reactId</span>) &#123;<br>    <span class="hljs-comment">// this上存id</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_reactId</span> = reactId;<br>    <span class="hljs-comment">// type=Component=Counter props: &#123; name: &#x27;haha&#x27; &#125;</span><br>    <span class="hljs-comment">// 取出类和props</span><br>    <span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">Component</span>, props &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentElement</span>;<br>    <span class="hljs-comment">// 实例化 后面还会用到</span><br>    <span class="hljs-comment">// 赋值到this的部分暂且可以忽略</span><br>    <span class="hljs-keyword">let</span> componentInstance = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_componentInstance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Component</span>(props));<br>    <span class="hljs-comment">// 让组件的实例的currentUnit等于当前的unit</span><br>    <span class="hljs-comment">// 赋值到this的部分暂且可以忽略</span><br>    componentInstance.<span class="hljs-property">currentUnit</span> = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">// 渲染前要componentWillMount</span><br>    componentInstance.<span class="hljs-property">componentWillMount</span> &amp;&amp;<br>      componentInstance.<span class="hljs-title function_">componentWillMount</span>();<br>    <span class="hljs-comment">// 调render方法 得到渲染的元素</span><br>    <span class="hljs-keyword">let</span> renderElement = componentInstance.<span class="hljs-title function_">render</span>();<br>    <span class="hljs-comment">// 得到render的元素创建对应的unit</span><br>    <span class="hljs-keyword">let</span> renderedInstance = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_renderedInstance</span> = <span class="hljs-title function_">createUnit</span>(renderElement));<br>    <span class="hljs-comment">// 调用方法 返回字符串</span><br>    <span class="hljs-keyword">let</span> renderedMarkup = renderedInstance.<span class="hljs-title function_">getMarkUp</span>(reactId);<br>    <span class="hljs-comment">// 绑定componentDidMount事件</span><br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;mounted&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      componentInstance.<span class="hljs-property">componentDidMount</span> &amp;&amp;<br>        componentInstance.<span class="hljs-title function_">componentDidMount</span>();<br>    &#125;);<br>    <span class="hljs-comment">// 最后返回字符串</span><br>    <span class="hljs-keyword">return</span> renderedMarkup;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>


        <h4 id="子元素处理"   >
          <a href="#子元素处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#子元素处理" class="headerlink" title="子元素处理"></a>子元素处理</h4>
      <p>得到 render 的元素创建对应的 unit。因为不知道 render 返回的元素是什么类型，字符串、原生 DOM、class 都有可能，因此直接调用封装好的工厂函数，工厂函数里面统一分情况处理，需要递归就递归。这个已经封装好了的，直接使用。</p>

        <h4 id="生命周期"   >
          <a href="#生命周期" class="heading-link"><i class="fas fa-link"></i></a><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4>
      <p>对于以下的代码</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">extends</span> <span class="hljs-title class_">React</span>.<span class="hljs-property">Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>  	<span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>/&gt;</span></span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>  	<span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Counter1</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><br><br>执行顺序如下<br>//ComWillMount2<br>   &lt;div&gt;--Counter2<br>     //ComWillMount1<br>        &lt;div&gt;&lt;/div&gt;--Counter1<br>     //ComDidMount1<br>   &lt;/div&gt;<br>//ComDidMount2<br>顺序 ComWillMount2 - ComWillMount1 - ComDidMount1 - ComDidMount2<br></code></pre></td></tr></table></div></figure>

<p>简单说来就是父子间先 willmount，但是子组件先 didmount。所以 willmount 在子元素处理之前调用，didmount 在子元素处理之后绑定事件</p>

        <h4 id="触发-ComponentDidMount"   >
          <a href="#触发-ComponentDidMount" class="heading-link"><i class="fas fa-link"></i></a><a href="#触发-ComponentDidMount" class="headerlink" title="触发 ComponentDidMount"></a>触发 ComponentDidMount</h4>
      <p>我们在获取 render 元素的字符串之后，再在 document 上面绑定 didmount 事件，依次处理完之后，在<strong>最后渲染</strong>阶段 trigger mounted 事件来触发。触发的顺序和绑定的顺序一样的，这样就实现了 ComponentDidMount 的顺序执行。</p>

        <h3 id="最后渲染"   >
          <a href="#最后渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#最后渲染" class="headerlink" title="最后渲染"></a>最后渲染</h3>
      <figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 最后在render中完成使命</span><br><span class="hljs-keyword">let</span> unit = <span class="hljs-title function_">createUnit</span>(element);<br><span class="hljs-keyword">let</span> markUp = unit.<span class="hljs-title function_">getMarkUp</span>(<span class="hljs-title class_">React</span>.<span class="hljs-property">rootIndex</span>); <span class="hljs-comment">// 返回HTML标记</span><br>$(container).<span class="hljs-title function_">html</span>(markUp);<br><span class="hljs-comment">// 触发在document上的事件</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;mounted&quot;</span>);<br></code></pre></td></tr></table></div></figure>


        <h3 id="渲染结果"   >
          <a href="#渲染结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#渲染结果" class="headerlink" title="渲染结果"></a>渲染结果</h3>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201106234204.png" >
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>本节代码地址：<span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/my-react-15.x/tree/aac6872c1376b79e303baf4d17bdbfc2d44366cd" >代码地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>我们现在实现了 Class Componet 组件的渲染，结合以前的文章实现了字符串、数字、原生 DOM、Class 的渲染了。可能有人想问不是还有函数是组件吗？我们来做个简单的分析。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201106234658.png" >
      <br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201106234750.png" >
      </p>
<p>从上面的两张图可以看到，你会发现函数式组件和 class 组件很像甚至更为简单，拿到函数之后传递参数执行即可。主要就是判断是 class 还是是函数，这里的函数指的是仅仅是函数。我们可以简单使用<span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/a/29094209" >这个答案</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>来判断，这里就不详细书写了。</p>
<p>我们点击按钮想触发事件，发现会报错。这也正常我们还没有写更新。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201106235140.png" >
      </p>
<p>在下面的文章我们会写 diff 更新，大家一起期待吧！</p>
]]></content>
  </entry>
  <entry>
    <title>TS学习及type-challenges实操</title>
    <url>/posts/ts-learning-and-typechallenges-practice.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200922125418.png" >
      <br>之前朋友分享过一个仓库叫做<span class="exturl"><a class="exturl__link"   href="https://github.com/type-challenges/type-challenges" >type-challenges</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，里面的内容类似于用 TS 来“做题”，简而言之就是类型编程。</p>
<p>因为我之前也学习过 TypeScript，在工作也使用过，因此想借此机会巩固一番。</p>
<blockquote>
<p>温故而知新，可以为师矣。</p>
</blockquote>
<span id="more"></span>


        <h2 id="学习经历"   >
          <a href="#学习经历" class="heading-link"><i class="fas fa-link"></i></a><a href="#学习经历" class="headerlink" title="学习经历"></a>学习经历</h2>
      <p>想起刚开始学习系统 TS 的时候还是 2019 年的 4 月份，那个时候已经在公司用了将近四个月的 TS 了。然后七月份进入第二家公司，发现公司也有使用 TS 开发项目的打算，然后我也准备了两次简单的分享。</p>
<p>到现在也算是使用了一年半吧，感觉这个写起来真的是舒服，掌握了解决类型报错的问题之后，心中还是很有成就感的。</p>

        <h3 id="一些笔记和资料"   >
          <a href="#一些笔记和资料" class="heading-link"><i class="fas fa-link"></i></a><a href="#一些笔记和资料" class="headerlink" title="一些笔记和资料"></a>一些笔记和资料</h3>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/typescript-study-demo" >自己学习写的 demo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://docs.google.com/presentation/d/14ivFX3OkPUpxbUObSsctKF4oAmbaAb5obHWZasXRjto/edit?usp=sharing" >第一次分享 ppt</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://docs.google.com/document/d/1XnAOlL6DQkgLPRFFtxvjwYtDkYG314_Sk-9TCAvsRMQ/edit?usp=sharing" >第二次分享文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://www.tslang.cn/docs/handbook/basic-types.html" >TS 中文文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://ts.xcatliu.com/" >TS 入门教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/6844904068096196621" >高级类型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://jkchao.github.io/typescript-book-chinese/" >深入理解 TypeScript</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>

        <h2 id="未完待续"   >
          <a href="#未完待续" class="heading-link"><i class="fas fa-link"></i></a><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>
      ]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCODE JS调试技巧</title>
    <url>/posts/vscode-js-debugging-skills.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>我们在编码过程中，会经常遇到调试的场景。VSCODE 是我经常使用的编辑器，接下来我就将简单记录几种 VSCODE 调试的方式，如果想看完整的 VSCODE 调试内容请前往<span class="exturl"><a class="exturl__link"   href="https://code.visualstudio.com/docs/editor/debugging" >官方地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608099048983-image.png" >
      </p>
<span id="more"></span>


        <h2 id="场景"   >
          <a href="#场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景" class="headerlink" title="场景"></a>场景</h2>
      
        <h3 id="单文件-JS-调试"   >
          <a href="#单文件-JS-调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#单文件-JS-调试" class="headerlink" title="单文件 JS 调试"></a>单文件 JS 调试</h3>
      
        <h4 id="直接调试"   >
          <a href="#直接调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#直接调试" class="headerlink" title="直接调试"></a>直接调试</h4>
      <p>假如我有个单文件，我们在左侧可以打好断点，我们想直接调试，我们直接<code>F5</code>就会让选择调试环境，这里我们选择<code>NODE</code>环境就可以开始调试。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608099600518-image.png" >
      </p>
<p>然后在左侧侧边栏可以查看运行变量，watch 值，调用栈，执行的脚本，断点信息等等；在底部的 <code>debug console</code> 也可以查看输出信息。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608099760624-image.png" >
      </p>

        <h4 id="配置文件方式"   >
          <a href="#配置文件方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h4>
      <p>对于一些项目文件，我们有固定的入口，我们可以将其写入配置文件，省去每次都打开指定文件和选择环境等操作。</p>
<p>选择 debug 侧边栏，点击<code>create a launch.json file</code>即可，生成文件的详细信息可以去<span class="exturl"><a class="exturl__link"   href="https://go.microsoft.com/fwlink/?linkid=830387" >官方文档指定章节</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>查看。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608100220601-image.png" >
      <br>简单的配置文件如下：</p>
<figure class="highlight json"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 更多信息: https://go.microsoft.com/fwlink/?linkid=830387</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// launch 新进程 attach 附加到当前进程</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Launch Program&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;skipFiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;node_internals&gt;/**&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;\\mdlint.js&quot;</span> <span class="hljs-comment">// 运行文件</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></div></figure>

<p>关于<code>program</code>这个字段，我们可以如下变量字段：</p>
<ul>
<li>workspaceFolder 工作目录，可以自己拼接路径，默认寻找 index.*等文件</li>
<li>file 当前打开并且激活的文件</li>
</ul>

        <h3 id="项目调试"   >
          <a href="#项目调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h3>
      <p>上述为单文件，但是一些脚手架该怎么调试呢，比如<code>webpack</code>等。比如现在我有一个<span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/Actual_Combat_Demos/tree/master/15-umi3" >umi 的项目</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，我想调试 umi 的运行过程这要怎么做呢。</p>

        <h3 id="npm-script-脚本方式"   >
          <a href="#npm-script-脚本方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#npm-script-脚本方式" class="headerlink" title="npm script 脚本方式"></a>npm script 脚本方式</h3>
      <p>比如在项目中我们想使用<code>umi dev</code>进行开发，我们可以在 npm scripts 中添加命令：</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;umi dev&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>而我们就可以利用这个脚本开始调试。</p>

        <h4 id="打断点"   >
          <a href="#打断点" class="heading-link"><i class="fas fa-link"></i></a><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h4>
      <p>开始调试之前我们就需要先打好断点，我们在执行 npm 脚本的时候，先会查看当前目录的<code>node_modules</code>的 bin 中得命令（当前找不到会往上面找，直到全局），再找到对应的文件执行。我们就可以用这种方式去打断点。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608104025324-image.png" >
      </p>

        <h4 id="launch-json"   >
          <a href="#launch-json" class="heading-link"><i class="fas fa-link"></i></a><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h4>
      <p>我们生成 <code>launch.json</code>，点击添加配置，选择<code>Launch via NPM</code>就可以生成对应的配置，<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608104176834-image.png" >
      <br>点击生成模板代码，我们更改 runtimeArgs 第二个参数为定义在 scripts 中对应的脚本就可以了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608104265528-image.png" >
      </p>
<p>修改保存之后直接 F5 就可以运行并且进入断点了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608104411921-image.png" >
      </p>

        <h3 id="命令行方式"   >
          <a href="#命令行方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608104823254-image.png" >
      </p>
<p>上述的方式也有一定的局限性，比如我们这个 umi 的例子，他会在运行的时候会产生<strong>子进程</strong>，这样我们无法断点调试子进程了，因此就有了命令行的方式。</p>

        <h4 id="–inspect-brk-详细"   >
          <a href="#–inspect-brk-详细" class="heading-link"><i class="fas fa-link"></i></a><a href="#–inspect-brk-详细" class="headerlink" title="–inspect-brk 详细"></a>–inspect-brk <span class="exturl"><a class="exturl__link"   href="https://nodejs.org/en/docs/guides/debugging-getting-started/" >详细</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h4>
      <p>简单理解可以为审查断点，他会启用一个代理，默认为 9229 端口，也可以设置端口，他会在代码的开始位置进行断点。</p>

        <h4 id="设置脚本"   >
          <a href="#设置脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置脚本" class="headerlink" title="设置脚本"></a>设置脚本</h4>
      <figure class="highlight json"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-comment">//默认9229端口，指定执行文件位置和传入的参数</span><br>    <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node --inspect-brk=9229 ./node_modules/umi/bin/umi.js dev&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></div></figure>


        <h4 id="修改-launhc-json"   >
          <a href="#修改-launhc-json" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改-launhc-json" class="headerlink" title="修改 launhc.json"></a>修改 launhc.json</h4>
      <p>我们选择<code>Attach to Remote Program</code><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608105497851-image.png" >
      <br>选择之后生成的字段比较多，我们保留<code>name</code>,<code>port</code>,<code>request</code>,<code>type</code>几个字段即可,其中 port 设置为脚本中设置的端口号。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">&#123;<br><br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>  <span class="hljs-string">&quot;configurations&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Attach to Remote&quot;</span>,<br>      <span class="hljs-string">&quot;port&quot;</span>: 9229,<br>      <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;attach&quot;</span>,<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;node&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></div></figure>


        <h4 id="开始调试"   >
          <a href="#开始调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h4>
      <p>步骤如下：</p>
<ul>
<li>yarn debug 开放监听端口<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608105771810-image.png" >
      </li>
<li>F5 启用调试进入断点<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608105814771-image.png" >
      </li>
</ul>
<p>我们这次使用的是命令行的方式，umi 在开启子进程的时候也会暴露对应的端口以便调试。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608106070629-image.png" >
      <br>执行结束之后，发现子进程已经开启了，我们就要连接到这个新开的 9230 子进程。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608106336580-image.png" >
      </p>

        <h4 id="修改端口"   >
          <a href="#修改端口" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4>
      <p>我们此时点击调试栏的最右侧的断开连接，修改 launch.json 的 port 为新的端口号 9230，开启调试。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-16/1608106437374-image.png" >
      <br>而此时，我们才算正式进入到了子进程的断点调试之中。</p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>以上，简单总结了使用 VSCODE 调试文件、项目方式，具体情况可以根据实际的环境来选择。</p>
]]></content>
      <tags>
        <tag>DEBUG</tag>
        <tag>VSCODE</tag>
      </tags>
  </entry>
  <entry>
    <title>Your connection is not private | 您的连接不是私密连接的解决办法</title>
    <url>/posts/your-connection-is-not-private-solution.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>随着 Chrome 的升级会推荐使用 https 的模式开发，当我们使用 https 的模式进行开发时让然会出现以下提示：<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175214.png" >
      </p>
<span id="more"></span>

<p>我们发现点击高级仍旧无法找到可以访问的方式（已经将域名屏蔽）</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175225.png" >
      </p>

        <h2 id="解决办法"   >
          <a href="#解决办法" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2>
      <p>原来在 Chrome 会对<code>HSTS</code>进行检查，但是也增加了一个 hack 来<strong>承认有风险的情况</strong>下访问网页，那就是输入<strong>thisisunsafe</strong>。不用管，直接在页面输入，而不是在地址栏，直接输入这一句就可以了。</p>

        <h2 id="源代码"   >
          <a href="#源代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2>
      <p>Chrome 相关的的<span class="exturl"><a class="exturl__link"   href="https://chromium.googlesource.com/chromium/src/+/master/components/security_interstitials/core/browser/resources/interstitial_large.js" >源代码地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175237.png" >
      <br>也不用管大小写，直接输入就是了。</p>

        <h2 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考" class="headerlink" title="参考"></a>参考</h2>
      <blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://dev.to/gautamkrishnar/quickbits-1-skipping-the-chrome-your-connection-is-not-private-warning-4kp1" >https://dev.to/gautamkrishnar/quickbits-1-skipping-the-chrome-your-connection-is-not-private-warning-4kp1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/35274659/does-using-badidea-or-thisisunsafe-to-bypass-a-chrome-certificate-hsts-error" >https://stackoverflow.com/questions/35274659/does-using-badidea-or-thisisunsafe-to-bypass-a-chrome-certificate-hsts-error</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://chromium.googlesource.com/chromium/src/+/master/components/security_interstitials/core/browser/resources/interstitial_large.js" >https://chromium.googlesource.com/chromium/src/+/master/components/security_interstitials/core/browser/resources/interstitial_large.js</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>走，再走一波干海子</title>
    <url>/posts/go-another-wave-of-dry-sea.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>说起干海子，因为我并不玩抖音，也不刷微博，其实我并不了解。但是却不经意间去了两次了，一次是前公司 2019 年 6 月底的团建，还有一次就是昨天和朋友一起去。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/VkvcI1nTaeRMB28.png"  alt="image.png">
      </p>
<span id="more"></span>

<p>说起来还是真的挺不好意思，因为原计划的八点出发因为我的迟到不得不推迟，真是迟到害人啊，要改 😂。</p>
<p>一路上心情很忐忑，一是由于迟到了，二是因为这是第二次去，心里面自觉地回想去第一次的场景，想着当时是什么人，什么天气，在哪里拍了照，这次去的话一定要看看两次有什么区别。文中的图片，翠绿的是去年的，有雪的是今年的。</p>

        <h2 id="旅途"   >
          <a href="#旅途" class="heading-link"><i class="fas fa-link"></i></a><a href="#旅途" class="headerlink" title="旅途"></a>旅途</h2>
      <p>逐渐进入阿坝那边，两边的山也起来了，有的光秃秃，有的长满了树，被植被覆盖着。穿过一条条隧道，山的两面呈现出“阴阳割昏晓”的明暗山体。我想这是在成都和自贡是看不到的。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/GopHWdvsmwZY9EK.png"  alt="image.png">
      </p>
<p>思绪恍惚间想起了我第一次来这边的时候，那是 2015 年 8 月底，“误打误撞”安排的来这边支教。那时候满脑子的新鲜和好奇，没见过山没见过水，瞪大了眼睛，望着这一切。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/mCv8IQJ4nOTklR7.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/o38eIPV1djM7GfF.png"  alt="image.png">
      </p>
<p>回到旅途，车还是在那个熟悉的地点停车整顿一下，我本身就对这个地方有印象，因为这是去的路上第一个可以休息停靠的地方，对于坐了这么久的车的人来说是不会错过的。</p>
<p>急忙的拿出手机，朝向了山谷那边。</p>
<p>夏天的山果真更为翠绿啊，因为昨晚刚下过雨，太阳还没放出来，云也显得有些抑郁，灰蒙蒙的。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171741.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171752.png" >
      </p>
<p>路过一隅，发现云也半隐半现地遮盖着山，一半暴露在阳光下面，另一半自觉地躲藏在阴影之中。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/NLaqTmrJoIfUZhp.png"  alt="image.png">
      </p>
<p>一时，车上传来了呼叫声，既是惊讶又是惊喜，大家纷纷转向这美丽的景色。在那山顶上，是一片片还未消融的雪，皑皑地装饰着山顶。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/gD4LRp9lAyJKzeh.png"  alt="image.png">
      </p>
<p>其实我是见过这般雪的，印象是 2016 年的开春，到这边滑雪，看到山顶上还静静躺着白雪，还有一缕缕蒸腾的白汽换换飘向天空，随风飘荡。总看不厌，也看不烦。就像之前支教的学校的门口的大山一样，厚重又不失庄严。我想，这再美不过了。</p>
<p>到了这边，因为山路比较窄，我们换成小车继续前行，大家的心情更加期待了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171817.png" >
      </p>
<p>想起去年，我们大家是大包垒小包，自己背着露营的装备，从这里开始正式徒步前行，一人接一人，远远看去，仿佛一条长龙在慢慢蠕动着……</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/wEmRI2dv6sCZ8HU.png"  alt="image.png">
      </p>

        <h2 id="上山"   >
          <a href="#上山" class="heading-link"><i class="fas fa-link"></i></a><a href="#上山" class="headerlink" title="上山"></a>上山</h2>
      <p>当小车到达山脚的时候，我们的徒步才正式开始。下车回头一望，只见这景色俨然没有了昔日的苍翠欲滴，山体被一种棕绿打底，山顶则还还残留着点点白雪（从图中的小路可以看出来这的确是同一群山）。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/Q8vCw1XHtgZbm2u.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/QthHp7IMkrCLSA4.png"  alt="image.png">
      </p>
<p>沿着石阶走两步，向后一望果真是银装素裹，分外妖娆。近处是阳光照射，远处是白雪裹树，天上的云也奔涌着，仿佛就是冬天一样。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/aZctfBD4EoXGV7y.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/eEiFqUnPvGlIjpR.png"  alt="image.png">
      </p>
<p>上山的路两边都是郁郁葱葱的小树林，此时也褪去绿叶，只留下枯黄枝丫，显得略微萧条，不再茂盛。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/M2JR7wziDBCgKEc.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/fGqLtiAndOzZI2Q.png"  alt="image.png">
      </p>
<p>再沿着路往上走，还有一些残留的积雪还在这里，大家都在开始玩雪了。有个小朋友还抱了一大坨雪来做了一个小雪人，大家新奇且兴奋，都簇拥上来，争先恐后驻足拍照。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/YTqjBihLFRM4pcy.png"  alt="image.png">
      </p>
<p>越往上走，视野越开阔，无须多言，银装素裹，此时正应吟诗一首：</p>
<blockquote>
<p>北国风光，千里冰封，万里雪飘。望长城内外，惟余莽莽；大河上下，顿失滔滔。山舞银蛇，原驰蜡象，欲与天公试比高。须晴日，看红装素裹，分外妖娆。</p>
</blockquote>
<p>虽然余雪不多，但是我想也应景了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171902.png" >
      </p>
<p>近处的地方还覆盖着一层雪，薄薄的一层。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923171913.png" >
      </p>
<p>来听听踩上去的声音</p>
<div style="width:100%;height:0px;position:relative;padding-bottom:56.327%;margin-bottom:12px;"><iframe src="https://streamja.com/embed/3n0Rq" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;"></iframe></div>

<p>这里的树木，都没有叶子，光秃秃的指着天空，沐浴着阳光。</p>
<p>多走两步，在山上一处平台驻足，此时的景色真的可谓是似曾相识。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/kcCgPIQTphOyNGo.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/SabZIuX8Akt91jl.png"  alt="image.png">
      </p>
<p>去年是多么的茂盛，今年就显得贫瘠，没有生机。前后一对比，顿时一股苍凉涌入心中。</p>
<p>突然想着之前去徒步回去之后写的<span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/5d18d2fd6fb9a07eee5ee343" >心理学之茶哥分享：前端包管理工具整理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，就是用的这边的山脉图。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://ftp.bmp.ovh/imgs/2020/04/57aadf62b1874abd.jpg" >
      </p>

        <h2 id="山顶"   >
          <a href="#山顶" class="heading-link"><i class="fas fa-link"></i></a><a href="#山顶" class="headerlink" title="山顶"></a>山顶</h2>
      <p>抵达山顶，风超级大。我们立马放下包裹，开始欣赏这山顶的景色。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/1U7zKxF2CMIJcDB.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/wEfKbAmDhtVMsyl.png"  alt="image.png">
      </p>
<p>这么辽阔宽广，好想自己是一只鸟，可以在这里无忧无虑的飞，没有那么多问题思考，也不知道自己是谁。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923172002.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/M4qOjzUL1gB6JGC.png"  alt="image.png">
      </p>
<p>我也激动的拍下了自己的照片，回到家和去年的照片对比起来：</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/pg58lSHaVFbewnj.png"  alt="image.png">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/WVnCfH6c72gop3T.png"  alt="image.png">
      </p>
<p>因为那里有秋千，去年拍了，因此今年也不能落下。看看我沉浸在自己的世界的样子吧！🤣</p>
<div style="width:100%;height:0px;position:relative;padding-bottom:56.327%;margin-bottom:12px;"><iframe src="https://streamja.com/embed/B4BWn" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;"></iframe></div>


        <h2 id="下山"   >
          <a href="#下山" class="heading-link"><i class="fas fa-link"></i></a><a href="#下山" class="headerlink" title="下山"></a>下山</h2>
      <p>然后就是下山了，这一路都是石板路，已经不再是去年的泥巴路和石板路掺杂着，走到山脚，回首望去，仿佛青山幽幽，回到了去年的时光。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://i.loli.net/2020/04/06/gVtvXjnEpTH5hfG.png"  alt="image.png">
      </p>

        <h2 id="最后"   >
          <a href="#最后" class="heading-link"><i class="fas fa-link"></i></a><a href="#最后" class="headerlink" title="最后"></a>最后</h2>
      <p>写到这里，不知不觉已经下午三点了。</p>
<p>整理着，觉得思绪很多，不禁感叹时间过得好快。看着往日的青青苍翠，今天的萧条苍凉，而这都快一年了。一年里发生的事情很多，人走人留，都在悄悄变化着，而自己是否有所改变来对得起这一年时间。</p>
<p>我觉得最糟糕的就是没有改变，昨天什么样，今天还是什么样，明天还是什么样。没有改变就没有进步，没有进步怎么对得起这段时间呢？我已经是一个大人了啊。</p>
<p>用一个在这个年纪该有的眼光来审视这个世界吧！</p>
]]></content>
      <tags>
        <tag>干海子</tag>
      </tags>
  </entry>
  <entry>
    <title>JS箭头函数三连问：为何用、怎么用、何时用</title>
    <url>/posts/three-consecutive-questions-about-js-arrow-functions-why-how-and-when.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在现代JS中最让人期待的特性就是关于箭头函数，用<code>=&gt;</code>来标识。箭头函数有两个主要的优点：其一是非常简明的语法，另外就是直观的作用域和<code>this</code>的绑定。</p>
<p>因为这些优点，箭头函数比起其他形式的函数声明更加受欢迎。比如，受欢迎的<code>airbnb eslint configuration库</code>会强制使用JavaScript箭头函数创建匿名函数。</p>
<p>然而，就像世间万物一样，箭头函数有一些优点也有一些“缺点”，这就需要在使用的时候做一些权衡了。</p>
<p>学习如何权衡是使用好箭头函数的关键。在这篇文章中我们将回顾箭头函数是怎样工作的，然后深入探讨，实际代码中箭头函数是如何改进我们代码的，以及一些箭头函数不推荐的情况。</p>
<span id="more"></span>

        <h2 id="什么才是箭头函数"   >
          <a href="#什么才是箭头函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么才是箭头函数" class="headerlink" title="什么才是箭头函数"></a>什么才是箭头函数</h2>
      <p>JS的箭头函数大概就像python中的<code>lambda(python定义匿名函数的关键字)</code>和ruby中的<code>blocks(类似于闭包)</code>一样。<br>这些匿名函数都有他们特殊的语法：首先接收一定数目的参数，然后在定义它们的函数的作用域或就近作用域中执行。</p>
<p>接下来我们将详细探讨这些。</p>

        <h2 id="箭头函数的语法"   >
          <a href="#箭头函数的语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#箭头函数的语法" class="headerlink" title="箭头函数的语法"></a>箭头函数的语法</h2>
      <p>箭头函数有一个大体的结构，同时也有很多的特殊情况可以简化。<br>核心的结构如下：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript">(argument1, argument2, ... argumentN) =&gt; &#123;<br>    <span class="hljs-comment">// function body</span><br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>在括号里面有一系列的参数，接着跟着一个箭头符号<code>=&gt;</code>，最后是函数体。这跟传统的函数很相像，只是我们省略了<code>function</code>关键字，并且添加了一个<code>=&gt;</code>在参数后面。</p>
<p>并且，这里也有很多种情况，让箭头函数结构变得更加的简洁。</p>
<p>首先，如果函数体里面是一个单独的表达式，你可以省略大括号直接将表达式写在一行，并且表达式的结果也将会被函数直接返回。比如：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br></code></pre></td></tr></table></div></figure>
<p>其次，如果这传入的是一个单独的参数，你也可省略参数部分的括号。比如：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getFirst</span> = array =&gt; array[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></div></figure>
<p>如你所见，这样就看起来更加的简洁了，我们也将在后面说明更多的特性。</p>

        <h2 id="高级语法"   >
          <a href="#高级语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2>
      <p>如果你了解这些高级语法之后将十分受用。</p>
<p>首先，如果你尝试在一行书写函数，但是返回的值却是一个对象内容，你原想这样写：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript">(name, description) =&gt; &#123;<span class="hljs-attr">name</span>: name, <span class="hljs-attr">description</span>: description&#125;;<br></code></pre></td></tr></table></div></figure>
<p>而问题就是这样的语法会引起歧义，会误以为你在写一个函数的函数体。<br>如果想返回的是单个的对象，请用括号包装该对象：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs JavaScript">(name, description) =&gt; (&#123;<span class="hljs-attr">name</span>: name, <span class="hljs-attr">description</span>: description&#125;);<br></code></pre></td></tr></table></div></figure>

        <h2 id="封闭的上下文作用域"   >
          <a href="#封闭的上下文作用域" class="heading-link"><i class="fas fa-link"></i></a><a href="#封闭的上下文作用域" class="headerlink" title="封闭的上下文作用域"></a>封闭的上下文作用域</h2>
      <p>不像其他形式的函数，箭头函数并没有他们自己的执行上下文。实际上，这就意味着代码中的<code>this</code>和<code>arguments</code>都是继承自他们的父函数。</p>
<p>比如，比较下面箭头函数和传统函数的区别：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> test = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test object&#x27;</span>,<br>  <span class="hljs-attr">createAnonFunction</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">createArrowFunction</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    &#125;;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure>
<p>我们有一个有两个方法的对象，每个方法都返回了一个匿名函数。区别在于第一个方法里面用了传统的函数表达式，后面的用了箭头函数表达式。如果我们在传入同样的参数运行，我们得到了两个不同的结果。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> anon = test.<span class="hljs-title function_">createAnonFunction</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>);<br><span class="hljs-comment">//返回匿名函数</span><br><span class="hljs-keyword">const</span> arrow = test.<span class="hljs-title function_">createArrowFunction</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>);<br><span class="hljs-title function_">anon</span>();<br><span class="hljs-comment">//undefined</span><br><span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-comment">// this-&gt;window</span><br><span class="hljs-title function_">arrow</span>();<br><span class="hljs-comment">//test object</span><br><span class="hljs-comment">//object &#123; &#x27;0&#x27;: &#x27;hello&#x27;, &#x27;1&#x27;: &#x27;world&#x27; &#125;</span><br><span class="hljs-comment">//this-&gt;test</span><br></code></pre></td></tr></table></div></figure>

<p>第一个匿名函数有自己的上下文（指向并非test对象），当你调用的时候没有参考的<code>this.name</code>的属性，（注意：现在<code>this</code>指向<code>window</code>），也没有创建它时调用的参数。另一个，箭头函数与创建它的函数有相同的上下文，让其可以访问参数arguments和对象。</p>

        <h2 id="箭头函数改进您的代码"   >
          <a href="#箭头函数改进您的代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#箭头函数改进您的代码" class="headerlink" title="箭头函数改进您的代码"></a>箭头函数改进您的代码</h2>
      <p>传统<code>lambda</code>函数的主要用例之一，就是将函数用于数组的遍历，现在用JavaScript箭头函数实现。<br>比如你有一个有值的数组，你想去<code>map</code>遍历每一项，这时箭头函数是非常推荐的：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> words = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;WORLD&#x27;</span>, <span class="hljs-string">&#x27;Whatever&#x27;</span>];<br><span class="hljs-keyword">const</span> downcasedWords = words.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">word</span> =&gt;</span> word.<span class="hljs-title function_">toLowerCase</span>());<br></code></pre></td></tr></table></div></figure>
<p>一个及其常见的例子就是返回一个对象的某个值：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> names = objects.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">object</span> =&gt;</span> object.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></div></figure>
<p>类似的，当用<code>forEach</code>来替换传统<code>for</code>循环的时候，实际上箭头函数会直观的保持<code>this</code>来自于父一级</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">examples</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">example</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">runExample</span>(example);<br>&#125;);<br></code></pre></td></tr></table></div></figure>

        <h2 id="Promise和Promise链"   >
          <a href="#Promise和Promise链" class="heading-link"><i class="fas fa-link"></i></a><a href="#Promise和Promise链" class="headerlink" title="Promise和Promise链"></a>Promise和Promise链</h2>
      <p>当在编写异步程序的时候，箭头函数也会让代码更加直观和简洁。</p>
<p>Promise可以更简单的编写异步程序。虽然你乐意去使用<code>async/await</code>，你也需要好好理解<code>promise</code>,因为这是他们的基础。</p>
<p>使用promise，仍然需要定义你的代码执行完成之后的回调函数。<br>这是箭头函数的理想位置，特别是如果您生成的函数是有状态的，同时想引用对象中的某些内容。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doSomethingAsync</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">storeResult</span>(result);<br>&#125;);<br></code></pre></td></tr></table></div></figure>


        <h2 id="对象转换"   >
          <a href="#对象转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h2>
      <p>箭头函数的另一个常见而且十分有用的地方就是用于封装的对象转换。<br>例如在Vue.js中，有一种通用模式，就是使用<code>mapState</code>将Vuex存储的各个部分，直接包含到Vue组件中。<br>这涉及到定义一套<code>mappers</code>，用于从原对象到完整的转换输出，这在组件问题中实十分有必要的。<br>这一系列简单的转换,使用箭头函数是最合适不过的。比如：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>(&#123;<br>      <span class="hljs-attr">results</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">results</span>,<br>      <span class="hljs-attr">users</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">users</span>,<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

        <h2 id="你不应该使用箭头函数的情景"   >
          <a href="#你不应该使用箭头函数的情景" class="heading-link"><i class="fas fa-link"></i></a><a href="#你不应该使用箭头函数的情景" class="headerlink" title="你不应该使用箭头函数的情景"></a>你不应该使用箭头函数的情景</h2>
      <p>这里有许多箭头函数不推荐的场景，这种情况之下不仅没有帮助，而且还会造成不必要的麻烦。</p>
<p>首先就是对象中的方法。这里有一个函数上下文的例子，对于我们理解很有帮助。<br>曾经流行一种趋势，用<code>class</code>类的语法和箭头函数，为其自动绑定方法。比如:事件方法可以使用，但是仍然绑定在class类中。<br>看起来就像下面的例子:</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>  counter = <span class="hljs-number">0</span>;<br>  handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>++;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>
<p>在这种方法中,如果被一个点击事件函数调用了，它虽然不是<code>Counter</code>的上下文中，它仍旧可以访问实例的数据，这种方式的缺点不言而喻。</p>
<p>用这种方式的确提供了一种绑定函数的快捷方式，但是函数的表达形式多种多样，相当不直观。如果你尝试在原型使用这种对象，这将不利于测试，同时也会产生很多问题。<br>相反，推荐用一种常规的绑定方式，如有必要可以绑定在实例的构造函数中:</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>  counter = <span class="hljs-number">0</span>;<br>  <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>++;<br>  &#125;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

        <h2 id="深层调用"   >
          <a href="#深层调用" class="heading-link"><i class="fas fa-link"></i></a><a href="#深层调用" class="headerlink" title="深层调用"></a>深层调用</h2>
      <p>另一种使用箭头函数会让你头疼的地方，就是你去用很多函数的组合调用，尤其是函数的深层调用。<br>简单的理由跟匿名函数一样，堆栈的追踪很复杂。</p>
<p>如果你的函数仅仅在一层之下，而不是深层的迭代，这倒不是什么问题。但是如果你将函数定义为箭头函数，并且在他们之间来回调用，当你调试bug的时候你将被代码困惑，甚至得到如下的错误信息：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;anonymous&#125;()<br>&#123;anonymous&#125;()<br>&#123;anonymous&#125;()<br>&#123;anonymous&#125;()<br>&#123;anonymous&#125;()<br><span class="hljs-comment">//anonymous 匿名</span><br></code></pre></td></tr></table></div></figure>

        <h2 id="有动态上下文的函数"   >
          <a href="#有动态上下文的函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#有动态上下文的函数" class="headerlink" title="有动态上下文的函数"></a>有动态上下文的函数</h2>
      <p>还有最有一种箭头函数会让你困惑的情形，就是<code>this</code>是动态绑定的时候。<br>如果你在以下情形使用箭头函数，那么this的动态绑定不会如期工作，并且你也会困惑这些代码为什么不像预期那样工作，也会给你之后工作的人造成麻烦。<br>一些典型的例子：</p>
<ul>
<li>事件的调用函数，this指向当前的目标属性</li>
<li>在jquery中，大多数时候this指向的是当前被选择的元素</li>
<li>在vue中，<code>methods </code>和<code>computed</code>中的<code>this</code>指向的是vue的组件。</li>
</ul>
<p>当然你也可以在上面的情形之下谨慎的使用箭头函数。但特别是在<code>jquery</code>和<code>vue</code>的情况下, 这通常会干扰正常功能, 并使您感到困惑：为什么看起来跟别人代码一样的代码就是不工作。</p>

        <h2 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
      <p>箭头函数是JS语言中十分特别的属性，并且使很多情形中代码更加的变化莫测。尽管如此，就像其他的语言特性，他们有各自的优缺点。因此我们使用它应该仅仅是作为一种工具，而不是无脑的简单的全部替换为箭头函数。</p>
<p><strong>本文只是个人兴趣翻译，如有错误之处还望各位斧正。文章版权属于原文作者。</strong></p>
<blockquote>
<p>原文地址：<span class="exturl"><a class="exturl__link"   href="https://codeburst.io/javascript-arrow-functions-how-why-when-and-when-not-to-use-them-fb8c2de9dbdc" >https://codeburst.io/javascript-arrow-functions-how-why-when-and-when-not-to-use-them-fb8c2de9dbdc</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <tags>
        <tag>翻译</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之基本介绍</title>
    <url>/posts/basic-introduction-to-cicd-combat.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="什么是-CI-CD"   >
          <a href="#什么是-CI-CD" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是-CI-CD" class="headerlink" title="什么是 CI/CD"></a>什么是 CI/CD</h2>
      <p>在软件工程中，CI / CD 或 CICD 通常是指持续集成以及持续交付或持续部署的组合实践（<span class="exturl"><a class="exturl__link"   href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" >具体</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-28/1609146550365-image.png" >
      </p>
<span id="more"></span>


        <h2 id="部署方式的区别"   >
          <a href="#部署方式的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#部署方式的区别" class="headerlink" title="部署方式的区别"></a>部署方式的区别</h2>
      
        <h3 id="传统部署"   >
          <a href="#传统部署" class="heading-link"><i class="fas fa-link"></i></a><a href="#传统部署" class="headerlink" title="传统部署"></a>传统部署</h3>
      <p>传统部署方式<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175617.png" >
      </p>
<p>缺点：<strong>人工操作，部署速度慢，易出错，版本管理机制差</strong></p>

        <h3 id="CI-CD"   >
          <a href="#CI-CD" class="heading-link"><i class="fas fa-link"></i></a><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h3>
      <p>CI/CD 的根本原则就是实现自动化构建部署，解决人工构建部署带来的<strong>效率低，出错率高</strong>等问题。下面是 CI/CD 的总体流程：</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923175633.png" >
      </p>
<p>可以看到一套完整的流程：<strong>代码编写-提交 Git-触发代码扫描-触发 Jenkins-构建镜像到 Hub-服务器拉取镜像部署</strong></p>
<p>优点：<strong>流程规范、不易出错、效率高</strong></p>

        <h2 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>
      <p>CI持续集成，伴随的是我们的代码产物每次提交，可能会经过一系列流程才会进入发布阶段，在这些流程中有单元测试，规则校验等可以配置的流程单元，我们把这些单元设置为每次代码产物提交都要经过的任务，保持一定频率的触发，这个整体就是CI。</p>
<p>CD持续部署或者持续交付，我们每次的代码产物为的目的就是新的产品更新迭代，而某些分支的提交、合并等操作应该触发新的产品的输出，整个产品随着代码产物在流水线的运行而不断更新，持续迭代，这就是CD。</p>

        <h2 id="参考资料"   >
          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>
      <blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" >CI/CD 是什么？如何理解持续集成、持续交付和持续部署</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<p><span class="exturl"><a class="exturl__link"   href="https://www.yuque.com/docs/share/5a58e274-6b1e-4697-b36d-89d5a152f30e" >语雀分享</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之Jenkins搭建</title>
    <url>/posts/cicd-actual-combat-jenkins-construction.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <p>学习 Jenkins 的搭建</p>

        <h2 id="准备工作"   >
          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2>
      <ul>
<li>机器：vmware 虚拟机安装的 centos 的最小版本<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/babyxue/article/details/80970526" >教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>终端：zsh<span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/556ff130fc65" >教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，安装了 autojump、zsh-autosuggestion 以及 zsh-syntax-highlighting 插件<span class="exturl"><a class="exturl__link"   href="https://www.zrahh.com/archives/167.html" >教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>使用的 xshell 连接 vmware，方便熟悉<span class="exturl"><a class="exturl__link"   href="https://my.oschina.net/u/4306931/blog/3226337" >教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>yum 源阿里源</li>
</ul>
<p>最终终端图</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929878617-image.png"  alt="image">
      </p>
<span id="more"></span>


        <h2 id="正式开始"   >
          <a href="#正式开始" class="heading-link"><i class="fas fa-link"></i></a><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2>
      
        <h3 id="docker"   >
          <a href="#docker" class="heading-link"><i class="fas fa-link"></i></a><a href="#docker" class="headerlink" title="docker"></a>docker</h3>
      
        <h4 id="docker-介绍"   >
          <a href="#docker-介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#docker-介绍" class="headerlink" title="docker 介绍"></a>docker 介绍</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929893064-image.png"  alt="image">
      </p>
<p>现在都流行容器化部署，想了解 docker 的点<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Docker" >维基百科</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/docker/docker-tutorial.html" >菜鸟教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="docker-安装"   >
          <a href="#docker-安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">// 安装依赖<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br>yum-config-manager --add-repo https://download.docker.com/<br>yum-config-manager --<span class="hljs-built_in">enable</span> docker-ce-nightly <span class="hljs-comment">#要每日构建版本的 Docker</span><br>yum-config-manager --<span class="hljs-built_in">enable</span> docker-ce-test<br>yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></div></figure>

<p>你也可以使用阿里源进行安装</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">// 安装依赖<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-built_in">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum install docker-ce<br></code></pre></td></tr></table></div></figure>

<p>安装成功再 <code>docker -v</code>查看</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929914636-image.png"  alt="image">
      </p>

        <h4 id="基本命令"   >
          <a href="#基本命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">systemctl start docker 启动<br>systemctl <span class="hljs-built_in">enable</span> docker 建立连接<br></code></pre></td></tr></table></div></figure>


        <h4 id="配置阿里云源"   >
          <a href="#配置阿里云源" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置阿里云源" class="headerlink" title="配置阿里云源"></a>配置阿里云源</h4>
      <p>拉取 Docker 镜像时，一般默认会去<code>Docker</code>官方源拉取镜像，为了优化速度我们更换为<span class="exturl"><a class="exturl__link"   href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" >阿里云镜像仓库</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>源进行镜像下载加速。</p>
<p>在对应<code>/etc/docker/daemon.json</code>添加内容就是了</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929928364-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929936276-image.png"  alt="image">
      </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://lgt83q7k.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></div></figure>


        <h3 id="安装-Jenkins"   >
          <a href="#安装-Jenkins" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h3>
      <p>Jenkins 是一款由 Java 编写的开源的持续集成工具。在与 Oracle 发生争执后，项目从 Hudson 项目复刻。 Jenkins 提供了软件开发的持续集成服务。<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/zh-cn/Jenkins_(%E8%BD%AF%E4%BB%B6)" >维基百科</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="安装防火墙"   >
          <a href="#安装防火墙" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h4>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">yum install firewalld systemd -y<br>service firewalld start //启动防火墙<br>firewall-cmd --permanent --add-service=http<br><br>firewall-cmd --permanent --add-rich-rule=<span class="hljs-string">&quot;rule family=&quot;</span>ipv4<span class="hljs-string">&quot; source address=&quot;</span>172.16.0.0/16<span class="hljs-string">&quot; accept&quot;</span><br>systemctl reload firewalld<br></code></pre></td></tr></table></div></figure>

<p>关于:</p>
<ul>
<li>Systemd:<span class="exturl"><a class="exturl__link"   href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" >Systemd 入门教程：命令篇</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>firewalld:<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/s_p_j/article/details/80979450" >firewall 简单使用</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>ip 的那个地方，我是使用的是的本地虚拟机，因此我配置的本地虚拟机的</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929958983-image.png"  alt="image">
      </p>
<p><strong>必须配置</strong>，否则会之后的 docker 启动服务失败</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929979697-image.png"  alt="image">
      </p>

        <h4 id="docker-in-docker"   >
          <a href="#docker-in-docker" class="heading-link"><i class="fas fa-link"></i></a><a href="#docker-in-docker" class="headerlink" title="docker in docker"></a>docker in docker</h4>
      
        <h5 id="简介"   >
          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h5>
      <p>Docker 采用的是 C/S（即 Client/Server）架构。我们在执行 <code>docker xxx</code> 等命令时，其实是使用 Client 在和<code>docker engine</code> 在进行通信。</p>
<p>我们在安装 Docker CE 时，会生成一个<code>systemd service</code>服务。这个服务启动时，就是 <code>Docker Engine</code> 服务。默认情况下，Docker 守护进程会生成一个<code> socket（/var/run/docker.sock）</code>文件来进行本地进程通信，因此只能在本地使用 docker 客户端或者使用 Docker API 进行操作。</p>
<blockquote>
<p>*.sock 文件：sock 文件是 UNIX 域套接字，它可以通过文件系统（而非网络地址）进行寻址和访问。<br>因此，只要把宿主机的 Docker 套接字通过 Docker 数据卷挂载到容器内部，就能实现在容器内使用 Docker 命令（如下图）。</p>
</blockquote>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600929989131-image.png"  alt="image">
      </p>
<p><strong>使用方式</strong>：<code>docker run ... -v /var/run/docker.sock:/var/run/docker.sock</code></p>

        <h3 id="创建-Dockerfile"   >
          <a href="#创建-Dockerfile" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h3>
      <p>在/usr/dockerdemo1 建立一个 Dockerfile</p>
<p>内容</p>
<figure class="highlight dockerfile"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> jenkins/jenkins<br><span class="hljs-keyword">USER</span> root<br><span class="hljs-comment"># 清除了基础镜像设置的源，切换成阿里云源</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#x27;</span> &gt; /etc/apt/sources.list.d/jessie-backports.list \</span><br><span class="language-bash">  &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian jessie main contrib non-free&quot;</span> &gt; /etc/apt/sources.list \</span><br><span class="language-bash">  &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list \</span><br><span class="language-bash">  &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="hljs-comment"># 更新源并安装缺少的包</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y libltdl7</span><br><span class="hljs-keyword">ARG</span> dockerGid=<span class="hljs-number">999</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;docker:x:<span class="hljs-variable">$&#123;dockerGid&#125;</span>:jenkins&quot;</span> &gt;&gt; /etc/group</span><br></code></pre></td></tr></table></div></figure>


        <h3 id="构建镜像"   >
          <a href="#构建镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3>
      <p>文件创建后，执行<code>docker build -t local/jenkins .</code>(名字为:local/jenkins)</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930061853-image.png"  alt="image">
      </p>
<p>如果提示 Successfully tagged local/jenkins:latest 则构建成功。</p>
<p>此处为第二次构建，第二次构建就会非常快，大概流程如下。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930070420-image.png"  alt="image">
      </p>

        <h3 id="创建镜像和容器"   >
          <a href="#创建镜像和容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建镜像和容器" class="headerlink" title="创建镜像和容器"></a>创建镜像和容器</h3>
      <p>我们将 Jenkins 用户目录外挂到宿主机内，先新建一个 <code>/home/jenkins</code> 目录，并设置权限：</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/jenkins<br><span class="hljs-built_in">chown</span> -R 1000 /home/jenkins/<br></code></pre></td></tr></table></div></figure>

<p>接下来我们用镜像创建容器并启动：</p>
<figure class="highlight dockerfile"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -itd --name jenkins -p 8080:8080 -p 50000:50000 \</span><br><span class="language-bash">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="language-bash">-v /usr/bin/docker:/usr/bin/docker \</span><br><span class="language-bash">-v /home/jenkins:/var/jenkins_home \</span><br><span class="language-bash">--restart always \</span><br><span class="language-bash">--user root <span class="hljs-built_in">local</span>/jenkins</span><br></code></pre></td></tr></table></div></figure>

<p>创建成功</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930078755-image.png"  alt="image">
      </p>

        <h3 id="启动-Jenkins"   >
          <a href="#启动-Jenkins" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动-Jenkins" class="headerlink" title="启动 Jenkins"></a>启动 Jenkins</h3>
      
        <h4 id="设置防火墙"   >
          <a href="#设置防火墙" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置防火墙" class="headerlink" title="设置防火墙"></a>设置防火墙</h4>
      <p>首先我们在防火墙添加 8080 和 50000 端口的放行，并重载防火墙</p>
<figure class="highlight routeros"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=8080/tcp --permanent<br>firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=50000/tcp --permanent<br>systemctl reload firewalld<br></code></pre></td></tr></table></div></figure>

<p>然后在<code>宿主机IP:8080</code>就可以看到界面了</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930091448-image.png"  alt="image">
      </p>

        <h4 id="设置源"   >
          <a href="#设置源" class="heading-link"><i class="fas fa-link"></i></a><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h4>
      <p>设置源提高 Jenkins 插件下载速度。因为后面安装插件需要重启，因此这一步可以先操作，避免后面再重启。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it jenkins /bin/bash<br>find / -name <span class="hljs-string">&#x27;default.json&#x27;</span><br>sed -i <span class="hljs-string">&#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27;</span> /var/jenkins_home/updates/default.json &amp;&amp; sed -i <span class="hljs-string">&#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27;</span> /var/jenkins_home/updates/default.json<br><span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></div></figure>


        <h4 id="初始化完成"   >
          <a href="#初始化完成" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化完成" class="headerlink" title="初始化完成"></a>初始化完成</h4>
      <p>初始化完成需要我们输入密码</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930101097-image.png"  alt="image">
      </p>
<p>我们执行命令</p>
<figure class="highlight awk"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs awk">docker exec -it jenkins <span class="hljs-regexp">/bin/</span>bash <span class="hljs-regexp">//</span>进入命令行<br>cat <span class="hljs-regexp">/var/</span>jenkins_home<span class="hljs-regexp">/secrets/i</span>nitialAdminPassword<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930114355-image.png"  alt="image">
      </p>
<p>密码输入之后就是进入插件安装</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930124287-image.png"  alt="image">
      </p>
<p>设置源之后插件安装就很丝滑流畅</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930131849-image.png"  alt="image">
      </p>
<p>再就是设置管理员了，我这里使用的是：使用 admin 账户继续。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930141714-image.png"  alt="image">
      </p>
<p>进入就是我们熟悉的界面了</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930151106-image.png"  alt="image">
      </p>

        <h4 id="小试牛刀"   >
          <a href="#小试牛刀" class="heading-link"><i class="fas fa-link"></i></a><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h4>
      <p>左侧新建 Item</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930158573-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930168607-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930174874-image.png"  alt="image">
      </p>
<p>输入代码</p>
<figure class="highlight crmsh"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs crmsh">docker -v<br>docker pull <span class="hljs-keyword">node</span><span class="hljs-title">:latest</span><br></code></pre></td></tr></table></div></figure>

<p>保存再触发立即构建就可以看到效果了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930183638-image.png"  alt="image">
      </p>
<p>可以在控制台看到对应的输出就大功告成了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930190482-image.png"  alt="image">
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>至此，我们已经完整搭建了 Jenkins 环境，作为 CICD 不可少的一部分，也算是有了一个良好的开端。撒花！</p>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之Gitlab搭建</title>
    <url>/posts/cicd-actual-combat-gitlab-construction.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <p>学习 Gitlab 的搭建</p>

        <h2 id="正式开始"   >
          <a href="#正式开始" class="heading-link"><i class="fas fa-link"></i></a><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2>
      
        <h3 id="拉取-Gitlab-镜像"   >
          <a href="#拉取-Gitlab-镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#拉取-Gitlab-镜像" class="headerlink" title="拉取 Gitlab 镜像"></a>拉取 Gitlab 镜像</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker pull gitlab/gitlab-ce<br></code></pre></td></tr></table></div></figure>

<p>我这网速的确感人啊</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930371197-image.png"  alt="image">
      </p>
<span id="more"></span>


        <h3 id="创建-Gitlab-容器"   >
          <a href="#创建-Gitlab-容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建-Gitlab-容器" class="headerlink" title="创建 Gitlab 容器"></a>创建 Gitlab 容器</h3>
      <figure class="highlight livescript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs livescript">mkdir /home/gitlab <span class="hljs-comment">#创建Gitlab工作目录</span><br><br>docker run -itd -p <span class="hljs-number">443</span>:<span class="hljs-number">443</span> <span class="hljs-string">\</span><br>-p <span class="hljs-number">8899</span>:<span class="hljs-number">8899</span> <span class="hljs-string">\</span><br>-p <span class="hljs-number">333</span>:<span class="hljs-number">333</span> <span class="hljs-string">\</span><br>--name gitlab <span class="hljs-string">\</span><br>--restart always <span class="hljs-string">\</span><br>-v /home/gitlab/config:/etc/gitlab <span class="hljs-string">\</span><br>-v /home/gitlab/logs:/<span class="hljs-keyword">var</span>/log/gitlab <span class="hljs-string">\</span><br>-v /home/gitlab/data:/<span class="hljs-keyword">var</span>/opt/gitlab <span class="hljs-string">\</span><br>gitlab/gitlab-ce<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930382739-image.png"  alt="image">
      </p>
<p>关于：</p>
<ul>
<li>–restart: 当 Docker 重启时，容器自动启动，否则就需要使用 docker restart 启动</li>
<li>gitlab 端口映射规则：最好内外端口映射一致，gitlab 会根据你的配置文件调整服务端口。如外部访问 8899，内外都配置 8899</li>
<li>一般 Gitlab 有三个端口要使用：ssh，https，主服务地址。</li>
<li>ssh 默认是 22，这里我改为了 333，</li>
</ul>
<p>然后我们在防火墙添加 333 和 8899 端口的放行，并重载防火墙</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=333/tcp --permanent<br>firewall-cmd --zone=public --add-port=8899/tcp --permanent<br>systemctl reload firewalld<br></code></pre></td></tr></table></div></figure>

<p>我们可以看下现在的运行状况</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930391115-image.png"  alt="image">
      </p>

        <h3 id="修改-Gitlab-配置文件"   >
          <a href="#修改-Gitlab-配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改-Gitlab-配置文件" class="headerlink" title="修改 Gitlab 配置文件"></a>修改 Gitlab 配置文件</h3>
      
        <h4 id="外部路径"   >
          <a href="#外部路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#外部路径" class="headerlink" title="外部路径"></a>外部路径</h4>
      <figure class="highlight arduino"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs arduino">vi /home/gitlab/config/gitlab.rb<br></code></pre></td></tr></table></div></figure>

<p>在文件内增加三条配置：</p>
<ul>
<li>external_url: 外部服务访问地址</li>
<li>gitlab_rails[‘gitlab_ssh_host’]：SSH 代码拉取地址</li>
<li>gitlab_rails[‘gitlab_shell_ssh_port’]：SSH 代码拉取端口</li>
</ul>
<figure class="highlight prolog"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs prolog">external_url <span class="hljs-string">&#x27;http://外部访问域名/地址:端口&#x27;</span><br>gitlab_rails[<span class="hljs-string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="hljs-string">&#x27;SSH外部访问域名/地址&#x27;</span><br>gitlab_rails[<span class="hljs-string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="hljs-symbol">SSH</span>端口<br></code></pre></td></tr></table></div></figure>

<p>我的虚拟机是 192.168.182.3，因此我的填写如下</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930401361-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930406859-image.png"  alt="image">
      </p>

        <h4 id="修改-SSH-端口"   >
          <a href="#修改-SSH-端口" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改-SSH-端口" class="headerlink" title="修改 SSH 端口"></a>修改 SSH 端口</h4>
      <p>前面设置的是 333 端口，因此要把默认的 22 端口改为 333 端口。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it gitlab /bin/bash<br>vim /assets/sshd_config<br>vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930425027-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930430871-image.png"  alt="image">
      </p>

        <h4 id="重启-Gitlab"   >
          <a href="#重启-Gitlab" class="heading-link"><i class="fas fa-link"></i></a><a href="#重启-Gitlab" class="headerlink" title="重启 Gitlab"></a>重启 Gitlab</h4>
      <figure class="highlight ebnf"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker restart gitlab</span><br></code></pre></td></tr></table></div></figure>

<p>访问我们的地址端口。如果显示 502 ，则代表正在启动中。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930439978-image.png"  alt="image">
      </p>
<p>初始化完成就好了</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930448387-image.png"  alt="image">
      </p>
<p>接下来就是改密码和登录了，登陆之后就进入页面，gitlab 也终于露出了庐山真面目。注意：管理员的账号是<strong>root</strong>。</p>
<p>最后，我们就进入 gitlab 了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930458016-image.png"  alt="image">
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>至此，我们已经完整搭建了 Gitlab 环境，作为 CICD 不可少的一部分，也算是有了一个良好的开端。撒花！</p>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之Nginx搭建</title>
    <url>/posts/cicd-actual-combat-nginx-construction.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <p>学习 Nginx 的搭建</p>

        <h2 id="搭建步骤"   >
          <a href="#搭建步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2>
      <p>这次的 Nginx 我们在一台新机器安装</p>

        <h3 id="安装-docker"   >
          <a href="#安装-docker" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3>
      <p><a href="https://kitety.github.io/posts/bc65362f.html#docker-%E4%BB%8B%E7%BB%8D">地址</a></p>

        <h4 id="配置阿里源"   >
          <a href="#配置阿里源" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置阿里源" class="headerlink" title="配置阿里源"></a>配置阿里源</h4>
      <p>不配置的话速度很慢<a href="https://kitety.github.io/posts/bc65362f.html#%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90">地址</a></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200001.png" >
      </p>
<span id="more"></span>


        <h3 id="拉取镜像"   >
          <a href="#拉取镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker pull nginx<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200014.png" >
      </p>

        <h3 id="安装"   >
          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装" class="headerlink" title="安装"></a>安装</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/nginx<br>docker run -itd -p 80:80 --name nginx-test \<br>  -v /home/nginx/html:/usr/share/nginx/html \<br>  -v /home/nginx/logs:/var/log/nginx \<br>  --restart always \<br>  nginx<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200028.png" >
      </p>
<p>简单修改一下<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200037.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200045.png" >
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>至此，我们已经完整搭建了 Nginx 环境，下一步我们将联合 Gitlab 和 Jenkins 一起构建，一起期待吧。撒花！</p>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之Jenkins Gitlab 实现前端构建</title>
    <url>/posts/cicd-actual-combat-jenkins-gitlab-to-achieve-frontend-construction.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <p>Jenkins + Gitlab 实现前端构建</p>

        <h2 id="正式开始"   >
          <a href="#正式开始" class="heading-link"><i class="fas fa-link"></i></a><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2>
      
        <h3 id="Jenkins-安装-NodeJS"   >
          <a href="#Jenkins-安装-NodeJS" class="heading-link"><i class="fas fa-link"></i></a><a href="#Jenkins-安装-NodeJS" class="headerlink" title="Jenkins 安装 NodeJS"></a>Jenkins 安装 NodeJS</h3>
      <p>因为在 Jenkins 构建的时候我们需要去执行一些 shell，需要用到 NodeJS，因此我们先安装 NodeJS。</p>
<p>在这里我们采用插件方式安装。</p>

        <h4 id="在-Jenkins-插件管理中心搜索-NodeJS"   >
          <a href="#在-Jenkins-插件管理中心搜索-NodeJS" class="heading-link"><i class="fas fa-link"></i></a><a href="#在-Jenkins-插件管理中心搜索-NodeJS" class="headerlink" title="在 Jenkins 插件管理中心搜索 NodeJS"></a>在 Jenkins 插件管理中心搜索 NodeJS</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930571244-image.png"  alt="image">
      </p>
<span id="more"></span>

<p>我这里已经安装了</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930582615-image.png"  alt="image">
      </p>
<p>没有安装的话应给在可选插件的 Tab,勾选之后选择直接安装即可。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930592193-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930598660-image.png"  alt="image">
      </p>

        <h4 id="全局配置"   >
          <a href="#全局配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4>
      <p>在系统设置–系统工具设置可以为全局配置 NodeJS。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930606080-image.png"  alt="image">
      </p>
<p>选择好对应的版本之后保存即可。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930617174-image.png"  alt="image">
      </p>

        <h4 id="使用"   >
          <a href="#使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用" class="headerlink" title="使用"></a>使用</h4>
      <p>我们只需要在任务的“配置”中，找到“构建环境”，选中 “Provide Node &amp; npm bin/ folder to PATH” ，选择刚才配置好的 NodeJS 即可。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930630463-image.png"  alt="image">
      </p>
<p>第一次执行会下载对应的 Node 版本，后续不会下载。</p>

        <h3 id="开始集成"   >
          <a href="#开始集成" class="heading-link"><i class="fas fa-link"></i></a><a href="#开始集成" class="headerlink" title="开始集成"></a>开始集成</h3>
      <p>因为集成构建的时候我们需要 Jenkins 去 Gitlab 拉去代码，因此我们需要用 ssh 的方式去鉴权。</p>

        <h4 id="生成公钥私钥"   >
          <a href="#生成公钥私钥" class="heading-link"><i class="fas fa-link"></i></a><a href="#生成公钥私钥" class="headerlink" title="生成公钥私钥"></a>生成公钥私钥</h4>
      <p>Jenkins 拉取，因此要在 Jenkins 上生成，并且将公钥传输到 Gitlab，这样就可以实现鉴权的作用。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it jenkins /bin/bash<br>ssh-keygen -t rsa<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930645747-image.png"  alt="image">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930652308-image.png"  alt="image">
      </p>

        <h4 id="Gitlab-配公钥"   >
          <a href="#Gitlab-配公钥" class="heading-link"><i class="fas fa-link"></i></a><a href="#Gitlab-配公钥" class="headerlink" title="Gitlab 配公钥"></a>Gitlab 配公钥</h4>
      <p>将公钥存入即可</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930663266-image.png"  alt="image">
      </p>

        <h4 id="Jenkins-配私钥"   >
          <a href="#Jenkins-配私钥" class="heading-link"><i class="fas fa-link"></i></a><a href="#Jenkins-配私钥" class="headerlink" title="Jenkins 配私钥"></a>Jenkins 配私钥</h4>
      <p>在系统管理，管理凭证。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930669759-image.png"  alt="image">
      </p>
<p>在全局添加凭证</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930675896-image.png"  alt="image">
      </p>
<p>类型为 “SSH Username with private key.”，ID 为此凭据在 Jenkins 的标识符，UserName 为你的 Gitlab 用户名，PrivateKey 为你的服务器私钥。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930684117-image.png"  alt="image">
      </p>
<p><strong>配置完之后最好还是重启一下 jenkins 和 gitlab</strong></p>
<p>至此，Jenkins 配置完毕。</p>

        <h3 id="小试牛刀，构建一下"   >
          <a href="#小试牛刀，构建一下" class="heading-link"><i class="fas fa-link"></i></a><a href="#小试牛刀，构建一下" class="headerlink" title="小试牛刀，构建一下"></a>小试牛刀，构建一下</h3>
      
        <h4 id="新建任务"   >
          <a href="#新建任务" class="heading-link"><i class="fas fa-link"></i></a><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4>
      <p>选择：构建一个自由风格的软件项目，我这里用的 ssh-way</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930692858-image.png"  alt="image">
      </p>

        <h4 id="配置任务"   >
          <a href="#配置任务" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置任务" class="headerlink" title="配置任务"></a>配置任务</h4>
      <p>我这里是临时用的一个 Vue-Cli 搭建的项目演示。</p>
<p>进入任务配置，在任源码管理这里选择 Git</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930700725-image.png"  alt="image">
      </p>
<p>注意</p>
<blockquote>
<p>仓库地址为 gitlat 的 ssh 方式<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930709305-image.png"  alt="image">
      </p>
</blockquote>
<blockquote>
<p>直接复制的地址有两个端口号，要改为 ssh 的 333 端口。<a href="https://kitety.github.io/posts/aa4ef8c5.html#%E4%BF%AE%E6%94%B9SSH%E7%AB%AF%E5%8F%A3">端口为 333 是在之前配置的这个端口号。</a></p>
</blockquote>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930718459-image.png"  alt="image">
      </p>
<p>选择对应的 NodeJS 版本</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930729006-image.png"  alt="image">
      </p>
<p>构建选择–执行 Shell</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930737265-image.png"  alt="image">
      </p>
<p>填写基本的 shell</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br>cnpm install<br>npm run build<br></code></pre></td></tr></table></div></figure>

<p>保存再立即构建一波。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930745105-image.png"  alt="image">
      </p>
<p>看到 Finished: SUCCESS，完美。</p>

        <h3 id="同步到-Nginx-环境"   >
          <a href="#同步到-Nginx-环境" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步到-Nginx-环境" class="headerlink" title="同步到 Nginx 环境"></a>同步到 Nginx 环境</h3>
      <p>当我们构建成功之后，我们只需要把 Jenkins 的 dist 目录下面的资源全部拷贝到服务器 Nginx 上面就可以实现更新了。而且没有不会变更配置文件，也不用重启 Nginx。</p>

        <h4 id="创建文件夹"   >
          <a href="#创建文件夹" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4>
      <p>为了避免我们后续找不到文件夹，我们就先创建秘钥顺便创建文件夹。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">// nginx机器<br>ssh-keygen -t rsa<br></code></pre></td></tr></table></div></figure>


        <h4 id="配置鉴权文件"   >
          <a href="#配置鉴权文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置鉴权文件" class="headerlink" title="配置鉴权文件"></a>配置鉴权文件</h4>
      <p>因为我们已经在 Jenkins 生成过私钥公钥了，我们只需要将这边的文件复制到 Nginx 的<code>/root/.ssh/authorized_keys</code>就好了。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">scp -p /root/.ssh/id_rsa.pub root@192.168.182.4:/root/.ssh/authorized_keys<br></code></pre></td></tr></table></div></figure>

<p>第一次需要输入密码，后续都不需要了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930763078-image.png"  alt="image">
      </p>

        <h4 id="发布到-Nginx"   >
          <a href="#发布到-Nginx" class="heading-link"><i class="fas fa-link"></i></a><a href="#发布到-Nginx" class="headerlink" title="发布到 Nginx"></a>发布到 Nginx</h4>
      <p>原理很简单，将 build 生成的 dist 的全部文件全部都拷贝到 nginx 的 html 的目录下。（Nginx 资源路径具体要看配置）</p>
<p>在之前的 shell 命令中加入以下命令。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">scp -o <span class="hljs-string">&quot;StrictHostKeyChecking no&quot;</span> -r dist/* root@192.168.182.4:/home/nginx/html<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930771190-image.png"  alt="image">
      </p>

        <h4 id="修改测试"   >
          <a href="#修改测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改测试" class="headerlink" title="修改测试"></a>修改测试</h4>
      <p>修改了，提交了，我们构建一下。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930781689-image.png"  alt="image">
      </p>
<p>构建成功</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930787947-image.png"  alt="image">
      </p>
<p>完美</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600930793990-image.png"  alt="image">
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>至此，我们已经完整搭建了 Jenkins + Gitlab 实现前端构建，搭了这么久的环境终于开始实战了。撒花！</p>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之Nexus制品库的介绍与安装</title>
    <url>/posts/introduction-and-installation-of-nexus-product-library-cicd-actual-combat.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <p>学习 Nexus 制品库的介绍与安装</p>

        <h2 id="介绍"   >
          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2>
      <p>在前面我们写到，制品库是<strong>承接 CI 构建后的产出制品的仓库</strong>，具有版本管理，历史管理，权限校验等功能。</p>
<p>在这里，我们选用 Nexus3 作为制品库。</p>
<span id="more"></span>


        <h2 id="正式开始"   >
          <a href="#正式开始" class="heading-link"><i class="fas fa-link"></i></a><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2>
      
        <h3 id="拉取镜像"   >
          <a href="#拉取镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker pull sonatype/nexus3<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931105737-image.png"  alt="image">
      </p>

        <h3 id="启动容器"   >
          <a href="#启动容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3>
      <p>新建一个名为 nexus 的文件夹，方便我们存放 Nexus 相关数据，并赋予权限。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /home/nexus &amp;&amp; <span class="hljs-built_in">chown</span> -R 200 /home/nexus<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931112564-image.png"  alt="image">
      </p>

        <h4 id="创建容器"   >
          <a href="#创建容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker run -d -p 8081:8081 -p 8082:8082 \<br>--name nexus \<br>-v /home/nexus:/nexus-data \<br>--restart always \<br>sonatype/nexus3<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931118609-image.png"  alt="image">
      </p>
<ul>
<li>Nexus 主服务端口，我们设置为 8081,；但是还需要新分配一个端口为服务端口，这里采用的是 8082</li>
</ul>

        <h4 id="防火墙"   >
          <a href="#防火墙" class="heading-link"><i class="fas fa-link"></i></a><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4>
      <p>将对应端口添加到防火墙</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=8081/tcp --permanent<br>firewall-cmd --zone=public --add-port=8082/tcp --permanent<br>systemctl reload firewalld<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931126380-image.png"  alt="image">
      </p>

        <h3 id="访问-Nexus"   >
          <a href="#访问-Nexus" class="heading-link"><i class="fas fa-link"></i></a><a href="#访问-Nexus" class="headerlink" title="访问 Nexus"></a>访问 Nexus</h3>
      <p>打开浏览器地址栏，访问 Nexus 的服务地址，这里是 ip:8001。启动时间比较长，可以使用<code>docker logs -f nexus</code>查看日志，如果显示以下文字<strong>Started Sonatype Nexus OSS 3.25.1-04</strong>就代表成功</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931136526-image.png"  alt="image">
      </p>

        <h3 id="配置-Nexus"   >
          <a href="#配置-Nexus" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置-Nexus" class="headerlink" title="配置 Nexus"></a>配置 Nexus</h3>
      <p>我们访问<code>ip:8001</code>就可以看到界面了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931149190-image.png"  alt="image">
      </p>

        <h4 id="登录"   >
          <a href="#登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#登录" class="headerlink" title="登录"></a>登录</h4>
      <p>我们可以使用<code>默认账号:admin</code>登录，默认的密码在<code>cat /home/nexus/admin.password</code>可以查看。</p>
<p>注意不包含#号</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931157535-image.png"  alt="image">
      </p>
<p>当我们初次进入之后会让我们设置一下初始密码，和登录的权限。</p>

        <h4 id="匿名访问性"   >
          <a href="#匿名访问性" class="heading-link"><i class="fas fa-link"></i></a><a href="#匿名访问性" class="headerlink" title="匿名访问性"></a>匿名访问性</h4>
      <p>设置密码之后需要设置访问性,<strong>我们在任何没有登录的情况下，拉取（推送）制品到制品库，都算匿名访问。</strong>,在实际生产中是<strong>不安全</strong>的，我们测试可以开启。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931164943-image.png"  alt="image">
      </p>

        <h4 id="创建一个-Docker-私服"   >
          <a href="#创建一个-Docker-私服" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建一个-Docker-私服" class="headerlink" title="创建一个 Docker 私服"></a>创建一个 Docker 私服</h4>
      <p>点击设置，选择左侧菜单中的 Repositories ，点击 Create repository</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931174237-image.png"  alt="image">
      </p>
<p>使用搜索 docker 可以快速定位</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931182519-image.png"  alt="image">
      </p>
<p><strong>制品库的类型</strong></p>
<ul>
<li>proxy: 此类型制品库原则上 “只下载，不允许用户推送”。可以理解为缓存外网制品的制品库。例如，我们在拉取 nginx 镜像时，如果通过 proxy 类型的制品库，则它会去创建时配置好的外网 docker 镜像源拉取（有点像 cnpm）到自己的制品库，然后给你。第二次拉取，则不会下载。起到 缓存 的作用。</li>
<li>hosted：此类型制品库和 proxy 相反，原则上 <strong>只允许用户推送，不允许缓存 。</strong>这是私有库的核心，只存放自己的私有镜像或制品。</li>
<li>group：此类型制品库用作以上两种类型的 **集合 **，将上面两个库集合为一个使用。</li>
</ul>
<p>这里我们采用 hosted 类型，点击创建会看到一些输入框，这里做简单的解释。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931190366-image.png"  alt="image">
      </p>
<p>同时我们还要设置一下权限，在 Security-Realms 的 Docker Bearer Token Realm 选择到右边的激活状态。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931200624-image.png"  alt="image">
      </p>

        <h3 id="小试牛刀-登录"   >
          <a href="#小试牛刀-登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#小试牛刀-登录" class="headerlink" title="小试牛刀-登录"></a>小试牛刀-登录</h3>
      <p>安装至此，我们在另一台机器上试一下。</p>
<p>在这里，我的架构是两台虚拟机，一台是 gitlab 和 jenkins，一台是 nginx 和 Nexus。所以，我们就在 gitlab 的机器上尝试。</p>

        <h4 id="配置文件"   >
          <a href="#配置文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4>
      <p>我们在 gitlab 配置文件，<code>vim /etc/docker/daemon.json</code></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931210306-image.png"  alt="image">
      </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;insecure-registries&quot;</span> : [<br>    <span class="hljs-string">&quot;192.168.182.4:8082&quot;</span><br>  ]<br><br></code></pre></td></tr></table></div></figure>

<p>最后记得使用<code>systemctl restart docker</code>重启一下<br><strong>注意这里是 json 格式，格式不能错</strong></p>

        <h4 id="登录-1"   >
          <a href="#登录-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#登录-1" class="headerlink" title="登录"></a>登录</h4>
      <p>登录一下。从图中可以看出。初次登录需要输入账号密码，后续登录就不需要了。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker login 服务IP:端口<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931223439-image.png"  alt="image">
      </p>

        <h3 id="小试牛刀-推送镜像到制品库"   >
          <a href="#小试牛刀-推送镜像到制品库" class="heading-link"><i class="fas fa-link"></i></a><a href="#小试牛刀-推送镜像到制品库" class="headerlink" title="小试牛刀-推送镜像到制品库"></a>小试牛刀-推送镜像到制品库</h3>
      <p>我们可以使用 docker push 推送镜像到私服上面。</p>
<p>docker 在推送一个镜像时，镜像的 Tag (名称:版本号) 必须开头带着镜像库的地址，才可以推送。例如下面两个镜像：<br>😡 local/jenkins 不能推送<br>😃 <strong>192.168.182.4:8082/local/jenkins</strong> 可以推送。</p>

        <h4 id="制作镜像"   >
          <a href="#制作镜像" class="heading-link"><i class="fas fa-link"></i></a><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h4>
      <p>1.制作一份带镜像库地址的镜像：这个可以做，但是开销太大，需要走一遍制作流程</p>
<p>2.使用 docker tag 命令给已有的镜像打个标签：推荐使用，会将已有的镜像归位某个镜像库内。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931234544-image.png"  alt="image">
      </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker tag 28c624ccaacf    192.168.182.4:8082/local/jenkins<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931242511-image.png"  alt="image">
      </p>

        <h4 id="推送"   >
          <a href="#推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#推送" class="headerlink" title="推送"></a>推送</h4>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker push 192.168.182.4:8082/local/jenkins<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931252036-image.png"  alt="image">
      </p>
<p>在仓库可以看到上传的</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-24/1600931260957-image.png"  alt="image">
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>我们在这部分实现了 docker 私服的搭建和 push，接下来我们将构建代码并且推送到私服。敬请期待吧！</p>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD实战之Jenkins构建前端镜像并上传到制品库</title>
    <url>/posts/cicd-actual-combat-jenkins-builds-a-frontend-image-and-uploads-it-to-the-product-library.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h2>
      <p>之前的前端构建部署，是通过 scp 传输 dist 的全部文件到指定目录实现部署，这次我们将学习利用 Jenkins 构建 docker 前端镜像并上传到制品库实现部署。</p>
<span id="more"></span>


        <h2 id="正式开始"   >
          <a href="#正式开始" class="heading-link"><i class="fas fa-link"></i></a><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2>
      
        <h3 id="Jenkins-登录"   >
          <a href="#Jenkins-登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#Jenkins-登录" class="headerlink" title="Jenkins 登录"></a>Jenkins 登录</h3>
      <p>想使用 Jenkins 推送镜像到制品库，必须先登录制品库。进入 Jenkins 容器，使用 docker login 登录，然后退出即可</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it jenkins /bin/bash<br>docker login 192.168.182.4:8082<br><span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923180106.png" >
      </p>
<p>登录一次之后后续就无需登录。</p>
<p><strong>注意：登录不上可以多尝试几次</strong></p>

        <h3 id="Nginx-登录制品库"   >
          <a href="#Nginx-登录制品库" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nginx-登录制品库" class="headerlink" title="Nginx 登录制品库"></a>Nginx 登录制品库</h3>
      <p>Jenkins 构建并且 push，Nginx 就会触发拉取，因此这边也需要登录。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">vi /etc/docker/daemon.json<br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment"># 登录</span><br>docker login 192.168.182.4:8082<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923180119.png" >
      <br>登录一次之后后续就无需登录。</p>

        <h3 id="DockerFile"   >
          <a href="#DockerFile" class="heading-link"><i class="fas fa-link"></i></a><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3>
      <p>前端通过 Jenkins 构建 docker 镜像，因此需要添加 DockerFile 文件。</p>
<p>DockerFile 是一个镜像制作过程的步骤描述，新增文件添加一下代码</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">FROM nginx:1.15-alpine<br>COPY dist /usr/share/nginx/html<br>WORKDIR /usr/share/nginx/html<br></code></pre></td></tr></table></div></figure>

<ul>
<li>拉取一个 nginx 1.15-alpine 版本的镜像。</li>
<li>将当前目录下的 dist 文件夹拷贝到镜像的 /usr/share/nginx/html 文件夹。</li>
<li>声明启动容器时，在 /usr/share/nginx/html 下面执行。</li>
</ul>

        <h3 id="jenkins-配置修改"   >
          <a href="#jenkins-配置修改" class="heading-link"><i class="fas fa-link"></i></a><a href="#jenkins-配置修改" class="headerlink" title="jenkins 配置修改"></a>jenkins 配置修改</h3>
      <p>修改配置<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923180130.png" >
      <br>添加以下代码</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> -e<br>timestamp=`<span class="hljs-built_in">date</span> <span class="hljs-string">&#x27;+%Y%m%d%H%M%S&#x27;</span>`<br><br>node -v<br>npm -v<br><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br><br>cnpm install<br><br>npm run build<br><br><span class="hljs-comment"># 编译docker镜像</span><br>docker build -t 192.168.182.4:8082/fe/nginx-fe-<span class="hljs-variable">$timestamp</span> .<br><br><span class="hljs-comment"># 推送docker镜像到制品库</span><br>docker push 192.168.182.4:8082/fe/nginx-fe-<span class="hljs-variable">$timestamp</span><br><br><span class="hljs-comment"># 远程执行命令部署镜像</span><br>ssh -o StrictHostKeyChecking=no root@192.168.182.4 <span class="hljs-string">&quot;docker pull 192.168.182.4:8082/fe/nginx-fe-<span class="hljs-variable">$timestamp</span> &amp;&amp; \</span><br><span class="hljs-string">docker stop nginx-test &amp;&amp; \</span><br><span class="hljs-string">docker rm nginx-test &amp;&amp; \</span><br><span class="hljs-string">docker run -p 80:80 -itd \</span><br><span class="hljs-string">--name nginx-test \</span><br><span class="hljs-string">--restart always \</span><br><span class="hljs-string">192.168.182.4:8082/fe/nginx-fe-<span class="hljs-variable">$timestamp</span>&quot;</span><br></code></pre></td></tr></table></div></figure>

<p>流程分析</p>
<ul>
<li>Jenkins 在命令中用 $-变量名 进行使用。 timestamp=date ‘+%Y%m%d%H%M%S’，唯一的 docker 命名</li>
<li>依据 DockerFile 打包镜像并且推送</li>
<li>Nginx 拉取刚推送的 docker 镜像，停止正在运行的 container，删除之后并且运行当前的镜像。</li>
</ul>
<p><strong>上述代码中相关注意事项</strong></p>
<ul>
<li>制品库的地址：172.16.81.150:8082</li>
<li>nginx 的地址：192.168.182.4</li>
<li>nginx 的 name：nginx-test
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923180145.png" >
      </li>
</ul>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>和之前的构建部署方式中，利用 docker 镜像可以很好地代码回退和迭代更新，实现了版本在生产环境更好的控制。</p>
]]></content>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>请珍惜你的社交信用</title>
    <url>/posts/please-cherish-your-social-credit.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-9-28/1601269097209-image.png"  alt="image">
      </p>
]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 61 A (Part 1)</title>
    <url>/posts/cs-61a-1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h1 id="CS-61-A-Part-1"   >
          <a href="#CS-61-A-Part-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#CS-61-A-Part-1" class="headerlink" title="CS 61 A (Part 1)"></a>CS 61 A (Part 1)</h1>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161054534.png"  alt="Untitled">
      </p>
<span id="more"></span>


<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161055085.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161055323.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161056198.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161056290.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161057823.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161057301.png"  alt="Untitled">
      </p>
<p>operands 操作数</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161058781.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161058085.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161058558.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/202210161059435.png"  alt="Untitled">
      </p>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 61 A (Part 2)</title>
    <url>/posts/cs-61a-2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h1 id="CS-61-A-Part-2"   >
          <a href="#CS-61-A-Part-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#CS-61-A-Part-2" class="headerlink" title="CS 61 A (Part 2)"></a>CS 61 A (Part 2)</h1>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled.png"  alt="Untitled">
      </p>
<span id="more"></span>


<p>review expression</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%201.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%202.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%203.png"  alt="Untitled">
      </p>
<p> 执行操作符的子表达式，执行子表达式的每个操作元，将再将值应用回去</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%204.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%205.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%206.png"  alt="Untitled">
      </p>
<p>5//2 next smallest number</p>
<p>assignment statement :radius=3958.8</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; from math import pi<br>&gt;&gt;&gt; pi<br></code></pre></td></tr></table></div></figure>

<p>可以自己定义或者从别的库倒入，两种方式</p>
<p>表达式不是值，表达式是为了计算值</p>
<p>expressions are not values,expressions evaluate to some values</p>
<p>2 也是一个表达式，计算出来的值就是2</p>
<p>已经执行完了的值，是不会改变的，哪怕你改变之前的因变量</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%207.png"  alt="Untitled">
      </p>
<p>因此需要重新计算一次</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; cir,vol=2*pi*radius,4/3*pi*(radius**3)<br>&gt;&gt;&gt; cir<br>24873.873994062546<br>&gt;&gt;&gt; vol<br>259883851296.82016<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%208.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%209.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2010.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2011.png"  alt="Untitled">
      </p>
<p>这个室友过程的，右边执行的顺序是从左到右</p>
<p><span class="exturl"><a class="exturl__link"   href="https://pythontutor.com/render.html#mode=display" >https://pythontutor.com/render.html#mode=display</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2012.png"  alt="Untitled">
      </p>
<p>max=g 声明一个新的，不会改变全局的。fh是max，g和max是min</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2013.png"  alt="Untitled">
      </p>
<p>函数是另一种类型的值</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; max<br>&lt;built-in <span class="hljs-keyword">function</span> max&gt;<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2014.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2015.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2016.png"  alt="Untitled">
      </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; def volume(r):<br>...     <span class="hljs-built_in">return</span> (4/3)*pi*(r**3)<br>...<br>&gt;&gt;&gt; volume<br>&lt;<span class="hljs-keyword">function</span> volume at 0x102d26040&gt;<br></code></pre></td></tr></table></div></figure>

<p>from math import pi</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; def vol_ratio(r1,r2):<br>...     <span class="hljs-built_in">return</span> volume(r1)/volume(r2)<br>...<br>&gt;&gt;&gt; vol_ratio(20,10)<br>8.0<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2017.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2018.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2019.png"  alt="Untitled">
      </p>
<p> 可以修改定义的函数名，但是不能修改内部的变量名称..</p>
<p>… 不知道几个参数</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2020.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2021.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2022.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2023.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2024.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2025.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2026.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2027.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2028.png"  alt="Untitled">
      </p>
<p>达到return的时候，你会执行return后面的表达式</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2029.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2030.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2031.png"  alt="Untitled">
      </p>
<p>执行子表达式1-3，作为arguments -2 </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2032.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2033.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/2/Untitled%2034.png"  alt="Untitled">
      </p>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 61 A (Part 3)</title>
    <url>/posts/cs-61a-3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h1 id="CS-61-A-Part-3"   >
          <a href="#CS-61-A-Part-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#CS-61-A-Part-3" class="headerlink" title="CS 61 A (Part 3)"></a>CS 61 A (Part 3)</h1>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled.png"  alt="Untitled">
      </p>
<span id="more"></span>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> print(<span class="hljs-number">2</span>)<br><span class="hljs-number">2</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> print(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>hello<br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">None</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> print(<span class="hljs-keyword">None</span>)<br><span class="hljs-keyword">None</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></div></figure>

<p>None 什么都不会输出</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> x<span class="hljs-operator">=</span>print(<span class="hljs-number">1</span>)<br><span class="hljs-number">1</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> x<br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span> print(x)<br><span class="hljs-keyword">None</span><br><span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></div></figure>

<p>print 返回的是none</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%201.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%202.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%203.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%204.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%205.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%206.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%207.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%208.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%209.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%2010.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%2011.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%2012.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%2013.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%2014.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/3//Untitled%2015.png"  alt="Untitled">
      </p>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS 61 A (Part 4)</title>
    <url>/posts/cs-61a-4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h1 id="CS-61-A-Part-4"   >
          <a href="#CS-61-A-Part-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#CS-61-A-Part-4" class="headerlink" title="CS 61 A (Part 4)"></a>CS 61 A (Part 4)</h1>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled.png"  alt="Untitled">
      </p>
<span id="more"></span>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%201.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%202.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%203.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%204.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%205.png"  alt="Untitled">
      </p>
<p>create new Frame: call expression</p>
<p>assignments  create bindings, define function create bindings</p>
<p>有点像js中的作用域</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%206.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%207.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%208.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%209.png"  alt="Untitled">
      </p>
<p><strong>your parent is always wherever the function was defined</strong></p>
<p>在定义的时候就决定了</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2010.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2011.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2012.png"  alt="Untitled">
      </p>
<p>找不到的话就会报错</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2013.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2014.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2015.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2016.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2017.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2018.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2019.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2020.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2021.png"  alt="Untitled">
      </p>
<p>hoc 闭包</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2022.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2023.png"  alt="Untitled">
      </p>
<p>lambda定义在 一个函数中，所以p=f1</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/cs61a/4/Untitled%2024.png"  alt="Untitled">
      </p>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次前端报错的问题排查</title>
    <url>/posts/record-a-front-end-error-troubleshooting.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="一、事情起因"   >
          <a href="#一、事情起因" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、事情起因" class="headerlink" title="一、事情起因"></a>一、事情起因</h2>
      <p>开始项目是有两个功能分开进行开发的，后面想着可以一起测试上线，就合并到一起进行构建，当发布到测试环境的时候，报了一个之前从来没有见过的错。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20211226221659.png" >
      </p>
<p>错误所指向的链接地址也不知所云：</p>
<p>1.Uncaught Error: Minified React error #130</p>
<p>2.Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.</p>
<span id="more"></span>


        <h2 id="二、排查流程"   >
          <a href="#二、排查流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、排查流程" class="headerlink" title="二、排查流程"></a>二、排查流程</h2>
      
        <h3 id="1-本地复现"   >
          <a href="#1-本地复现" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-本地复现" class="headerlink" title="1.本地复现"></a>1.本地复现</h3>
      <p>我尝试着本地复现，但是本地 dev 环境跑着正常。</p>

        <h3 id="2-尝试网络搜索"   >
          <a href="#2-尝试网络搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-尝试网络搜索" class="headerlink" title="2.尝试网络搜索"></a>2.尝试网络搜索</h3>
      <p>网络搜索得到一篇知乎的文章，大家分别说是文件路径大小写、和 export 与 default export 导出之类的的问题。</p>
<p>心想着可能是 windows 对大小写文件不敏感，我第一步重新用 tsc 进行大小写检查和引用检查，发现没有效果。然后特地使用 wsl 链接 ubuntu Linux 子系统来重新 run dev 跑开发环境，发现一切正常。</p>

        <h3 id="3-加载-sourcemap"   >
          <a href="#3-加载-sourcemap" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-加载-sourcemap" class="headerlink" title="3.加载 sourcemap"></a>3.加载 sourcemap</h3>
      <p>因为本地不能复现错误，就想着看看错误细节，经过向同事请教，用 10.7 调试线上代码里面的方法，加载之后发现还是无法定位到错误的地方。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20211226221752.png" >
      </p>

        <h3 id="4-本地运行-prod-代码"   >
          <a href="#4-本地运行-prod-代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-本地运行-prod-代码" class="headerlink" title="4.本地运行 prod 代码"></a>4.本地运行 prod 代码</h3>
      <p>以上的措施都失效之后，我就想着逐渐屏蔽一部分代码，将合并分支之前的两个分支代码分别部署，发现一个有问题，一个没有问题，但是得到的错误仍旧不能定位。因为涉及的代码量比较多，不可能一一屏蔽再一一部署排查，这对运维资源的浪费也是巨大的。</p>
<p>经过一段时间的折腾，发现还是不行，我就想着如何才能再本地运行 build 之后的代码，开始同事请教之后发现可以使用 –prod 调试使用 prod 构建配置构建出来的代码。</p>
<p>最后，用这条命令运行之后发现可以复现错误，并且一个一个注释定位到了错误的语句。</p>

        <h2 id="三、问题原因"   >
          <a href="#三、问题原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、问题原因" class="headerlink" title="三、问题原因"></a>三、问题原因</h2>
      <p>最后定位的原因竟然是因为这一句有问题</p>
<p>错误定位</p>
<figure class="highlight typescript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs Typescript">&lt;<span class="hljs-title class_">Dropdown</span>.<span class="hljs-property">Button</span> overlay=&#123;menu&#125;&gt;文本&lt;/<span class="hljs-title class_">Dropdown</span>.<span class="hljs-property">Button</span>&gt;<br></code></pre></td></tr></table></div></figure>

<p>然后我还升级版本，分别写了几种写法，发现有的可以，有的不行</p>
<p>后面向组件库同学反馈，后面这个问题也修复了，问题原因为被 webpack 误 tree shaking 了。</p>

        <h2 id="四、反思"   >
          <a href="#四、反思" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、反思" class="headerlink" title="四、反思"></a>四、反思</h2>
      <p>其实排查这个问题还是花了一点时间，因为开始就是想着网上看类似的问题，后面再自己尝试，这一些列都是比较花时间的。</p>
<p>现在回头看看其实觉得排查的第一步就是应该先复现问题，只有问题复现了才有途径去解决问题。</p>
<p>当时也是被问题迷糊了，出现了问题就应该复现问题，然后才是解决问题。当发现 dev 开发环境不出现问题，而构建出现问题的时候就应该想着用 prod 的模式来跑代码，如果当时可以及时抓住排查问题的关键点的话，可以节省许多时间。</p>
<p>所以时时刻刻要注意正确的排查问题的思路：<strong>出现问题–尝试复现问题–解决问题</strong>。</p>
<p>我想做到这样的话，以后遇到类似的问题也会事半功倍的。</p>
]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>足球诗人：贺炜经典解说台词语录</title>
    <url>/posts/football-poet-he-weis-classic-commentary-poems.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="width:100%;height:0px;position:relative;padding-bottom:56.327%;"><iframe src="https://streamja.com/embed/P3vll" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;"></iframe></div>


        <h3 id="贺炜诗意点评德法大战"   >
          <a href="#贺炜诗意点评德法大战" class="heading-link"><i class="fas fa-link"></i></a><a href="#贺炜诗意点评德法大战" class="headerlink" title="贺炜诗意点评德法大战"></a>贺炜诗意点评德法大战</h3>
      <blockquote>
<p>他们会明白莫泊桑的一句话<br>生活可能不像你想象的那么好<br>但是也不会像你想象的那么糟<br>人的脆弱和坚强都超乎了自己的想象<br>有时候可能脆弱的一句话就泪流满面<br>有时候你发现自己咬着牙已经走过了很长的路</p>
</blockquote>
<span id="more"></span>


        <h3 id="贺炜诗意送别西班牙"   >
          <a href="#贺炜诗意送别西班牙" class="heading-link"><i class="fas fa-link"></i></a><a href="#贺炜诗意送别西班牙" class="headerlink" title="贺炜诗意送别西班牙"></a>贺炜诗意送别西班牙</h3>
      <blockquote>
<p>人生当中和成功只是一时的，失败却是主旋律。<br>但是如何面对失败却把人分成了不同的样子。<br>有的人会被失败击垮，有的人能够不断地爬起来继续向前。<br>我想真正的成熟应该并不是追求完美，而是直面自己的缺憾，这才是生活的本质。<br>罗曼罗兰说过的<br>这个世上只有一种真正的英雄主义，那就是认清生活的真相，并且仍然热爱它。<br>西班牙队从头再来吧，<br>难道向上攀爬的那条路，不是比站在顶峰更让人热血澎湃吗？</p>
</blockquote>

        <h3 id="贺炜送别阿根廷"   >
          <a href="#贺炜送别阿根廷" class="heading-link"><i class="fas fa-link"></i></a><a href="#贺炜送别阿根廷" class="headerlink" title="贺炜送别阿根廷"></a>贺炜送别阿根廷</h3>
      <blockquote>
<p>探戈舞曲当中与生俱来的悲情气质和阿根廷队的气质真是有些暗合，挥之不去，就像宿命一样。<br>不过阿根廷人永远是无休止的朝着心中所爱前进，不断地自我革新，以求更接近自己的目标，这本身就很让人着迷不是吗？<br>相信很多的阿根廷球迷像他们喜欢的球队一样无怨无悔，你爱上一件事物当然不是爱他的成败，你爱的就是他的气质，对不对？<br>祝贺德国人，我们也要为阿根廷人鼓掌，任何敢于放弃自我不断革新，为心中的目标不断改变自己的人都值得尊敬！</p>
</blockquote>

        <h3 id="国足-1-5-泰国-贺炜悲情评价"   >
          <a href="#国足-1-5-泰国-贺炜悲情评价" class="heading-link"><i class="fas fa-link"></i></a><a href="#国足-1-5-泰国-贺炜悲情评价" class="headerlink" title="国足 1-5 泰国 贺炜悲情评价"></a>国足 1-5 泰国 贺炜悲情评价</h3>
      <blockquote>
<p>好的这个时候来自韩国的主裁判吹响了全场比赛结束的哨音，<br>2013 年 6 月 15 日，合肥体育中心体育场，中国国家队 1:5 负于泰国国家队。<br>以上是一句沉痛的结束词。在我结束足球的生涯中，还从来没有如此沉痛的心情过。<br>我希望这个日子被大家所有人记住，我希望以后会比今天更好。<br>如果从业者希望以后会更好的话，为这种希望去努力，这样你的人生才会有意义。</p>
</blockquote>

        <h3 id="13-年拜仁夺冠贺炜深情解说"   >
          <a href="#13-年拜仁夺冠贺炜深情解说" class="heading-link"><i class="fas fa-link"></i></a><a href="#13-年拜仁夺冠贺炜深情解说" class="headerlink" title="13 年拜仁夺冠贺炜深情解说"></a>13 年拜仁夺冠贺炜深情解说</h3>
      <blockquote>
<p>球迷喜欢球队就像是自己的信仰一样<br>现在有的球迷还能在我们的身边<br>有的球迷可能已经无法在我们身边<br>在这个时候如果大家抬头看看星空<br>我相信还有一科特别闪亮的星星<br>我们也祝他能够幸福。</p>
</blockquote>

        <h2 id="现在我才发现"   >
          <a href="#现在我才发现" class="heading-link"><i class="fas fa-link"></i></a><a href="#现在我才发现" class="headerlink" title="现在我才发现"></a>现在我才发现</h2>
      <p>现在我才发现，足球这项运动中有多么大的魅力，原来这其中所包含的情感和哲学，是人这一辈子都需要用心去领悟的。我虽然之前并未玩过足球，但是此时此刻我的心仿佛和他是一起的。</p>
]]></content>
  </entry>
  <entry>
    <title>oh-my-zsh中的git alias整理</title>
    <url>/posts/git-alias-in-ohmyzsh.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="终端"   >
          <a href="#终端" class="heading-link"><i class="fas fa-link"></i></a><a href="#终端" class="headerlink" title="终端"></a>终端</h2>
      <p>我的终端使用的是zsh，并且安装了oh-my-zsh，因此内置了一些Git的alias，因此做一个归纳和整理。</p>

        <h2 id="查看方法"   >
          <a href="#查看方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看方法" class="headerlink" title="查看方法"></a>查看方法</h2>
      <p>如果需要查看，只需要查看<code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>这个文件就可以了</p>

        <h2 id="别名列表"   >
          <a href="#别名列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#别名列表" class="headerlink" title="别名列表"></a>别名列表</h2>
      <p>在此，顺便列出alias的内容，方便查看。</p>
<span id="more"></span>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Git version checking</span><br><span class="hljs-built_in">autoload</span> -Uz is-at-least<br>git_version=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;<span class="hljs-variable">$&#123;(As: :)$(git version 2&gt;/dev/null)&#125;</span>[3]&#125;</span>&quot;</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Functions</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># The name of the current branch</span><br><span class="hljs-comment"># Back-compatibility wrapper for when this function was defined here in</span><br><span class="hljs-comment"># the plugin, before being pulled in to core lib/git.zsh as git_current_branch()</span><br><span class="hljs-comment"># to fix the core -&gt; git plugin dependency.</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">current_branch</span></span>() &#123;<br>  git_current_branch<br>&#125;<br><br><span class="hljs-comment"># Pretty log messages</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">_git_log_prettily</span></span>()&#123;<br>  <span class="hljs-keyword">if</span> ! [ -z <span class="hljs-variable">$1</span> ]; <span class="hljs-keyword">then</span><br>    git <span class="hljs-built_in">log</span> --pretty=<span class="hljs-variable">$1</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br>compdef _git _git_log_prettily=git-log<br><br><span class="hljs-comment"># Warn if the current branch is a WIP</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">work_in_progress</span></span>() &#123;<br>  <span class="hljs-built_in">command</span> git -c log.showSignature=<span class="hljs-literal">false</span> <span class="hljs-built_in">log</span> -n 1 2&gt;/dev/null | grep -q -- <span class="hljs-string">&quot;--wip--&quot;</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;WIP!!&quot;</span><br>&#125;<br><br><span class="hljs-comment"># Check if main exists and use instead of master</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">git_main_branch</span></span>() &#123;<br>  <span class="hljs-built_in">command</span> git rev-parse --git-dir &amp;&gt;/dev/null || <span class="hljs-built_in">return</span><br>  <span class="hljs-built_in">local</span> ref<br>  <span class="hljs-keyword">for</span> ref <span class="hljs-keyword">in</span> refs/&#123;heads,remotes/&#123;origin,upstream&#125;&#125;/&#123;main,trunk&#125;; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> git show-ref -q --verify <span class="hljs-variable">$ref</span>; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;ref:t&#125;</span><br>      <span class="hljs-built_in">return</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span> master<br>&#125;<br><br><span class="hljs-comment"># Check for develop and similarly named branches</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">git_develop_branch</span></span>() &#123;<br>  <span class="hljs-built_in">command</span> git rev-parse --git-dir &amp;&gt;/dev/null || <span class="hljs-built_in">return</span><br>  <span class="hljs-built_in">local</span> branch<br>  <span class="hljs-keyword">for</span> branch <span class="hljs-keyword">in</span> dev devel development; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">command</span> git show-ref -q --verify refs/heads/<span class="hljs-variable">$branch</span>; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-variable">$branch</span><br>      <span class="hljs-built_in">return</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span> develop<br>&#125;<br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Aliases</span><br><span class="hljs-comment"># (sorted alphabetically)</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-built_in">alias</span> g=<span class="hljs-string">&#x27;git&#x27;</span><br><br><span class="hljs-built_in">alias</span> ga=<span class="hljs-string">&#x27;git add&#x27;</span><br><span class="hljs-built_in">alias</span> gaa=<span class="hljs-string">&#x27;git add --all&#x27;</span><br><span class="hljs-built_in">alias</span> gapa=<span class="hljs-string">&#x27;git add --patch&#x27;</span><br><span class="hljs-built_in">alias</span> gau=<span class="hljs-string">&#x27;git add --update&#x27;</span><br><span class="hljs-built_in">alias</span> gav=<span class="hljs-string">&#x27;git add --verbose&#x27;</span><br><span class="hljs-built_in">alias</span> gap=<span class="hljs-string">&#x27;git apply&#x27;</span><br><span class="hljs-built_in">alias</span> gapt=<span class="hljs-string">&#x27;git apply --3way&#x27;</span><br><br><span class="hljs-built_in">alias</span> gb=<span class="hljs-string">&#x27;git branch&#x27;</span><br><span class="hljs-built_in">alias</span> gba=<span class="hljs-string">&#x27;git branch -a&#x27;</span><br><span class="hljs-built_in">alias</span> gbd=<span class="hljs-string">&#x27;git branch -d&#x27;</span><br><span class="hljs-built_in">alias</span> gbda=<span class="hljs-string">&#x27;git branch --no-color --merged | command grep -vE &quot;^([+*]|\s*($(git_main_branch)|$(git_develop_branch))\s*$)&quot; | command xargs git branch -d 2&gt;/dev/null&#x27;</span><br><span class="hljs-built_in">alias</span> gbD=<span class="hljs-string">&#x27;git branch -D&#x27;</span><br><span class="hljs-built_in">alias</span> gbl=<span class="hljs-string">&#x27;git blame -b -w&#x27;</span><br><span class="hljs-built_in">alias</span> gbnm=<span class="hljs-string">&#x27;git branch --no-merged&#x27;</span><br><span class="hljs-built_in">alias</span> gbr=<span class="hljs-string">&#x27;git branch --remote&#x27;</span><br><span class="hljs-built_in">alias</span> gbs=<span class="hljs-string">&#x27;git bisect&#x27;</span><br><span class="hljs-built_in">alias</span> gbsb=<span class="hljs-string">&#x27;git bisect bad&#x27;</span><br><span class="hljs-built_in">alias</span> gbsg=<span class="hljs-string">&#x27;git bisect good&#x27;</span><br><span class="hljs-built_in">alias</span> gbsr=<span class="hljs-string">&#x27;git bisect reset&#x27;</span><br><span class="hljs-built_in">alias</span> gbss=<span class="hljs-string">&#x27;git bisect start&#x27;</span><br><br><span class="hljs-built_in">alias</span> gc=<span class="hljs-string">&#x27;git commit -v&#x27;</span><br><span class="hljs-built_in">alias</span> gc!=<span class="hljs-string">&#x27;git commit -v --amend&#x27;</span><br><span class="hljs-built_in">alias</span> gcn!=<span class="hljs-string">&#x27;git commit -v --no-edit --amend&#x27;</span><br><span class="hljs-built_in">alias</span> gca=<span class="hljs-string">&#x27;git commit -v -a&#x27;</span><br><span class="hljs-built_in">alias</span> gca!=<span class="hljs-string">&#x27;git commit -v -a --amend&#x27;</span><br><span class="hljs-built_in">alias</span> gcan!=<span class="hljs-string">&#x27;git commit -v -a --no-edit --amend&#x27;</span><br><span class="hljs-built_in">alias</span> gcans!=<span class="hljs-string">&#x27;git commit -v -a -s --no-edit --amend&#x27;</span><br><span class="hljs-built_in">alias</span> gcam=<span class="hljs-string">&#x27;git commit -a -m&#x27;</span><br><span class="hljs-built_in">alias</span> gcsm=<span class="hljs-string">&#x27;git commit -s -m&#x27;</span><br><span class="hljs-built_in">alias</span> gcas=<span class="hljs-string">&#x27;git commit -a -s&#x27;</span><br><span class="hljs-built_in">alias</span> gcasm=<span class="hljs-string">&#x27;git commit -a -s -m&#x27;</span><br><span class="hljs-built_in">alias</span> gcb=<span class="hljs-string">&#x27;git checkout -b&#x27;</span><br><span class="hljs-built_in">alias</span> gcf=<span class="hljs-string">&#x27;git config --list&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">gccd</span></span>() &#123;<br>  <span class="hljs-built_in">command</span> git <span class="hljs-built_in">clone</span> --recurse-submodules <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>  [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$_</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$_</span>&quot;</span> || <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;<span class="hljs-variable">$&#123;_:t&#125;</span>%.git&#125;</span>&quot;</span><br>&#125;<br>compdef _git gccd=git-clone<br><br><span class="hljs-built_in">alias</span> gcl=<span class="hljs-string">&#x27;git clone --recurse-submodules&#x27;</span><br><span class="hljs-built_in">alias</span> gclean=<span class="hljs-string">&#x27;git clean -id&#x27;</span><br><span class="hljs-built_in">alias</span> gpristine=<span class="hljs-string">&#x27;git reset --hard &amp;&amp; git clean -dffx&#x27;</span><br><span class="hljs-built_in">alias</span> gcm=<span class="hljs-string">&#x27;git checkout $(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gcd=<span class="hljs-string">&#x27;git checkout $(git_develop_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gcmsg=<span class="hljs-string">&#x27;git commit -m&#x27;</span><br><span class="hljs-built_in">alias</span> gco=<span class="hljs-string">&#x27;git checkout&#x27;</span><br><span class="hljs-built_in">alias</span> gcor=<span class="hljs-string">&#x27;git checkout --recurse-submodules&#x27;</span><br><span class="hljs-built_in">alias</span> gcount=<span class="hljs-string">&#x27;git shortlog -sn&#x27;</span><br><span class="hljs-built_in">alias</span> gcp=<span class="hljs-string">&#x27;git cherry-pick&#x27;</span><br><span class="hljs-built_in">alias</span> gcpa=<span class="hljs-string">&#x27;git cherry-pick --abort&#x27;</span><br><span class="hljs-built_in">alias</span> gcpc=<span class="hljs-string">&#x27;git cherry-pick --continue&#x27;</span><br><span class="hljs-built_in">alias</span> gcs=<span class="hljs-string">&#x27;git commit -S&#x27;</span><br><span class="hljs-built_in">alias</span> gcss=<span class="hljs-string">&#x27;git commit -S -s&#x27;</span><br><span class="hljs-built_in">alias</span> gcssm=<span class="hljs-string">&#x27;git commit -S -s -m&#x27;</span><br><br><span class="hljs-built_in">alias</span> gd=<span class="hljs-string">&#x27;git diff&#x27;</span><br><span class="hljs-built_in">alias</span> gdca=<span class="hljs-string">&#x27;git diff --cached&#x27;</span><br><span class="hljs-built_in">alias</span> gdcw=<span class="hljs-string">&#x27;git diff --cached --word-diff&#x27;</span><br><span class="hljs-built_in">alias</span> gdct=<span class="hljs-string">&#x27;git describe --tags $(git rev-list --tags --max-count=1)&#x27;</span><br><span class="hljs-built_in">alias</span> gds=<span class="hljs-string">&#x27;git diff --staged&#x27;</span><br><span class="hljs-built_in">alias</span> gdt=<span class="hljs-string">&#x27;git diff-tree --no-commit-id --name-only -r&#x27;</span><br><span class="hljs-built_in">alias</span> gdup=<span class="hljs-string">&#x27;git diff @&#123;upstream&#125;&#x27;</span><br><span class="hljs-built_in">alias</span> gdw=<span class="hljs-string">&#x27;git diff --word-diff&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">gdnolock</span></span>() &#123;<br>  git diff <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> <span class="hljs-string">&quot;:(exclude)package-lock.json&quot;</span> <span class="hljs-string">&quot;:(exclude)*.lock&quot;</span><br>&#125;<br>compdef _git gdnolock=git-diff<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">gdv</span></span>() &#123; git diff -w <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> | view - &#125;<br>compdef _git gdv=git-diff<br><br><span class="hljs-built_in">alias</span> gf=<span class="hljs-string">&#x27;git fetch&#x27;</span><br><span class="hljs-comment"># --jobs=&lt;n&gt; was added in git 2.8</span><br>is-at-least 2.8 <span class="hljs-string">&quot;<span class="hljs-variable">$git_version</span>&quot;</span> \<br>  &amp;&amp; <span class="hljs-built_in">alias</span> gfa=<span class="hljs-string">&#x27;git fetch --all --prune --jobs=10&#x27;</span> \<br>  || <span class="hljs-built_in">alias</span> gfa=<span class="hljs-string">&#x27;git fetch --all --prune&#x27;</span><br><span class="hljs-built_in">alias</span> gfo=<span class="hljs-string">&#x27;git fetch origin&#x27;</span><br><br><span class="hljs-built_in">alias</span> gfg=<span class="hljs-string">&#x27;git ls-files | grep&#x27;</span><br><br><span class="hljs-built_in">alias</span> gg=<span class="hljs-string">&#x27;git gui citool&#x27;</span><br><span class="hljs-built_in">alias</span> gga=<span class="hljs-string">&#x27;git gui citool --amend&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ggf</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 1 ]] &amp;&amp; <span class="hljs-built_in">local</span> b=<span class="hljs-string">&quot;<span class="hljs-subst">$(git_current_branch)</span>&quot;</span><br>  git push --force origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;b:=$1&#125;</span>&quot;</span><br>&#125;<br>compdef _git ggf=git-checkout<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ggfl</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 1 ]] &amp;&amp; <span class="hljs-built_in">local</span> b=<span class="hljs-string">&quot;<span class="hljs-subst">$(git_current_branch)</span>&quot;</span><br>  git push --force-with-lease origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;b:=$1&#125;</span>&quot;</span><br>&#125;<br>compdef _git ggfl=git-checkout<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ggl</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 0 ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 1 ]]; <span class="hljs-keyword">then</span><br>    git pull origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;*&#125;</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> == 0 ]] &amp;&amp; <span class="hljs-built_in">local</span> b=<span class="hljs-string">&quot;<span class="hljs-subst">$(git_current_branch)</span>&quot;</span><br>    git pull origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;b:=$1&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br>compdef _git ggl=git-checkout<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ggp</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 0 ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 1 ]]; <span class="hljs-keyword">then</span><br>    git push origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;*&#125;</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> == 0 ]] &amp;&amp; <span class="hljs-built_in">local</span> b=<span class="hljs-string">&quot;<span class="hljs-subst">$(git_current_branch)</span>&quot;</span><br>    git push origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;b:=$1&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br>compdef _git ggp=git-checkout<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ggpnp</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> == 0 ]]; <span class="hljs-keyword">then</span><br>    ggl &amp;&amp; ggp<br>  <span class="hljs-keyword">else</span><br>    ggl <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;*&#125;</span>&quot;</span> &amp;&amp; ggp <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;*&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br>compdef _git ggpnp=git-checkout<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ggu</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$#</span>&quot;</span> != 1 ]] &amp;&amp; <span class="hljs-built_in">local</span> b=<span class="hljs-string">&quot;<span class="hljs-subst">$(git_current_branch)</span>&quot;</span><br>  git pull --rebase origin <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;b:=$1&#125;</span>&quot;</span><br>&#125;<br>compdef _git ggu=git-checkout<br><br><span class="hljs-built_in">alias</span> ggpur=<span class="hljs-string">&#x27;ggu&#x27;</span><br><span class="hljs-built_in">alias</span> ggpull=<span class="hljs-string">&#x27;git pull origin &quot;$(git_current_branch)&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> ggpush=<span class="hljs-string">&#x27;git push origin &quot;$(git_current_branch)&quot;&#x27;</span><br><br><span class="hljs-built_in">alias</span> ggsup=<span class="hljs-string">&#x27;git branch --set-upstream-to=origin/$(git_current_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gpsup=<span class="hljs-string">&#x27;git push --set-upstream origin $(git_current_branch)&#x27;</span><br><br><span class="hljs-built_in">alias</span> ghh=<span class="hljs-string">&#x27;git help&#x27;</span><br><br><span class="hljs-built_in">alias</span> gignore=<span class="hljs-string">&#x27;git update-index --assume-unchanged&#x27;</span><br><span class="hljs-built_in">alias</span> gignored=<span class="hljs-string">&#x27;git ls-files -v | grep &quot;^[[:lower:]]&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> git-svn-dcommit-push=<span class="hljs-string">&#x27;git svn dcommit &amp;&amp; git push github $(git_main_branch):svntrunk&#x27;</span><br><br><span class="hljs-built_in">alias</span> gk=<span class="hljs-string">&#x27;\gitk --all --branches &amp;!&#x27;</span><br><span class="hljs-built_in">alias</span> gke=<span class="hljs-string">&#x27;\gitk --all $(git log -g --pretty=%h) &amp;!&#x27;</span><br><br><span class="hljs-built_in">alias</span> gl=<span class="hljs-string">&#x27;git pull&#x27;</span><br><span class="hljs-built_in">alias</span> glg=<span class="hljs-string">&#x27;git log --stat&#x27;</span><br><span class="hljs-built_in">alias</span> glgp=<span class="hljs-string">&#x27;git log --stat -p&#x27;</span><br><span class="hljs-built_in">alias</span> glgg=<span class="hljs-string">&#x27;git log --graph&#x27;</span><br><span class="hljs-built_in">alias</span> glgga=<span class="hljs-string">&#x27;git log --graph --decorate --all&#x27;</span><br><span class="hljs-built_in">alias</span> glgm=<span class="hljs-string">&#x27;git log --graph --max-count=10&#x27;</span><br><span class="hljs-built_in">alias</span> glo=<span class="hljs-string">&#x27;git log --oneline --decorate&#x27;</span><br><span class="hljs-built_in">alias</span> glol=<span class="hljs-string">&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset&#x27;&quot;</span><br><span class="hljs-built_in">alias</span> glols=<span class="hljs-string">&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset&#x27; --stat&quot;</span><br><span class="hljs-built_in">alias</span> glod=<span class="hljs-string">&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset&#x27;&quot;</span><br><span class="hljs-built_in">alias</span> glods=<span class="hljs-string">&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset&#x27; --date=short&quot;</span><br><span class="hljs-built_in">alias</span> glola=<span class="hljs-string">&quot;git log --graph --pretty=&#x27;%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset&#x27; --all&quot;</span><br><span class="hljs-built_in">alias</span> glog=<span class="hljs-string">&#x27;git log --oneline --decorate --graph&#x27;</span><br><span class="hljs-built_in">alias</span> gloga=<span class="hljs-string">&#x27;git log --oneline --decorate --graph --all&#x27;</span><br><span class="hljs-built_in">alias</span> glp=<span class="hljs-string">&quot;_git_log_prettily&quot;</span><br><br><span class="hljs-built_in">alias</span> gm=<span class="hljs-string">&#x27;git merge&#x27;</span><br><span class="hljs-built_in">alias</span> gmom=<span class="hljs-string">&#x27;git merge origin/$(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gmtl=<span class="hljs-string">&#x27;git mergetool --no-prompt&#x27;</span><br><span class="hljs-built_in">alias</span> gmtlvim=<span class="hljs-string">&#x27;git mergetool --no-prompt --tool=vimdiff&#x27;</span><br><span class="hljs-built_in">alias</span> gmum=<span class="hljs-string">&#x27;git merge upstream/$(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gma=<span class="hljs-string">&#x27;git merge --abort&#x27;</span><br><br><span class="hljs-built_in">alias</span> gp=<span class="hljs-string">&#x27;git push&#x27;</span><br><span class="hljs-built_in">alias</span> gpd=<span class="hljs-string">&#x27;git push --dry-run&#x27;</span><br><span class="hljs-built_in">alias</span> gpf=<span class="hljs-string">&#x27;git push --force-with-lease&#x27;</span><br><span class="hljs-built_in">alias</span> gpf!=<span class="hljs-string">&#x27;git push --force&#x27;</span><br><span class="hljs-built_in">alias</span> gpoat=<span class="hljs-string">&#x27;git push origin --all &amp;&amp; git push origin --tags&#x27;</span><br><span class="hljs-built_in">alias</span> gpr=<span class="hljs-string">&#x27;git pull --rebase&#x27;</span><br><span class="hljs-built_in">alias</span> gpu=<span class="hljs-string">&#x27;git push upstream&#x27;</span><br><span class="hljs-built_in">alias</span> gpv=<span class="hljs-string">&#x27;git push -v&#x27;</span><br><br><span class="hljs-built_in">alias</span> gr=<span class="hljs-string">&#x27;git remote&#x27;</span><br><span class="hljs-built_in">alias</span> gra=<span class="hljs-string">&#x27;git remote add&#x27;</span><br><span class="hljs-built_in">alias</span> grb=<span class="hljs-string">&#x27;git rebase&#x27;</span><br><span class="hljs-built_in">alias</span> grba=<span class="hljs-string">&#x27;git rebase --abort&#x27;</span><br><span class="hljs-built_in">alias</span> grbc=<span class="hljs-string">&#x27;git rebase --continue&#x27;</span><br><span class="hljs-built_in">alias</span> grbd=<span class="hljs-string">&#x27;git rebase $(git_develop_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> grbi=<span class="hljs-string">&#x27;git rebase -i&#x27;</span><br><span class="hljs-built_in">alias</span> grbm=<span class="hljs-string">&#x27;git rebase $(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> grbom=<span class="hljs-string">&#x27;git rebase origin/$(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> grbo=<span class="hljs-string">&#x27;git rebase --onto&#x27;</span><br><span class="hljs-built_in">alias</span> grbs=<span class="hljs-string">&#x27;git rebase --skip&#x27;</span><br><span class="hljs-built_in">alias</span> grev=<span class="hljs-string">&#x27;git revert&#x27;</span><br><span class="hljs-built_in">alias</span> grh=<span class="hljs-string">&#x27;git reset&#x27;</span><br><span class="hljs-built_in">alias</span> grhh=<span class="hljs-string">&#x27;git reset --hard&#x27;</span><br><span class="hljs-built_in">alias</span> groh=<span class="hljs-string">&#x27;git reset origin/$(git_current_branch) --hard&#x27;</span><br><span class="hljs-built_in">alias</span> grm=<span class="hljs-string">&#x27;git rm&#x27;</span><br><span class="hljs-built_in">alias</span> grmc=<span class="hljs-string">&#x27;git rm --cached&#x27;</span><br><span class="hljs-built_in">alias</span> grmv=<span class="hljs-string">&#x27;git remote rename&#x27;</span><br><span class="hljs-built_in">alias</span> grrm=<span class="hljs-string">&#x27;git remote remove&#x27;</span><br><span class="hljs-built_in">alias</span> grs=<span class="hljs-string">&#x27;git restore&#x27;</span><br><span class="hljs-built_in">alias</span> grset=<span class="hljs-string">&#x27;git remote set-url&#x27;</span><br><span class="hljs-built_in">alias</span> grss=<span class="hljs-string">&#x27;git restore --source&#x27;</span><br><span class="hljs-built_in">alias</span> grst=<span class="hljs-string">&#x27;git restore --staged&#x27;</span><br><span class="hljs-built_in">alias</span> grt=<span class="hljs-string">&#x27;cd &quot;$(git rev-parse --show-toplevel || echo .)&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> gru=<span class="hljs-string">&#x27;git reset --&#x27;</span><br><span class="hljs-built_in">alias</span> grup=<span class="hljs-string">&#x27;git remote update&#x27;</span><br><span class="hljs-built_in">alias</span> grv=<span class="hljs-string">&#x27;git remote -v&#x27;</span><br><br><span class="hljs-built_in">alias</span> gsb=<span class="hljs-string">&#x27;git status -sb&#x27;</span><br><span class="hljs-built_in">alias</span> gsd=<span class="hljs-string">&#x27;git svn dcommit&#x27;</span><br><span class="hljs-built_in">alias</span> gsh=<span class="hljs-string">&#x27;git show&#x27;</span><br><span class="hljs-built_in">alias</span> gsi=<span class="hljs-string">&#x27;git submodule init&#x27;</span><br><span class="hljs-built_in">alias</span> gsps=<span class="hljs-string">&#x27;git show --pretty=short --show-signature&#x27;</span><br><span class="hljs-built_in">alias</span> gsr=<span class="hljs-string">&#x27;git svn rebase&#x27;</span><br><span class="hljs-built_in">alias</span> gss=<span class="hljs-string">&#x27;git status -s&#x27;</span><br><span class="hljs-built_in">alias</span> gst=<span class="hljs-string">&#x27;git status&#x27;</span><br><br><span class="hljs-comment"># use the default stash push on git 2.13 and newer</span><br>is-at-least 2.13 <span class="hljs-string">&quot;<span class="hljs-variable">$git_version</span>&quot;</span> \<br>  &amp;&amp; <span class="hljs-built_in">alias</span> gsta=<span class="hljs-string">&#x27;git stash push&#x27;</span> \<br>  || <span class="hljs-built_in">alias</span> gsta=<span class="hljs-string">&#x27;git stash save&#x27;</span><br><br><span class="hljs-built_in">alias</span> gstaa=<span class="hljs-string">&#x27;git stash apply&#x27;</span><br><span class="hljs-built_in">alias</span> gstc=<span class="hljs-string">&#x27;git stash clear&#x27;</span><br><span class="hljs-built_in">alias</span> gstd=<span class="hljs-string">&#x27;git stash drop&#x27;</span><br><span class="hljs-built_in">alias</span> gstl=<span class="hljs-string">&#x27;git stash list&#x27;</span><br><span class="hljs-built_in">alias</span> gstp=<span class="hljs-string">&#x27;git stash pop&#x27;</span><br><span class="hljs-built_in">alias</span> gsts=<span class="hljs-string">&#x27;git stash show --text&#x27;</span><br><span class="hljs-built_in">alias</span> gstu=<span class="hljs-string">&#x27;gsta --include-untracked&#x27;</span><br><span class="hljs-built_in">alias</span> gstall=<span class="hljs-string">&#x27;git stash --all&#x27;</span><br><span class="hljs-built_in">alias</span> gsu=<span class="hljs-string">&#x27;git submodule update&#x27;</span><br><span class="hljs-built_in">alias</span> gsw=<span class="hljs-string">&#x27;git switch&#x27;</span><br><span class="hljs-built_in">alias</span> gswc=<span class="hljs-string">&#x27;git switch -c&#x27;</span><br><span class="hljs-built_in">alias</span> gswm=<span class="hljs-string">&#x27;git switch $(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gswd=<span class="hljs-string">&#x27;git switch $(git_develop_branch)&#x27;</span><br><br><span class="hljs-built_in">alias</span> gts=<span class="hljs-string">&#x27;git tag -s&#x27;</span><br><span class="hljs-built_in">alias</span> gtv=<span class="hljs-string">&#x27;git tag | sort -V&#x27;</span><br><span class="hljs-built_in">alias</span> gtl=<span class="hljs-string">&#x27;gtl()&#123; git tag --sort=-v:refname -n -l &quot;$&#123;1&#125;*&quot; &#125;; noglob gtl&#x27;</span><br><br><span class="hljs-built_in">alias</span> gunignore=<span class="hljs-string">&#x27;git update-index --no-assume-unchanged&#x27;</span><br><span class="hljs-built_in">alias</span> gunwip=<span class="hljs-string">&#x27;git log -n 1 | grep -q -c &quot;\-\-wip\-\-&quot; &amp;&amp; git reset HEAD~1&#x27;</span><br><span class="hljs-built_in">alias</span> gup=<span class="hljs-string">&#x27;git pull --rebase&#x27;</span><br><span class="hljs-built_in">alias</span> gupv=<span class="hljs-string">&#x27;git pull --rebase -v&#x27;</span><br><span class="hljs-built_in">alias</span> gupa=<span class="hljs-string">&#x27;git pull --rebase --autostash&#x27;</span><br><span class="hljs-built_in">alias</span> gupav=<span class="hljs-string">&#x27;git pull --rebase --autostash -v&#x27;</span><br><span class="hljs-built_in">alias</span> gupom=<span class="hljs-string">&#x27;git pull --rebase origin $(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> gupomi=<span class="hljs-string">&#x27;git pull --rebase=interactive origin $(git_main_branch)&#x27;</span><br><span class="hljs-built_in">alias</span> glum=<span class="hljs-string">&#x27;git pull upstream $(git_main_branch)&#x27;</span><br><br><span class="hljs-built_in">alias</span> gwch=<span class="hljs-string">&#x27;git whatchanged -p --abbrev-commit --pretty=medium&#x27;</span><br><span class="hljs-built_in">alias</span> gwip=<span class="hljs-string">&#x27;git add -A; git rm $(git ls-files --deleted) 2&gt; /dev/null; git commit --no-verify --no-gpg-sign -m &quot;--wip-- [skip ci]&quot;&#x27;</span><br><br><span class="hljs-built_in">alias</span> gam=<span class="hljs-string">&#x27;git am&#x27;</span><br><span class="hljs-built_in">alias</span> gamc=<span class="hljs-string">&#x27;git am --continue&#x27;</span><br><span class="hljs-built_in">alias</span> gams=<span class="hljs-string">&#x27;git am --skip&#x27;</span><br><span class="hljs-built_in">alias</span> gama=<span class="hljs-string">&#x27;git am --abort&#x27;</span><br><span class="hljs-built_in">alias</span> gamscp=<span class="hljs-string">&#x27;git am --show-current-patch&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">grename</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> || -z <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> old_branch new_branch&quot;</span><br>    <span class="hljs-built_in">return</span> 1<br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-comment"># Rename branch locally</span><br>  git branch -m <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>  <span class="hljs-comment"># Rename branch in origin remote</span><br>  <span class="hljs-keyword">if</span> git push origin :<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>; <span class="hljs-keyword">then</span><br>    git push --set-upstream origin <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-built_in">unset</span> git_version<br></code></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git修改Commit信息</title>
    <url>/posts/git-modify-commit-information.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607320222725-image.png" >
      </p>

        <h2 id="背景"   >
          <a href="#背景" class="heading-link"><i class="fas fa-link"></i></a><a href="#背景" class="headerlink" title="背景"></a>背景</h2>
      <p>在我们的业务开发中，最常见的就是使用<code>Git</code>对代码进行版本控制。随之衍生的，就是有可能会遇到修改 Commit Message 的场景，今天我们来总结一下这些基本的操作。</p>
<span id="more"></span>


        <h2 id="应用场景"   >
          <a href="#应用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2>
      
        <h3 id="准备环境"   >
          <a href="#准备环境" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3>
      <p>我们先初始化一个仓库，里面提交一些 commit。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://s21.ax1x.com/2024/06/06/pkYo9Fx.png" >
      <br>我这里是有五次提交，分别添加：a,b,c,d,e。</p>

        <h3 id="修改最近一次的-Commit"   >
          <a href="#修改最近一次的-Commit" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改最近一次的-Commit" class="headerlink" title="修改最近一次的 Commit"></a>修改最近一次的 Commit</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">git commit --amend<br></code></pre></td></tr></table></div></figure>

<p>输入之后我们可以进入 vi 编辑模式对 Git Commit 信息进行编辑</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607320804092-image.png" >
      <br>我们输入<code>i</code>编辑，退出是：按键 esc，再在底部输入<code>:x</code>即可。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607320903950-image.png" >
      </p>
<p>可以看到，此时最后一个的 commit message 已经修改了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://s21.ax1x.com/2024/06/06/pkYoklD.png" >
      </p>

        <h3 id="修改非最后一次的-Commit-信息"   >
          <a href="#修改非最后一次的-Commit-信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改非最后一次的-Commit-信息" class="headerlink" title="修改非最后一次的 Commit 信息"></a>修改非最后一次的 Commit 信息</h3>
      <p>比如我们想修改 b 节点-<code>* be12459 - b (17 minutes ago)</code>这个节点的信息，我们需要使用到<code>git rebase</code>命令。我来简单示范一下。</p>
<p>git rebase 的操作是变基，我们要信息 b 的信息，因此就要变到 b 的前一个：a 的后面，因此我们使用 a 的 hash 来操作</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">git rebase -i 8f9a167（目标提交的前一个提交的<span class="hljs-built_in">hash</span>）<br></code></pre></td></tr></table></div></figure>

<p>我们就可以进入一个 vi 编辑的模式</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607321359580-image.png" >
      <br>我对下面的提示做个简单的翻译</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># p, pick &lt;commit&gt; = 保留commit</span><br><span class="hljs-comment"># r, reword &lt;commit&gt; = 保留commit, 可以修改信息</span><br><span class="hljs-comment"># e, edit &lt;commit&gt; = 保留commit，但是要修改提交文件</span><br><span class="hljs-comment"># s, squash &lt;commit&gt; = 将次commit和前一个commit合并</span><br><span class="hljs-comment"># f, fixup &lt;commit&gt; = 和squash类似，但是我不保留这次的提交信息</span><br><span class="hljs-comment"># x, exec &lt;command&gt; = 执行shell</span><br><span class="hljs-comment"># b, break = 停止在此处 (后续使用 &#x27;git rebase --continue&#x27;)</span><br><span class="hljs-comment"># d, drop &lt;commit&gt; = 丢弃commit</span><br><span class="hljs-comment"># l, label &lt;label&gt; = 用名称标记当前HEAD</span><br><span class="hljs-comment"># t, reset &lt;label&gt; = 重置到某个label</span><br><span class="hljs-comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span><br><span class="hljs-comment"># .       create a merge commit using the original merge commit&#x27;s</span><br><span class="hljs-comment"># .       message (or the oneline, if no original merge commit was</span><br><span class="hljs-comment"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span><br></code></pre></td></tr></table></div></figure>

<p>可以发现我们使用<code>r, reword</code>就可以达到目的了。<br>我们修改 b 的操作 tag 为 r，这个时候不用修改 commit 信息，在后面修改。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607321592158-image.png" >
      <br>接下来会自动进入页面，我们修改 b 的 commit 信息<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607321620974-image.png" >
      <br>验证下结果，明显成功了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://s21.ax1x.com/2024/06/06/pkYoA6e.png" >
      </p>

        <h3 id="删除一个-commit-信息"   >
          <a href="#删除一个-commit-信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除一个-commit-信息" class="headerlink" title="删除一个 commit 信息"></a>删除一个 commit 信息</h3>
      <p>比如此处我要删除 C 的提交信息，<strong>但是保留 C 的文件修改</strong>。我们经过上一步，我们使用 f 就是了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-7/1607322289030-image.png" >
      <br>结果如下：<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://s21.ax1x.com/2024/06/06/pkYoUkq.png" >
      <br>发现 C 提交的信息的删除了，但是 C 提交的文件修改还是存在的，所造成的文件修改最终归于 C 的上一个提交：<code>b-edit</code>去了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-12-8/1607407070868-image.png" >
      </p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>简单总结了下平常在工作中遇到的修改 Git commit 信息的方法，留以备忘。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/hello-world.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>

        <h2 id="Quick-Start"   >
          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>
      
        <h3 id="Create-a-new-post"   >
          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></div></figure>
<span id="more"></span>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Run-server"   >
          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Generate-static-files"   >
          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Deploy-to-remote-sites"   >
          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></div></figure>

<p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
  </entry>
  <entry>
    <title>hexo添加动态背景</title>
    <url>/posts/hexo-add-dynamic-background.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="发现"   >
          <a href="#发现" class="heading-link"><i class="fas fa-link"></i></a><a href="#发现" class="headerlink" title="发现"></a>发现</h2>
      <p>本来想为 hexo 设置背景图片，又不想单调的只有一张图，碰巧发现知乎有个问题：<span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/21168322" >哪里有获取随机图片的服务接口？</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，因此就准备加到博客里面，这样也好看一些。</p>
<p>注意这张图的地址是<code>api</code>，返回是随机的。<br>
        <img     class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://unsplash.it/1920/1080/?random"  style="" >
      </p>
<span id="more"></span>


        <h2 id="资源整理"   >
          <a href="#资源整理" class="heading-link"><i class="fas fa-link"></i></a><a href="#资源整理" class="headerlink" title="资源整理"></a>资源整理</h2>
      
        <h3 id="免费的-api"   >
          <a href="#免费的-api" class="heading-link"><i class="fas fa-link"></i></a><a href="#免费的-api" class="headerlink" title="免费的 api"></a>免费的 api</h3>
      <p>如果有兴趣可以右键打开试试呢</p>
<ul>
<li><span class="exturl"><a class="exturl__link"   href="https://unsplash.it/1920/1080/?random" >https://unsplash.it/1920/1080/?random</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://api.ixiaowai.cn/gqapi/gqapi.php" >https://api.ixiaowai.cn/gqapi/gqapi.php</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature" >https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://source.unsplash.com/user/erondu/1920x1080" >https://source.unsplash.com/user/erondu/1920x1080</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="http://lorempixel.com/1920/1080/" >http://lorempixel.com/1920/1080/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://picsum.photos/1920/1080" >https://picsum.photos/1920/1080</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://uploadbeta.com/api/pictures/random/" >https://uploadbeta.com/api/pictures/random/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" >https://uploadbeta.com/api/pictures/random/?key…</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://img.xjh.me/random_img.php?type=bg&ctype=nature&return=302&device=pc" >https://img.xjh.me/random_img.php</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>

        <h3 id="CSS-设置"   >
          <a href="#CSS-设置" class="heading-link"><i class="fas fa-link"></i></a><a href="#CSS-设置" class="headerlink" title="CSS 设置"></a>CSS 设置</h3>
      <p>我的主题是Hexo的Next主题，我是在<code>themes\next\layout\_layout.swig</code>的_layout.swig的body上加了个样式<code>bosy-class</code></p>
<p>然后在<code>themes\next\source\css\main.styl</code>中添加如下样式：</p>
<figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 媒体查询，屏幕太窄了显示背景图片也无用 */</span><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">992px</span>)&#123;<br>  // <span class="hljs-selector-tag">body</span> 处理<br>  <span class="hljs-selector-class">.body-class</span>&#123;<br>    <span class="hljs-comment">/* 背景图片的地址 */</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://api.dujin.org/bing/1920.php</span>);<br>    <span class="hljs-comment">/* 不重复 */</span><br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>    <span class="hljs-comment">/* 背景图像的位置固定 */</span><br>    <span class="hljs-attribute">background-attachment</span>: fixed;<br>    <span class="hljs-comment">/* 背景居中 */</span><br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>    <span class="hljs-comment">/* 全部覆盖 如果图片小会拉伸，图片大会压缩*/</span><br>    <span class="hljs-attribute">background-size</span>: cover;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>接下来就可以看到背景图片的地址每次都会刷新变化了。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议原理笔记</title>
    <url>/posts/http-protocol-principle-notes.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200114.png" >
      </p>

        <h2 id="导学"   >
          <a href="#导学" class="heading-link"><i class="fas fa-link"></i></a><a href="#导学" class="headerlink" title="导学"></a>导学</h2>
      
        <h3 id="现状"   >
          <a href="#现状" class="heading-link"><i class="fas fa-link"></i></a><a href="#现状" class="headerlink" title="现状"></a>现状</h3>
      <ul>
<li>现在的 WEB 开发不理解 HTTP</li>
<li>HTTP 相当的重要</li>
<li>提升自身价值<span id="more"></span>

</li>
</ul>

        <h3 id="简单的例子"   >
          <a href="#简单的例子" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3>
      <ul>
<li><p>输入 URL 打开网页</p>
</li>
<li><p>AJAX 获取数据</p>
</li>
<li><p>img 标签加载图片</p>
</li>
<li><p>Cache-control 的 public 属性和 private 属性，must-revalidate 属性，no-cache，no-store</p>
</li>
<li><p>缓存验证</p>
<ul>
<li><p>last-modified 和 if-modified-since 配合验证</p>
</li>
<li><p>etag 和 if-modified-since 配合验证</p>
</li>
<li><p>CORS 跨域</p>
</li>
<li><p>浏览器输入 URL 后 HTTP 请求返回全过程（下图依据 performance 对象）<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200127.png" >
      </p>
</li>
</ul>
</li>
</ul>

        <h2 id="网络协议"   >
          <a href="#网络协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2>
      
        <h3 id="网络模型介绍"   >
          <a href="#网络模型介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络模型介绍" class="headerlink" title="网络模型介绍"></a>网络模型介绍</h3>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200237.png" >
      <br>本文主要讲 HTTP（应用层），HTTP 基于 TCP/IP 协议</p>

        <h4 id="底三层"   >
          <a href="#底三层" class="heading-link"><i class="fas fa-link"></i></a><a href="#底三层" class="headerlink" title="底三层"></a>底三层</h4>
      <ul>
<li><p>物理层：定义物理设备如何传输数据</p>
<p>硬件、网卡端口、光缆</p>
</li>
<li><p>数据链路层：通信的实体间建立数据链路连接</p>
<p>软件服务通过物理设备创建电路的连接</p>
</li>
<li><p>网络层：为数据在节点之间传输创建逻辑链路</p>
<p>访问百度的寻址的逻辑关系</p>
</li>
</ul>

        <h4 id="传输层"   >
          <a href="#传输层" class="heading-link"><i class="fas fa-link"></i></a><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4>
      <ul>
<li><p>向用户提供可靠的端到端（End-to-End）服务</p>
</li>
<li><p>传输层向高层屏蔽了下层数据通信的细节</p>
<p>比如本地与百度服务器之间的连接，两端如何传输数据，传输数据的方式；根据数据的大小来分包、分片，接收端的组装，两者的协议的定义。</p>
</li>
</ul>

        <h4 id="应用层"   >
          <a href="#应用层" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4>
      <p>HTTP 就在应用层实现</p>
<ul>
<li>为软件提供了很多服务</li>
<li>构建与 TCP/IP 协议只上</li>
<li>屏蔽了网络传输的相关细节</li>
</ul>

        <h3 id="HTTP-协议发展历史"   >
          <a href="#HTTP-协议发展历史" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-协议发展历史" class="headerlink" title="HTTP 协议发展历史"></a>HTTP 协议发展历史</h3>
      
        <h4 id="HTTP-0-9"   >
          <a href="#HTTP-0-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h4>
      <ul>
<li>只支持 GET 请求</li>
<li>没有 HEADER 等描述数据的信息</li>
<li>服务器发送完毕关闭 TCP 连接</li>
</ul>

        <h4 id="HTTP-1-0"   >
          <a href="#HTTP-1-0" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h4>
      <ul>
<li>增加很多命令（POST,HEADER 等）</li>
<li>增加 status code 和 header</li>
<li>多字符集支持、多部分发送、权限、缓存等等</li>
</ul>

        <h4 id="HTTP-1-1"   >
          <a href="#HTTP-1-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h4>
      <ul>
<li><p>持久连接</p>
<p>1.0 版本一个请求创建一次 TCP 连接，服务端返回了 TCP 连接就关闭，成本较高；持久连接就不用关闭。</p>
</li>
<li><p>pipeline</p>
<p>同一个链接发送多个请求，发送的请求在一个连接发送多个，服务端进来的请求需要串行排队</p>
</li>
<li><p>增加 host 和其他一些命令</p>
<p>有了 host，就可以在同一台物理服务器上跑多个不同 WEB 服务</p>
</li>
</ul>

        <h4 id="HTTP-2"   >
          <a href="#HTTP-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-2" class="headerlink" title="HTTP 2"></a>HTTP 2</h4>
      <ul>
<li><p>所有的数据都是以二进制传输</p>
<p>之前的方式大部分是字符串，因此数据的分片方式是不同的，HTTP2 中都是帧传输。</p>
</li>
<li><p>同一个连接里面发送多个请求不再需要按照顺序</p>
<p>并行极大提高了效率</p>
</li>
<li><p>头信息压缩及推送等提高效率的功能</p>
<p>HTTP2 解决 HTTP1 中性能低下的问题而设计的。</p>
<ul>
<li>头信息压缩</li>
</ul>
<p>HTTP1 中发送请求和返回请求很多的 HTTP 头都是必须要完整的发送和返回的，而这部分头信息比如 header、content-type、cache-control 这些字段是用<strong>字符串</strong>形式保存的，所以占用一定的<strong>带宽</strong>。而在 HTTP2 中就会对头信息压缩，减少带宽使用。</p>
<ul>
<li>推送</li>
</ul>
<p>常规的客户端为主动方，服务端为被动方。但是在 HTTP2 有推送功能，服务端可以主动发起数据传输。常规的 html 网页是请求 html，再请求其中的资源；HTTP2 的话可以在你请求 html 的时候主动推送资源到客户端，达到并行的效果，提高传输效率。</p>
</li>
</ul>

        <h4 id="HTTP-三次握手"   >
          <a href="#HTTP-三次握手" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-三次握手" class="headerlink" title="HTTP 三次握手"></a>HTTP 三次握手</h4>
      <p>在客户端和服务器在进行 HTTP 的发送和返回过程中，会建立 TCP connection。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200251.png" >
      <br>HTTP 不存在连接的概念，只存在请求和响应的概念。请求和响应都传输数据包，会经过一个传输的通道，在 TCP 就创建了这样一个连接（通道），这个连接会保持在那里，请求是在这个基础之上发送的。在 TCP 连接上可以发送多个 HTTP 请求。</p>
<p>这个模式在不同的版本里面有所差别</p>
<ul>
<li>HTTP1.0 TCP 连接在 HTTP 请求创建的时候创建服务端想赢回来之后就会关闭</li>
<li>HTTP1.1 可以声明 TCP 连接保持状态，多个 HTTP 请求都通过这个连接。TCP 连接创建的过程中有三次握手消耗，减少开销。</li>
<li>HTTP2.0 并发 HTTP 请求。比如：同个用户在请求一个网页的时候只用一个 TCP 连接。</li>
</ul>

        <h5 id="三次握手时序图"   >
          <a href="#三次握手时序图" class="heading-link"><i class="fas fa-link"></i></a><a href="#三次握手时序图" class="headerlink" title="三次握手时序图"></a>三次握手时序图</h5>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200258.png" >
       1.客户端发起创建数据包的请求。SYN 标志位：创建请求的数据包，Seq=X</p>
<p>2.服务端接收，开启 TCP SOCKET 端口。返回给客户端：SYN 标志位；ACK:接受到的 Seq+1，为 X+1；Seq：为服务端的 Seq。</p>
<p>3.服务端发送。发送 ACK=y+1，Seq=Z。</p>
<p>三次握手的目的:防止服务端开启无用的连接。网络服务根据网络传输数据的二次校验，是否有必要开启，数据是否丢失等等。规避网络传输过程延时、丢失等导致的服务器开销。</p>

        <h5 id="三次握手数据包举例"   >
          <a href="#三次握手数据包举例" class="heading-link"><i class="fas fa-link"></i></a><a href="#三次握手数据包举例" class="headerlink" title="三次握手数据包举例"></a>三次握手数据包举例</h5>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200307.png" >
      </p>

        <h4 id="URI、URL、URN"   >
          <a href="#URI、URL、URN" class="heading-link"><i class="fas fa-link"></i></a><a href="#URI、URL、URN" class="headerlink" title="URI、URL、URN"></a>URI、URL、URN</h4>
      <ul>
<li>URI：统一资源标志符（Identity），用来唯一标识互联网上的信息资源，包含 URL、URN</li>
<li><span class="exturl"><a class="exturl__link"   href="https://en.wikipedia.org/wiki/URL" >URL</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：统一资源定位器（Locator）<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js">比如：http：<span class="hljs-comment">//user:pass@host.com:80/path?query=string#hash</span><br></code></pre></td></tr></table></div></figure>
具体的格式如下<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200317.png" >
      </li>
<li>URN：永久统一资源定位符，资源移动之后还可以找到，目前还没有什么好的方案</li>
</ul>

        <h4 id="HTTP-报文格式"   >
          <a href="#HTTP-报文格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-报文格式" class="headerlink" title="HTTP 报文格式"></a>HTTP 报文格式</h4>
      ]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>培养自己的主人翁意识</title>
    <url>/posts/cultivate-your-own-sense-of-ownership.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="缘起"   >
          <a href="#缘起" class="heading-link"><i class="fas fa-link"></i></a><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2>
      <p>成长和沉淀，听起来是那么的空洞，其实本质还是在于内心的意识和格局的变化。</p>
<p>有时候我们经常抱怨，要是当初就想到这一点就好了；比如：当初应该早一点开始投资基金、股票，早一点阅读一些关于某某方面的书籍等等。我想这不是在于少数，我也不时有这种“马后炮”想法。归其原因，有可能是我们的社交环境造成了思维局限，还有就是自己的处理事情主观能动性。</p>
<p>而今天我想讲的就是一种“主人翁意识”。</p>
<span id="more"></span>


        <h2 id="经过"   >
          <a href="#经过" class="heading-link"><i class="fas fa-link"></i></a><a href="#经过" class="headerlink" title="经过"></a>经过</h2>
      <p>前些日子在做一个需求任务，我已经知道我这部分的具体工作是什么，也已经按部就班的开展了，也知道与我后端的工作是什么。但是需求里面却没有看到后端前去建任务。当时想着，<strong>反正这个部分不是我的任务，因为不是负责，不用管了</strong>。因此就没有后端同事往上面添加任务。</p>
<p>不久，在需求迭代会上，总结前面的工作，才发现后端同事貌似还不知道这件事情，还没有计划工时，还没有排期。然后临时安排人员，计划时间。</p>
<p>这虽然是一个小事情，功能也不算复杂，加紧做了就是了。但是倘若之前我发现了就提出这个任务及时安排人员呢，说不定现在已经做完了。</p>
<p>其实，在这个小细节中就体现了你所处的思考角度。我此时仅仅扮演的是执行者的角度，别人叫我做什么任务我就做什么任务。倘若我再费心一点点，问一下后端，他们就会安排人，也体现了我对这件事情的责任感，整体任务的进度也就不同了。</p>

        <h2 id="体会"   >
          <a href="#体会" class="heading-link"><i class="fas fa-link"></i></a><a href="#体会" class="headerlink" title="体会"></a>体会</h2>
      <p>以一种执行者的角度去工作，一直都是做事情，做什么事情，时间节点是什么。别人不安排我就不用做，别人不说我也不知道。倘若以一种主人翁的角度去做事情，会想的是为什么做，怎么做，怎么去协调资源，最终把事情做好。如果发现了问题就会去协调咨询和安排，因为这个时候已经站在一种管理者的维度了。这样去处理事情，自己扮演的也是一种项目推动者的角色。</p>
<p>这就是主人翁的意识，摆正自己的位置，端正自己的态度，站在自己的上面一层思考问题；这样，一方面推进了任务进度，另一方面也强调了自己在团队中的重要性。在工作中有这样的意识往往也会得到同事和领导的信赖，也是区别于常人一种不错的心理素质。</p>
]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql基础知识（一）</title>
    <url>/posts/mysql-basic-knowledge-1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h3 id="目的"   >
          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a href="#目的" class="headerlink" title="目的"></a>目的</h3>
      <p>学习一些基本的 mysql 知识</p>

        <h3 id="预备"   >
          <a href="#预备" class="heading-link"><i class="fas fa-link"></i></a><a href="#预备" class="headerlink" title="预备"></a>预备</h3>
      
        <h4 id="安装-mysql"   >
          <a href="#安装-mysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h4>
      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/u014416239/article/details/52446608" >安装教程地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="终端准备"   >
          <a href="#终端准备" class="heading-link"><i class="fas fa-link"></i></a><a href="#终端准备" class="headerlink" title="终端准备"></a>终端准备</h4>
      <p>我这里使用的是<span class="exturl"><a class="exturl__link"   href="https://cmder.net/" >cmder</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，并且设置为管理员模式，加上<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/hicoldcat/article/details/64904652" >右键快捷打开</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，挺方便的。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200457.png" >
      </p>
<p>在准备工作完成之后，正式开始学习。</p>
<span id="more"></span>


        <h3 id="基础命令"   >
          <a href="#基础命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3>
      <ul>
<li>启动停止</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">// 启动mysql（如果出现错误应该以**管理员模式**运行终端，mysql80lzk为我安装的时候的**服务名**）<br>net start mysql80lzk<br>net stop mysql80lzk // 停止mysql<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200506.png" >
      </p>
<ul>
<li>命令行进入</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">mysql -h 127.0.0.1 -P 3306 -uroot -p123456 // 安装的时候设置的(-u)账号(-p)密码<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200922.png" >
      </p>
<ul>
<li>列出数据库</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show databases;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200527.png" >
      </p>
<ul>
<li>查看表</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">use mysql;// 选择数据库<br>show tables;<br>// 或者<br>show tables from mysql;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200743.png" >
      </p>
<ul>
<li>显示当前的数据库</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> database();<br></code></pre></td></tr></table></div></figure>

<ul>
<li>查询表结构</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">DESC user; // user 是表结构中显示的<br></code></pre></td></tr></table></div></figure>


        <h3 id="数据完整性"   >
          <a href="#数据完整性" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3>
      <p>为了实现数据完整性，需要检验数据库表中的每行和每列数据是否符合要求。在创建表的时候，应该保证以后的数据输入是正确的，错误的数据不允许输入。</p>

        <h4 id="数据类型"   >
          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200751.png" >
      <br><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/mysql/mysql-data-types.html" >Mysql 列类型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="默认值"   >
          <a href="#默认值" class="heading-link"><i class="fas fa-link"></i></a><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4>
      <p>用户没有指定值得情况下提供一个预先设定的值</p>

        <h4 id="非空约束"   >
          <a href="#非空约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4>
      <p>指定某个字段不能不输入，必须提供一个非空的值。</p>

        <h3 id="实体完整性"   >
          <a href="#实体完整性" class="heading-link"><i class="fas fa-link"></i></a><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3>
      
        <h4 id="主键约束"   >
          <a href="#主键约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4>
      <ul>
<li>表中一列或者几列组合的值能用来唯一标识表中的每一行，这样的列或者列组合称为表的主键，主键表的数据不同重复。</li>
<li>如果两列或者多列组合起来唯一标识表中的每一行，则该主键又称为”组合键”</li>
</ul>
<p>主键选择标准</p>
<p>1.最少性 尽量选择单个建为主键</p>
<p>2.稳定性，更新频率少，稳定</p>

        <h4 id="外键"   >
          <a href="#外键" class="heading-link"><i class="fas fa-link"></i></a><a href="#外键" class="headerlink" title="外键"></a>外键</h4>
      <p>成绩表中的学生 ID 应该在学生表中是存在的，我们应该让成绩表中的 ID 只能引用学生表中的 ID，它们的值应该是一一对应的。也就是说成绩表中的 ID 是成绩表中的外键，对应学生表的主键，这样就可以保证数据的引用完整性。</p>
<p>即：一个表的外键引用了其他表的主键</p>

        <h4 id="唯一约束"   >
          <a href="#唯一约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4>
      <p>唯一约束是指某个字段值是唯一的，在所有的记录中不能有重复的值。比如身份证号。</p>

        <h4 id="标识列"   >
          <a href="#标识列" class="heading-link"><i class="fas fa-link"></i></a><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h4>
      <ul>
<li>当表中没有合适的列作为主键时可以考虑增加标识列，标识列是一个无实际业务含义的列，仅仅用来区分每条记录。</li>
<li>标识列的值是自动生成的，不能在该列上输入数据</li>
</ul>

        <h4 id="外键约束"   >
          <a href="#外键约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4>
      <p>一个表的外键引用了其他表的主键。比如成绩表中的学生 ID 会引用学生表的主键，课程 ID 会引用成绩表的主键。</p>
<ul>
<li>主表没有记录，子表中不能添加相应的记录</li>
<li>修改和删除主表记录不能让子表记录孤立，必须相应修改和删除</li>
</ul>

        <h3 id="数据操作"   >
          <a href="#数据操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3>
      
        <h4 id="创建学生表"   >
          <a href="#创建学生表" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建学生表" class="headerlink" title="创建学生表"></a>创建学生表</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT ,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>`age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,<br>`city` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;北京&#x27;</span><br>);<br></code></pre></td></tr></table></div></figure>


        <h4 id="增加身份证字段"   >
          <a href="#增加身份证字段" class="heading-link"><i class="fas fa-link"></i></a><a href="#增加身份证字段" class="headerlink" title="增加身份证字段"></a>增加身份证字段</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 在city后面增加一个字段，<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> `idcard` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">NULL</span> AFTER `city`;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 修改一个字段为carchar(<span class="hljs-number">18</span>)<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` MODIFY <span class="hljs-keyword">COLUMN</span> `idcard` <span class="hljs-type">varchar</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200802.png" >
      </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 删除身份证字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student`<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> `idcard`;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200923200809.png" >
      </p>

        <h4 id="添加约束"   >
          <a href="#添加约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 主键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (`id`);<br><span class="hljs-comment">-- 唯一约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> INDEX `uq_idcard` (`idcard`) ;<br><span class="hljs-comment">-- 默认约束</span><br> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` MODIFY <span class="hljs-keyword">COLUMN</span> `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;北京&#x27;</span>;<br></code></pre></td></tr></table></div></figure>


        <h3 id="准备数据"   >
          <a href="#准备数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3>
      <p>创建数据库</p>
<figure class="highlight pgsql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs pgsql">创建学生表，如果前面没创建可以创建<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br> `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br> `<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> `idcard` <span class="hljs-type">varchar</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br> <span class="hljs-keyword">PRIMARY KEY</span> (`id`)<br>);<br><br> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `course` (<br> `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br> `<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">PRIMARY KEY</span> (`id`) );<br></code></pre></td></tr></table></div></figure>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 学习笔记</title>
    <url>/posts/mysql-study-note.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>用一篇文章来记录我的Mysql学习笔记。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/20220904180157.png" >
      </p>
<span id="more"></span>

        <h2 id="基本"   >
          <a href="#基本" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本" class="headerlink" title="基本"></a>基本</h2>
      <p>树状结构</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql.png"  alt="Untitled">
      </p>
<ol>
<li>一个节点只能有一个父节点，根结点除外，不然需要引入冗余节点</li>
<li>查询速度满，从根节点开始，树状结构</li>
<li>每个父节点不能脱离父节点单独存在，父节点删除，自节点全部删除</li>
</ol>
<p>关系型 表结构</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql1.png"  alt="关系型数据库">
      </p>
<p>关系型数据库</p>
<p>不会有冗余数据，删除一条数据，不会影响其他</p>

        <h2 id="安装mysql"   >
          <a href="#安装mysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/mysql/mysql-install.html" >安装mysql</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="链接和断开"   >
          <a href="#链接和断开" class="heading-link"><i class="fas fa-link"></i></a><a href="#链接和断开" class="headerlink" title="链接和断开"></a>链接和断开</h2>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u root -p1234qwer!<br></code></pre></td></tr></table></div></figure>

<p>退出 </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span>； quit；\q<br></code></pre></td></tr></table></div></figure>

<p>显示数据库 </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show databases;<br></code></pre></td></tr></table></div></figure>

<p>3.1 informationschema</p>
<p>保存着关于MySQL服务器所维护的所有其他数据库的信息。</p>
<p>如数据库名，数据库的表，表栏的数据类型与访问权限等</p>
<p>3.2 mysql</p>
<p>MySaL系统数据库，保存了登录用户名，密码，以及每个用户的权限等等</p>
<p>3.3 performance_schema</p>
<p>用来保存数据库服务器性能的参数</p>
<p>3.4 sys</p>
<p>这个库是通过视图的形式把information schema 利lperformence schema结合起来，查询出更加令人容易理解的数据</p>

        <h2 id="其他概念"   >
          <a href="#其他概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2>
      <p>学习数据库的增删改查（数据库，数据表，数据）</p>
<p>SQL</p>
<p>SQL语句功能划分</p>
<p>DDL：数据定义语句</p>
<p>用来定义数据库对象：创建库，表，列等。</p>
<p>DML：数据操作语句</p>
<p>用来操作数据库表中的记录</p>
<p>DQL：数据查询语句</p>
<p>用来查询数据</p>
<p>DCL：数据控制语句</p>
<p>用来定义访问权限和安全级别</p>
<p>数据类型分类</p>
<ol>
<li>数值类型</li>
<li>字符串类型</li>
<li>日期和时间类型</li>
</ol>
<p>MySQL中常用的数据类型如下：</p>
<p>Double 浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</p>
<p>Char：固定长度字符串类型：char (10) ‘ Inj</p>
<p>Varchar：可变长度字符串类型：varchar(10) ‘ Inj text：字符串类型：</p>
<p>Blob：二进制类型：</p>
<p>日期：日期类型，格式为：yyyyy-MM-dd；</p>
<p>时间：时间类型，格式为：hh：mm：ss</p>
<p>Datetime：日期时间类型 yyyy-M-dd hh：mm：Ss</p>
<p>注意点：在mysql中，字符串类型和日期类型都要用单引号括起来。‘Inj’ ‘2022-02-02’</p>

        <h2 id="数据库的创建"   >
          <a href="#数据库的创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库的创建" class="headerlink" title="数据库的创建"></a>数据库的创建</h2>
      <p>电脑数据的编码，gbk存，utf8存？，<strong>创建的时候应该指定编码</strong></p>
<p>创建数据库</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create database name1;<br>// 没有就创建，有的话就报错<br></code></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create database <span class="hljs-keyword">if</span> not exists name1;<br>// 有就跳过，没有就创建 good<br></code></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create database <span class="hljs-keyword">if</span> not exists name1 charset=字符集;<br>// 指定字符集<br>create database <span class="hljs-keyword">if</span> not exists test3 charset=utf8;<br></code></pre></td></tr></table></div></figure>

<p>注意关键字</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create database <span class="hljs-keyword">if</span> not exists `create`  charset=utf8;<br>// `create`包裹起来<br>// 注意点：如果数据库的名称是SQL的关键字或者是一些特殊字符中!@这个时候就需要用反引号括起米<br></code></pre></td></tr></table></div></figure>

<p>查看数据库</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show databases;<br></code></pre></td></tr></table></div></figure>

<p>查看数据库全局默认编码</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show variables like <span class="hljs-string">&#x27;character_set_%&#x27;</span>;<br></code></pre></td></tr></table></div></figure>

<p>查看一个数据库编码</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show create database name;<br></code></pre></td></tr></table></div></figure>

<blockquote>
<p>| test1    | CREATE DATABASE <code>test1</code> /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci <em>/ /</em>!80016 DEFAULT ENCRYPTION=’N’ */ |</p>
</blockquote>

        <h2 id="数据库的删除"   >
          <a href="#数据库的删除" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库的删除" class="headerlink" title="数据库的删除"></a>数据库的删除</h2>
      <p>删除数据库</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">drop database name;<br>// 没有这个数据库会报错<br>// Can<span class="hljs-string">&#x27;t drop database &#x27;</span>name<span class="hljs-string">&#x27;; database doesn&#x27;</span>t exist<br></code></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">drop database <span class="hljs-keyword">if</span> exists name;<br>// 没有这个数据库不会报错，跳过<br></code></pre></td></tr></table></div></figure>


        <h2 id="数据库的修改和查看"   >
          <a href="#数据库的修改和查看" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库的修改和查看" class="headerlink" title="数据库的修改和查看"></a>数据库的修改和查看</h2>
      <p>修改数据库的字符集</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">alter database name charset=字符集;<br>// alter database test1 charset=gbk;<br></code></pre></td></tr></table></div></figure>

<p>查看数据库</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show create database name; // 查看字符集<br>show databases; // 查看数据库<br></code></pre></td></tr></table></div></figure>


        <h2 id="表的增删改查"   >
          <a href="#表的增删改查" class="heading-link"><i class="fas fa-link"></i></a><a href="#表的增删改查" class="headerlink" title="表的增删改查"></a>表的增删改查</h2>
      <p><strong>注意 ： 需要制定一个数据库</strong></p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">use name；<br></code></pre></td></tr></table></div></figure>

<p>查看数据库中的表</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">show tables;<br></code></pre></td></tr></table></div></figure>

<p>创建表</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table name(<br>	字段名称 数据类型，<br>  字段名称 数据类型，<br>  字段名称 数据类型，<br>);<br>// 没这个表会成功，有这个表会失败<br>create table stu(<br>	<span class="hljs-built_in">id</span> int,<br>	name text	<br>);<br>// 修复<br>create table <span class="hljs-keyword">if</span> not exists person(<br>	<span class="hljs-built_in">id</span> int,<br>	name text	<br>);<br></code></pre></td></tr></table></div></figure>

<p>查看制定表的结构</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">desc name;<br></code></pre></td></tr></table></div></figure>

<blockquote>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql2.png"  alt="Untitled">
      </p>
</blockquote>

        <h2 id="删除表"   >
          <a href="#删除表" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2>
      <p>制定一个表</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">use name；<br></code></pre></td></tr></table></div></figure>

<p>删除表</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">drop table name;// 没有就报错<br>drop table <span class="hljs-keyword">if</span> exists name; // 兼容<br></code></pre></td></tr></table></div></figure>


        <h2 id="修改表"   >
          <a href="#修改表" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2>
      <p>修改表名</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">rename table 原始名称 to 新名称;<br>rename table stu to person;<br></code></pre></td></tr></table></div></figure>

<p>添加字段</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">alter table 表名 add 新增字段名称 类型 [位置];<br>alter table person add age int;// 默认字段放在后面<br>alter table person add score <span class="hljs-built_in">float</span> first; //  first 放到最前面<br>alter table person add phone int after name; // name 后面<br></code></pre></td></tr></table></div></figure>

<ul>
<li>alter table person add age int;  
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql3.png"  alt="Untitled">
      </li>
<li>alter table person add score float first;  
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql4.png"  alt="Untitled">
      </li>
<li>alter table person add phone int after name;  
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql5.png"  alt="Untitled">
      </li>
</ul>
<p>删除字段</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">alter table 表名 drop 字段名称;<br>alter table person drop phone;<br></code></pre></td></tr></table></div></figure>

<p>修改字段</p>
<p>1.修改数据类型</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">alter table 表名 modify 需要修改的字段名称 新的数据类型; <br>alter table person modify score double;<br></code></pre></td></tr></table></div></figure>

<p>2.修改字段名称和数据类型</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">alter table 表名 change 原始字段名称 新字段名称 新的数据类型;<br>alter table person change age address text;<br></code></pre></td></tr></table></div></figure>


        <h2 id="存储引擎"   >
          <a href="#存储引擎" class="heading-link"><i class="fas fa-link"></i></a><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2>
      <p>MySQL中有三种存储引擎，分别是：</p>
<ul>
<li>MyISAM：安全性低，但不支持事务和外键，适合频繁插入和查询的应用</li>
<li>InnoDB(默认）：安全性高，支持事务和外键，适合对安全性，数据完整性要求较高的应用</li>
<li>Memory：访问速度极快，但不会永久存储数据，适合对读写速度要求较高的应用</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table stu(<br>    <span class="hljs-built_in">id</span> int,<br>    name text<br>)engine=引擎名称;<br></code></pre></td></tr></table></div></figure>

<p>不同引擎的本质</p>
<p>数据库的本质就是文件，只要创建一个数据库，就会创建文件夹</p>
<p>创建一张表，就会在指定数据库目录创建一个文件，这个文件会保存结构</p>
<div class="table-container"><table>
<thead>
<tr>
<th>引擎</th>
<th>内容</th>
<th>存储文件</th>
</tr>
</thead>
<tbody><tr>
<td>InnoDB</td>
<td>创建表就会自动创建一个文件</td>
<td></td>
</tr>
<tr>
<td>.ibd 保存了这张表的结构</td>
<td>ibdata1,ibdata2</td>
<td></td>
</tr>
<tr>
<td>MyISAM</td>
<td>自动创建三个文件</td>
<td></td>
</tr>
<tr>
<td>.sdi 表的结构</td>
<td></td>
<td></td>
</tr>
<tr>
<td>.MYD 表中存储的数据</td>
<td></td>
<td></td>
</tr>
<tr>
<td>.MYI 表中索引</td>
<td>.MYD文件</td>
<td></td>
</tr>
<tr>
<td>Memory</td>
<td>创建.sdi文件，保存结构信息</td>
<td></td>
</tr>
<tr>
<td>将数据保存在内存中</td>
<td>内存</td>
<td></td>
</tr>
</tbody></table></div>
<p>修改表的存储引擎</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">alter table 表明 engine=名称;<br></code></pre></td></tr></table></div></figure>


        <h2 id="插入和更新数据"   >
          <a href="#插入和更新数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#插入和更新数据" class="headerlink" title="插入和更新数据"></a>插入和更新数据</h2>
      <p>插入数据</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">INSERT INTO table_name ( field1, field2,...fieldN )<br>                       VALUES<br>                       ( value1, value2,...valueN );<br>// <br>INSERT INTO person ( score,<span class="hljs-built_in">id</span>,name,address )<br>                       VALUES<br>                       ( 1.1,1,<span class="hljs-string">&quot;nihao&quot;</span>,<span class="hljs-string">&quot;china&quot;</span>);<br></code></pre></td></tr></table></div></figure>

<p>查看数据</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">SELECT column_name,column_name<br>FROM table_name<br>[WHERE Clause]<br>[LIMIT N][ OFFSET M]<br></code></pre></td></tr></table></div></figure>

<p>更新数据</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">UPDATE table_name SET field1=new-value1, field2=new-value2<br>[WHERE Clause]<br>//<br>// 不指定条件就更新整张表<br>update person <span class="hljs-built_in">set</span> score=2.2323;<br><br>// 指定更新 更新满足条件的<br>update person <span class="hljs-built_in">set</span> score=99.2 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=12;<br><br>// 可以多个条件指定<br>update person <span class="hljs-built_in">set</span> score=99.2 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=12 AND name=<span class="hljs-string">&quot;nihao2&quot;</span>;<br>update person <span class="hljs-built_in">set</span> score=99.2 <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=12 OR name=<span class="hljs-string">&quot;nihao&quot;</span>;<br><br>// 更新多个字段<br>update person <span class="hljs-built_in">set</span> score=991.2,address=<span class="hljs-string">&#x27;new address&#x27;</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=12 OR name=<span class="hljs-string">&quot;nihao&quot;</span>;<br><br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql6.png"  alt="Untitled">
      </p>

        <h2 id="查询表数据"   >
          <a href="#查询表数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询表数据" class="headerlink" title="查询表数据"></a>查询表数据</h2>
      <p>全部</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from 表名 [<span class="hljs-built_in">where</span>]<br></code></pre></td></tr></table></div></figure>

<p>指定字段</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> 字段1，字段2 from 表名 [<span class="hljs-built_in">where</span>]<br></code></pre></td></tr></table></div></figure>

<p>where 支持的运算符</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">=（等于）、！=（不等于）、《〉（不等于）、〈（小于）、〈=（小于等于）、＞（大于）、&gt;=（大于等于）；<br>IN (<span class="hljs-built_in">set</span>)；固定的范围值<br>PETWEEN•••AND：值在什么范围<br>IS NULL：（为空） IS NOT NULL （不为空<br>AND：与<br>OR；或<br>NOT：非<br></code></pre></td></tr></table></div></figure>

<p>比如</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from stu <span class="hljs-built_in">where</span> score <span class="hljs-keyword">in</span> (77, 88)<br></code></pre></td></tr></table></div></figure>


        <h2 id="删除表数据"   >
          <a href="#删除表数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h2>
      <p>删除数据</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">delete from 表名 [<span class="hljs-built_in">where</span> 条件];<br>// <span class="hljs-keyword">select</span> name from person <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>&gt;5;<br></code></pre></td></tr></table></div></figure>

<p>删除所有的数据</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">delete from 表名;<br></code></pre></td></tr></table></div></figure>


        <h2 id="Navicat"   >
          <a href="#Navicat" class="heading-link"><i class="fas fa-link"></i></a><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://www.navicat.com.cn/" >Navicat</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="数据类型"   >
          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2>
      <p>根据数据类型分配存储空间，正确的数据类型，可以合理分配存储空间，完整保存数据，更好的对数据库进行优化。</p>
<p> MySQL中有哪些数据类型？</p>

        <h4 id="整型类型"   >
          <a href="#整型类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#整型类型" class="headerlink" title="整型类型"></a><strong>整型类型</strong></h4>
      <ol>
<li>数字分为有符号还是无符号</li>
<li>超出返回会报错</li>
<li>默认为有符号 数据类型加上unsigned 变为无符号的</li>
<li>设置位宽</li>
</ol>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql7.png"  alt="Untitled">
      </p>
<p>设置位宽</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person2(<br>    <span class="hljs-built_in">id</span> int,<br>    age tinyint (2) zerofill <br>)<br></code></pre></td></tr></table></div></figure>

<p>无符号的类型指定</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person2(<br>    <span class="hljs-built_in">id</span> int,<br>    age tinyint unsigned<br>)<br></code></pre></td></tr></table></div></figure>


        <h4 id="浮点类型"   >
          <a href="#浮点类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#浮点类型" class="headerlink" title="浮点类型"></a><strong>浮点类型</strong></h4>
      <ul>
<li>占用空间不一样</li>
<li>小数的位数不同</li>
<li>保存数据的有效精度不同</li>
</ul>
<p>创建的时候指定小数位数</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">float</span>(m,d)<br>double(m,d)<br>// m 总的位数，d小数位数<br><br>create table person2(<br>    <span class="hljs-built_in">id</span> int,<br>    weight FLOAT (10, 6), height DOUBLE (10, 6)<br>)<br></code></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">// 精度<br>create table person3(<br>    <span class="hljs-built_in">id</span> int,<br>    weight FLOAT (20, 19),<br>    height DOUBLE (20, 19)<br>)<br><br>insert into person3 values (1, 1.12345678901234567890, 1.12345678901234567890);<br><br>weight: 1.1234568357467651000<br><br>height: 1.1234567890123457000<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql8.png"  alt="Untitled">
      </p>

        <h4 id="定点类型"   >
          <a href="#定点类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#定点类型" class="headerlink" title="定点类型"></a><strong>定点类型</strong></h4>
      <p>将数据分为证书和小数部分来存储，每个部分都是整数，精确存储，比较费资源</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person4(<br>    <span class="hljs-built_in">id</span> int,<br>    weight decimal (21,20)<br>    height decimal (21,20)<br>)<br><br>insert into person4 values (1, 1. 12345678901234567890, 1.12345678901234567890);<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql9.png"  alt="Untitled">
      </p>

        <h4 id="字符类型"   >
          <a href="#字符类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符类型" class="headerlink" title="字符类型"></a><strong>字符类型</strong></h4>
      <ul>
<li>保存的数据的容量不一样</li>
<li>char不会回收多余的字符，要多少给多少</li>
<li>varchar会回收多余的字符，用多少给多少</li>
<li>建议使用单引号</li>
<li>carchar理论可以存储65535字符，但是会随着当前数据库的字符集改变而改变</li>
<li>字符集utf8 一个字占三个字节，65535/3=21845</li>
<li>字符集gbk 一个字占两个字节，65535/2=32767</li>
</ul>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">例如：通过 char(2)存储存储数据’a’，存储的结果是’ a’；<br>例如：通过 varchar(2）存储存储数据’a’，存储的结果是’a；<br></code></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person(<br>    <span class="hljs-built_in">id</span> int,<br>    namel char (2),<br>    name2 varchar (2)<br>)<br><br>insert into person values (1, <span class="hljs-string">&#x27; a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br>insert into person values (1, <span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;34&#x27;</span>）;<br>insert into person values (1, <span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;def&#x27;</span>):#只要超出申请的范围就会报错<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql10.png"  alt="Untitled">
      </p>

        <h4 id="文本类型"   >
          <a href="#文本类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#文本类型" class="headerlink" title="文本类型"></a><strong>文本类型</strong></h4>
      <p>mysql中每一行存储的数据大小是有限制的，每一行最多65534字节</p>
<p>大文本类型 可以突破。大文本类型在表中并不会实际占用所能保存的字节数，而是利用10个字节引用了实际保存数据的地址. 占用的只有十个字节，存的是真实地址。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql11.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql12.png"  alt="Untitled">
      </p>

        <h4 id="枚举类型"   >
          <a href="#枚举类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#枚举类型" class="headerlink" title="枚举类型"></a><strong>枚举类型</strong></h4>
      <p>如果某个字段值只能取固定的某些值，几个固定值之中的几个</p>
<p>底层是通过整型来实现的</p>
<p>和其他的变成语言不通，其他的枚举是从0开始，mysql是从1开始.</p>
<p>因此也可以通过整数的形式去设置</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">// enum(v1,v2,...)<br>create table person(<br>    <span class="hljs-built_in">id</span> int,<br>    gender enum（<span class="hljs-string">&#x27;男&quot;,&quot;女&#x27;</span>）<br>)<br></code></pre></td></tr></table></div></figure>


        <h4 id="集合类型"   >
          <a href="#集合类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合类型" class="headerlink" title="集合类型"></a><strong>集合类型</strong></h4>
      <p>几个固定值中的几个</p>
<p>mysql也是通过整数的形式实现的</p>
<p>mysql集合类型按照2(n)实现的 方便位运算</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">//  <span class="hljs-built_in">set</span>(v1,v2,v3...)<br>create table person<br> <span class="hljs-built_in">id</span> int,<br> hobby <span class="hljs-built_in">set</span>( <span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;高尔夫球&#x27;</span>,<span class="hljs-string">&#x27;排球&#x27;</span>）<br>)<br><br>insert into person values (1,<span class="hljs-string">&#x27;篮球,足球,高尔夫球&#x27;</span>)<br></code></pre></td></tr></table></div></figure>


        <h4 id="日期类型"   >
          <a href="#日期类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#日期类型" class="headerlink" title="日期类型"></a><strong>日期类型</strong></h4>
      <p>时间需要单引号扩起来</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql13.png"  alt="Untitled">
      </p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person (<br>    <span class="hljs-built_in">id</span> int,<br>    filedl DATE,<br>    filed2 TIME,<br>    filed3 DATETIME<br>)<br>// 报错，时间需要单引号扩起来<br>insert into person values (1, 2020-02-02, 14:18:23, 2020-02-02 14:18:23);<br>// 完美<br>insert into person values (1, <span class="hljs-string">&#x27;2020-02-02&#x27;</span>, <span class="hljs-string">&#x27;14:18:23&#x27;</span>, <span class="hljs-string">&#x27;2020-02-02 14:18:23&#x27;</span>);<br></code></pre></td></tr></table></div></figure>


        <h4 id="布尔类型"   >
          <a href="#布尔类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#布尔类型" class="headerlink" title="布尔类型"></a><strong>布尔类型</strong></h4>
      <p>mysql boolean类型也是整型实现的，0假1真，底层本质是mysql是使用c c++实现，所以非0就是真</p>
<p>boolean 真假</p>
<p>数值类型</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql14.png"  alt="Untitled">
      </p>

        <h2 id="数据完整性-主键"   >
          <a href="#数据完整性-主键" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据完整性-主键" class="headerlink" title="数据完整性-主键"></a>数据完整性-主键</h2>
      <ol>
<li>什么是数据的完整性<br>保证保存到数据库中的数据都是正确的。</li>
<li>如何保证数据完整性？<br>数据的完整性可以分为三类：实体完整性、域完整性、参照完整性</li>
<li>实体完整性<ol>
<li>什么是实体？<br>表中的一行数据就是一个实体 (entity) </li>
<li>如何保证实体完整性？<br>保证实体完整性就是保证每一行数据的唯一性</li>
</ol>
</li>
<li>实体完整性的约束类型<ul>
<li>主键约束 (primary key)</li>
<li>唯一约束(unique)</li>
<li>自动增长列 (auto_ increment)</li>
</ul>
</li>
<li>主键约束 (primary key) 主键用于唯一标识表中的每一条数据，和现实生活中的身份证很像 <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person (<br>    <span class="hljs-built_in">id</span> int,<br>    name varchar (20)<br>);<br>// 下面的不会报错，但是会有问题，没有唯一性<br>insert into person values (1,<span class="hljs-string">&quot; Inj&quot;</span>);<br>insert into person values (1,<span class="hljs-string">&quot; Inj&quot;</span>);<br></code></pre></td></tr></table></div></figure>
 有效的 <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person (<br>    <span class="hljs-built_in">id</span> int primary key,<br>    name varchar (20)<br>)<br>// 下面的会报错，唯一性问题<br>insert into person values (1,<span class="hljs-string">&quot; Inj&quot;</span>)<br>insert into person values (1,<span class="hljs-string">&quot; Inj&quot;</span>)<br>// 或者<br>create table person (<br>    <span class="hljs-built_in">id</span> int,<br>    name varchar (20),<br>    primary key(<span class="hljs-built_in">id</span>)<br>) ;<br></code></pre></td></tr></table></div></figure>
 特征如下<ol>
<li>如果某一个字段设置为主键，那么字段的取值不能重复</li>
<li>如果设置为主键，不能是nul</li>
<li>一张表中只能有一个主键，不能出现多个主键</li>
<li>除了可以在字段的数据类型后添加，还可以通过在最后写上primary key(name)</li>
</ol>
</li>
</ol>

        <h2 id="数据完整性-联合主键"   >
          <a href="#数据完整性-联合主键" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据完整性-联合主键" class="headerlink" title="数据完整性-联合主键"></a>数据完整性-联合主键</h2>
      
        <h3 id="联合主键"   >
          <a href="#联合主键" class="heading-link"><i class="fas fa-link"></i></a><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h3>
      <p>我们通过将表中的某个永远不重复的字段设置为主键，从而达到保证每一行数据的唯一性(实体完整性）</p>
<p>但是在企业开发中有时候我们可能找不到不重复的字段，此时我们还可以通过联合主键的方式来保证每一行数据的唯一性</p>
<p> <strong>联合主键就是同时将多个字段作为一个主键来使用，</strong>多个字段的取值的组合不重复</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person(<br>	name varchar(20),<br>	age int,<br>  primary key(name,age)<br>)<br>insert into person values (<span class="hljs-string">&quot; Inj&quot;</span>,1)<br>insert into person values (<span class="hljs-string">&quot; Inj&quot;</span>,1)<br></code></pre></td></tr></table></div></figure>


        <h2 id="数据完整性-唯一约束"   >
          <a href="#数据完整性-唯一约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据完整性-唯一约束" class="headerlink" title="数据完整性-唯一约束"></a>数据完整性-唯一约束</h2>
      <p>唯一约束保证某个字段的值永远不重复</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">create table person(<br>	name varchar(20) unique,<br>	age int<br>)<br>insert into person values (<span class="hljs-string">&quot; Inj&quot;</span>,1)<br>insert into person values (<span class="hljs-string">&quot; Inj&quot;</span>,1)<br><br>// 多个unique<br>create table person(<br>	name varchar(20) unique,<br>	age int unique<br>)<br>insert into person values (<span class="hljs-string">&quot; Inj&quot;</span>,1)<br>insert into person values (<span class="hljs-string">&quot; Inj&quot;</span>,1)<br></code></pre></td></tr></table></div></figure>

<p>唯一约束和主键约束的异同</p>
<ol>
<li>同：被约束的字段的取值不能重复</li>
<li>异：主键在一张表中只有一个，唯一约束可以有多个 </li>
<li>唯一约束可以为空，主键不能为空</li>
</ol>

        <h2 id="数据完整性-自动增长约束"   >
          <a href="#数据完整性-自动增长约束" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据完整性-自动增长约束" class="headerlink" title="数据完整性-自动增长约束"></a>数据完整性-自动增长约束</h2>
      <p>自动增长约束的作用是让某个字段的取值从1开始递增，从而保证实体完整性</p>
<p>必须是主键才可以自动增长</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person (<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 下面的会报错，唯一性问题<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,&quot; Inj&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">default</span>,&quot; Inj&quot;);<br></code></pre></td></tr></table></div></figure>

<p>default 或者null 就自动关增长</p>
<p>在企业开发中如何选择主键呢？最少性和稳定性</p>
<p>最少性：能用一个字段作为主键，就不要使用多个字段</p>
<p>稳定性：能用不被操作（修改）的字段作为主键，就不要使用会被操作的字段作为主键</p>
<p>一般情况会定义id字段，并且字段为整形，自动增长，设置为主键</p>

        <h2 id="实体完整性"   >
          <a href="#实体完整性" class="heading-link"><i class="fas fa-link"></i></a><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2>
      <p>没有这些的时候 添加这些</p>
<p>如何修改约束</p>
<p>1.如何修改主键约束</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(字段);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person (<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot; Inj&quot;)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot; Inj&quot;)<br></code></pre></td></tr></table></div></figure>

<p>2.如何修改唯一约束</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span>(字段);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person2 (<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot; Inj&quot;)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot; Inj&quot;)<br></code></pre></td></tr></table></div></figure>

<p>3.如何修改自动增长约束</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(字段);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 字段 数据类型 auto_increment;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person2 (<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,&quot; Inj&quot;)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">default</span>,&quot; Inj&quot;)<br></code></pre></td></tr></table></div></figure>


        <h2 id="域完整性"   >
          <a href="#域完整性" class="heading-link"><i class="fas fa-link"></i></a><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h2>
      <p>1.什么是域？</p>
<p>行数据中的每个单元格都是一个域</p>
<p>2.如何保证域的完整性？</p>
<p>保证域的完整性就是保证每个单元格数据的正确性</p>
<p>使用正确的数据类型</p>
<p>例如：人的年龄不可能超过255岁，而且不能是负数，所以我们就可以使用 TINYINT UNSIGNED</p>
<p>例如：人的性别只能是男/女，所以我们就可以使用枚举类型</p>
<p>例如：要存储比较多的文字，为了保证不超出每一行最大的存储限制，我们就可以使用大文本类型 </p>
<ul>
<li>使用非空约束 (not null)</li>
<li>使用默认值约束 (default)</li>
</ul>
<p>非空约束</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person (<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot; Inj&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></div></figure>

<p>默认值</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> person (<br>    id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;这是默认值&#x27;</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot; Inj&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> person <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-keyword">default</span>);<br></code></pre></td></tr></table></div></figure>

<p>注意点null，也不会使用默认值，使用default才会使用</p>

        <h2 id="表与表之间的关系"   >
          <a href="#表与表之间的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#表与表之间的关系" class="headerlink" title="表与表之间的关系"></a>表与表之间的关系</h2>
      <p>1.参照完整性</p>
<p>参照完整性又称引用完整性，主要用于保证多表之间引用关系的正确性</p>
<p>2.为什么要创建多张表？</p>
<p>示例：定义一张表保存2个学生3门课程的成绩</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql15.png"  alt="Untitled">
      </p>
<p>如果将所有的数据都放到一张表中，会出现大量元余数据(学生信息保存)</p>
<p>所以为了降低数据库的体积，提升数据库的效率，我们需要根据自身需求对表进行拆分</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql16.png"  alt="Untitled">
      </p>
<p>3.什么时候会出现冗余数据</p>
<p>表与表之间的关系可以分为三种 一对一、一对多、多对多</p>
<p>3.1 一对一</p>
<p> 一般不用拆分</p>
<div class="table-container"><table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>gender</th>
<th>mateId</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>A</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>B</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>C</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td>D</td>
<td>0</td>
<td>3</td>
</tr>
</tbody></table></div>
<p>3.2 一对多关系</p>
<p>拆</p>
<p>一个人有多辆车，一个班有多个学生，一个人有多门成绩</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql17.png"  alt="Untitled">
      </p>
<p>3.3 多对多关系</p>
<p>拆</p>
<p>一个学生有多个老师，一个老师有多个学生</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql18.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql19.png"  alt="Untitled">
      </p>

        <h2 id="参照完整性"   >
          <a href="#参照完整性" class="heading-link"><i class="fas fa-link"></i></a><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2>
      <ol>
<li>如何保证参照完整性？</li>
</ol>
<p>默认情况下表与表之间是独立存在的，不会相互影响</p>
<p>也正是因为如此，默认情况下也不会检查表与表之间的依赖关系</p>
<p>所以为了保证表与表之间参照完整性，我们可以通过’外键’来保证参照完整性</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(<br>	id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>	name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>	gender enum(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> grade(<br>	id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>	km <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>	score <span class="hljs-keyword">double</span>,<br>	uid <span class="hljs-type">int</span><br>)<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;语文&#x27;</span>,<span class="hljs-number">100</span>，<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-number">100</span>，<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></div></figure>

<ol start="2">
<li>什么是外键？</li>
</ol>
<p>如果一张表中有一个字段指向了别一张表中的<strong>主键</strong>，就将该字段叫做外键</p>
<p>例如：成绩表中的uid引用了学生表中的id，那么成绩表中的uid我们就称之为外键</p>
<p>后面插入数据的时候会进行检查</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- create table stu2(</span><br><span class="hljs-comment">-- 	id int auto_increment primary key,</span><br><span class="hljs-comment">-- 	name varchar(20),</span><br><span class="hljs-comment">-- 	gender enum(&#x27;男&#x27;,&#x27;女&#x27;)</span><br><span class="hljs-comment">-- );</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> grade2(<br>	id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>	km <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>	score <span class="hljs-keyword">double</span>,<br>	uid <span class="hljs-type">int</span>,<br>  <span class="hljs-keyword">foreign</span> key(uid外键) <span class="hljs-keyword">references</span> stu2(id主键)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stu2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;语文&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;语文&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> error<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade2 <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;数学&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></div></figure>

<p>3.外键注意点：</p>
<ul>
<li>只有InnoDB的存储引擎才支持外键约束</li>
<li>外键的数据<strong>类型</strong>必须和指向的主键一样</li>
<li>在一对多的关系中，<strong>外键一般定义在多的一方</strong>(一个学生有多门成绩，那么外键定义在成绩表中）</li>
<li>定义外键的表我们称之为从表，被外键引用的表我们称之为主表</li>
</ul>
<ol start="4">
<li>创建表时定义外键</li>
</ol>
<p>foreign key(外键字段名称）references 主表名称(主表主键名称) </p>

        <h2 id="参照完整性-1"   >
          <a href="#参照完整性-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#参照完整性-1" class="headerlink" title="参照完整性"></a>参照完整性</h2>
      <p>1.如何动态添加外键</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html">alter table 从表名称 add foreign key(外键字段名称） references 主表名称(主表主键名称）;<br><br>create table grade(<br>	id int auto_increment primary key,<br>	km varchar (20),<br>	score double,<br>	uid int<br>);<br>// alter table grade add foreign key(uid) references stu(id);<br>insert into grade values (null,&quot;语文&#x27;,100,3);<br></code></pre></td></tr></table></div></figure>

<p>2.如何查看外键是谁</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html">show create table 从表名称;<br>show create table grade<br><br>CREATE TABLE `grade` (<br>  `id` int NOT NULL AUTO_INCREMENT,<br>  `km` varchar(20) DEFAULT NULL,<br>  `score` double DEFAULT NULL,<br>  `uid` int DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  KEY `uid` (`uid`),<br>  CONSTRAINT `grade_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `stu` (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=gbk<br></code></pre></td></tr></table></div></figure>

<p>注意点</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html">CONSTRAINT `grade_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `stu` (`id`)<br>- uid变为外键，外键名称为grade_ibfk_1<br>- uid取值引用的是stu表中id字段的值<br></code></pre></td></tr></table></div></figure>

<p>3.如何动态删除外键</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html">alter table 从表名称 drop foreign key 外键名称;<br>alter table grade drop foreign key grade_ibfk_1;<br></code></pre></td></tr></table></div></figure>


        <h2 id="参照完整性-外键的操作"   >
          <a href="#参照完整性-外键的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#参照完整性-外键的操作" class="headerlink" title="参照完整性 外键的操作"></a>参照完整性 外键的操作</h2>
      <p>1.外键的操作</p>
<p>严格操作：（前面讲解的都是严格採作）</p>
<ul>
<li>主表不存在对应数据，从表不允许添加</li>
</ul>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">insert into grade <span class="hljs-title function_">values</span> (<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;语文&#x27;,100,3);</span><br></code></pre></td></tr></table></div></figure>

<ul>
<li>从表引用着数据，主表不允许删除</li>
</ul>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> stu where id=<span class="hljs-number">1</span>;<span class="hljs-comment">// 会失败</span><br></code></pre></td></tr></table></div></figure>

<ul>
<li>从表引用这数据，主表不允许修改</li>
</ul>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">update stu set id=<span class="hljs-number">3</span> where id=<span class="hljs-number">1</span>;<span class="hljs-comment">// 失败</span><br></code></pre></td></tr></table></div></figure>

<p>買空操作(null)：</p>
<ul>
<li>在企业开发中，我们可能必须要删除主表中的数据，但是如果主表被删除了从表就不完整了所以在企业开发中，我们可以通过置空操作，在删除主表数据的同时删除从表关联的数据</li>
</ul>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> grade2(<br>	id <span class="hljs-type">int</span> auto_increment primarykey, km <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>),<br>	score <span class="hljs-keyword">double</span>,<br>	uid <span class="hljs-type">int</span>,<br>	<span class="hljs-keyword">foreign</span> key (uid) <span class="hljs-keyword">references</span> stu (id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">null</span><br>)<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 主表删除，从表<span class="hljs-operator">*</span><span class="hljs-operator">*</span>引用置空<span class="hljs-operator">*</span><span class="hljs-operator">*</span>，<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> grade <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,&quot;语文&#x27;,100,3);<br>update stu set id=3 where id=1;// 失败<br></code></pre></td></tr></table></div></figure>

<p>级联操作 (cascade)：</p>
<p>在企业开发中，我们可能必须要修改主表中的数据，但是如果主表被修改了从表就不完整了所以在企业开发中，我们可以通过’级联操作’，在修改主表数据的同时修改从表关联的数据</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">create table <span class="hljs-title function_">grade3</span>(<br>	id int auto_increment primarykey, km <span class="hljs-title function_">varchar</span> (<span class="hljs-number">20</span>),<br>	score double,<br>	uid int,<br>	foreign <span class="hljs-title function_">key</span> (uid) references <span class="hljs-title function_">stu</span> (id) on update cascade<br>)<span class="hljs-comment">// 主表删除，从表引用置空，</span><br>insert into grade3 <span class="hljs-title function_">values</span> (<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;语文&#x27;,100,3);</span><br><span class="hljs-string">delete from stu where id=1; </span><br><span class="hljs-string"></span><br><span class="hljs-string">[constraint 外键名称] foreign key（外键字段）references 主表（主键）[主表删除的动作][主表更新的动作] </span><br><span class="hljs-string">-般情况下主表删除时从表置空，主表更新时从表级联</span><br></code></pre></td></tr></table></div></figure>


        <h2 id="参照完整性-多对多外键"   >
          <a href="#参照完整性-多对多外键" class="heading-link"><i class="fas fa-link"></i></a><a href="#参照完整性-多对多外键" class="headerlink" title="参照完整性 多对多外键"></a>参照完整性 多对多外键</h2>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql20.png"  alt="Untitled">
      </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 创建学生表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stu(<br>  id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  gender enum(<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>)<br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 创建教师表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> teacher(<br>  id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>  name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>  gender enum(<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> rel(<br>	stuId <span class="hljs-type">int</span>,<br>	teacherId <span class="hljs-type">int</span><br>)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 添加外键<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> rel <span class="hljs-keyword">add</span> <span class="hljs-keyword">foreign</span> key(stuId) <span class="hljs-keyword">references</span> stu(id)<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> rel <span class="hljs-keyword">add</span> <span class="hljs-keyword">foreign</span> key(teacherId) <span class="hljs-keyword">references</span> teacher(id)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 添加数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;wangwu&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;zhaoliu&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> rel <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 正常<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> rel <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-number">12</span>) <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 错误<br><br></code></pre></td></tr></table></div></figure>


        <h2 id="单表查询"   >
          <a href="#单表查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2>
      <ol>
<li>单表查询</li>
</ol>
<p>seleet  * from 表名；#查询表中所有数据</p>
<p>selpet 字段1，字段2 from 表名：＃查询表中指定宁段数据</p>
<p>select [* || 字段] from 表名 [where 条件]；#查询表中满足条件的数据</p>
<p>2.什么是结果集</p>
<p>通过查询语句查询出来的结果我们就称之为结果集</p>
<p>结果集以表的形式将查询的结果返回给我们</p>
<p><strong>注意点：</strong></p>
<p>结果集返回的表和查询的表不是同一张表</p>
<p>被查询的表是真实存在的，是存储在磁盘上的</p>
<p>而结果集不是真实存在的，是存储到内存中的</p>
<ol start="3">
<li>如何给结果集的字段别名</li>
</ol>
<p>查询指定字段数据时，我们可以通过as给指定字段取别名 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">as</span> myName， age <span class="hljs-keyword">as</span> myAge <span class="hljs-keyword">FROM</span> stu；<br></code></pre></td></tr></table></div></figure>

<p>4.什么是字段表达式？</p>
<p>查询数据的时候，除了可以查询指定字段的数据以外，我们还可以查询表达式的结果 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">6</span><span class="hljs-operator">+</span><span class="hljs-number">6</span>;<br></code></pre></td></tr></table></div></figure>

<p>5.什么是伪表？</p>
<p>字段表达式虽然能够查询出表达式的结果，但是不符合MySql的规范</p>
<p>所以我们可以通过伪表(dual）的方式让字段表达式符合MySQL的规范</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">6</span><span class="hljs-operator">+</span><span class="hljs-number">6</span> <span class="hljs-keyword">from</span> dual；<br></code></pre></td></tr></table></div></figure>


        <h2 id="模糊查询"   >
          <a href="#模糊查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2>
      <p>where</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span>支持的运算符<br><br><span class="hljs-operator">=</span>（等于）、！<span class="hljs-operator">=</span>（不等于）、〈〉（不等于）、〈（小于）、〈<span class="hljs-operator">=</span>（小于等于）、〉（大于）、<span class="hljs-operator">&gt;=</span>（大于等于）；<br><br><span class="hljs-keyword">IN</span> (<span class="hljs-keyword">set</span>)：固定的范围值<br><br>BETVEEN...AND：值在什么范围<br><br><span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>：（为空）<span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>（不为空）<br><br><span class="hljs-keyword">AND</span>；与<br><br><span class="hljs-keyword">OR</span>；或<br><br><span class="hljs-keyword">NOT</span>：非<br><br><span class="hljs-keyword">LIKE</span>： 模糊杳询<br></code></pre></td></tr></table></div></figure>

<p>通配符</p>
<p>1.模糊查询格式:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 字段 <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;条件&quot;;</span><br><span class="hljs-string">_ 通配符:表示任意一个字符</span><br><span class="hljs-string">% 通配符:表示任意0～n个字符</span><br><span class="hljs-string"></span><br><span class="hljs-string">a_c:</span><br><span class="hljs-string">abc, adc,( abbc, ac  不行)</span><br><span class="hljs-string"></span><br><span class="hljs-string">_a_c:</span><br><span class="hljs-string">1abc, 3adc （abc1，2abhc不行）</span><br><span class="hljs-string"></span><br><span class="hljs-string">a%c:</span><br><span class="hljs-string">abc, adc, abbc, ac （都行）</span><br><span class="hljs-string"></span><br><span class="hljs-string">%a%c:</span><br><span class="hljs-string">labe, , 2abbc, 3adc （abcl 不行）</span><br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">查询<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-keyword">LIKE</span> &quot;lis%&quot;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 也可以 “z_<span class="hljs-operator">%</span>”<br></code></pre></td></tr></table></div></figure>


        <h2 id="单表查询-order-by"   >
          <a href="#单表查询-order-by" class="heading-link"><i class="fas fa-link"></i></a><a href="#单表查询-order-by" class="headerlink" title="单表查询 order by"></a>单表查询 order by</h2>
      <p>1.排序 order by</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段 [<span class="hljs-keyword">asc</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">desc</span>];<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">desc</span> 降序<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">asc</span> 升序 默认<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">DESC</span>,score  <span class="hljs-keyword">asc</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> id 一样，按照score升序<br></code></pre></td></tr></table></div></figure>


        <h2 id="聚合函数"   >
          <a href="#聚合函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2>
      <p>1.统计计算</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">count</span>() 统计<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu<br><br><span class="hljs-built_in">sum</span>() 求和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(id) <span class="hljs-keyword">from</span> stu<br><br><span class="hljs-built_in">avg</span>()求平均值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">AVG</span>(id) <span class="hljs-keyword">from</span> stu<br><br><span class="hljs-built_in">max</span>() 获取最大值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(id) <span class="hljs-keyword">from</span> stu<br><br><span class="hljs-built_in">min</span>()获取最小值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(id) <span class="hljs-keyword">from</span> stu<br></code></pre></td></tr></table></div></figure>

<p>2.数值类</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">rand()生成随机数 <br><span class="hljs-keyword">select</span> rand() <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand()<br><br>round()四舍五入<br><span class="hljs-keyword">select</span> round(<span class="hljs-number">1.2</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-built_in">ceil</span>() 向上取整<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.2</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-built_in">floor</span>() 向下取整<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">1.2</span>) <span class="hljs-keyword">from</span> dual;<br><br><span class="hljs-keyword">truncate</span>() 截取小数位<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">truncate</span>(<span class="hljs-number">1.234567</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></div></figure>

<p>3.字符串类</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">ucase()：#转换为大写<br><span class="hljs-keyword">select</span> ucase(<span class="hljs-string">&#x27;hello&#x27;</span>) <span class="hljs-keyword">from</span> dual;<br><br>lcase()；#转换为小写<br><span class="hljs-keyword">select</span> lcase(<span class="hljs-string">&#x27;HELLO&#x27;</span>) <span class="hljs-keyword">from</span> dual; <br><br><span class="hljs-keyword">left</span>()；#从左边指定位置开始截取到<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;1234567890&#x27;</span>，<span class="hljs-number">3</span>) <span class="hljs-keyword">from</span> dual; <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">123</span><br><br><span class="hljs-keyword">right</span>()；#从右边指定位置开始截取<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">right</span>(<span class="hljs-string">&#x27;1234567890&#x27;</span>，<span class="hljs-number">3</span>) <span class="hljs-keyword">from</span> dual; <span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">890</span><br><br><span class="hljs-built_in">substring</span>()；#从指定位置开始截取指定个字符<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">substring</span>(<span class="hljs-string">&#x27;1234567890&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">from</span> dual;<span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-number">34567</span>,第三个开始，截取<span class="hljs-number">5</span>个<br></code></pre></td></tr></table></div></figure>


        <h2 id="数据分组"   >
          <a href="#数据分组" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2>
      <ol>
<li>数据分组 group by</li>
</ol>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">select</span> 分组字段<span class="hljs-operator">||</span> 聚合函数 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段:<br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">统计表中一共有多少stuId<br><span class="hljs-variable constant_">SELECT</span> stuId <span class="hljs-variable constant_">FROM</span> rel<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql21.png"  alt="Untitled">
      </p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">统计表中一共有多少stuId，根据stuId分组<br><span class="hljs-variable constant_">SELECT</span> stuId <span class="hljs-variable constant_">FROM</span> rel <span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> stuId<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql22.png"  alt="Untitled">
      </p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">每个id有多少人<br><span class="hljs-variable constant_">SELECT</span> stuId,<span class="hljs-title function_">COUNT</span>(*) <span class="hljs-variable constant_">FROM</span> rel <span class="hljs-variable constant_">GROUP</span> <span class="hljs-variable constant_">BY</span> stuId<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql23.png"  alt="Untitled">
      </p>
<p>注意点</p>
<ol>
<li>在对数据进行分组的时候，select 后面必须是分组字段或者聚合函数，否则就只会返回第一条数据</li>
</ol>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">elect city <span class="hljs-keyword">from</span> stu group by city;<br><br>select name <span class="hljs-keyword">from</span> stu group by city;<br><br>select city, <span class="hljs-title function_">group_concat</span>(name) <span class="hljs-keyword">from</span> stu group by city;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql24.png"  alt="Untitled">
      </p>

        <h2 id="条件查询-having"   >
          <a href="#条件查询-having" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件查询-having" class="headerlink" title="条件查询 having"></a>条件查询 having</h2>
      <p>having和where很像都是用来做条件查询的</p>
<p>但是where是去<strong>数据库</strong>中查询符合条件的数据，而having是去<strong>结果集</strong>中查询符合条件的数据</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu where id=<span class="hljs-number">1</span><br><span class="hljs-comment">// 从数据库查找</span><br><br>select name <span class="hljs-keyword">from</span> stu where id=<span class="hljs-number">1</span><span class="hljs-comment">// 有结果</span><br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu having id=<span class="hljs-number">1</span><br><span class="hljs-comment">// 从select * from stu 的结果集查找</span><br><br>select name <span class="hljs-keyword">from</span> stu having id=<span class="hljs-number">1</span><span class="hljs-comment">// 没有结果</span><br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">需求:select city <span class="hljs-keyword">from</span> stu group by <span class="hljs-attr">city</span>:<br><br>需求:select city, <span class="hljs-title function_">avg</span> (score) <span class="hljs-keyword">from</span> stu group by city;<br><br>需求:select city, <span class="hljs-title function_">avg</span> (score) <span class="hljs-keyword">as</span> average <span class="hljs-keyword">from</span> stu group by city;<br><br>需求:select city, <span class="hljs-title function_">avg</span> (score) <span class="hljs-keyword">as</span> average <span class="hljs-keyword">from</span> stu group by city having average&gt;=<span class="hljs-number">60</span><br></code></pre></td></tr></table></div></figure>


        <h2 id="数据分页"   >
          <a href="#数据分页" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据分页" class="headerlink" title="数据分页"></a>数据分页</h2>
      <p>1.分页 limit:</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select 字段 <span class="hljs-keyword">from</span> 表 limit 索引,个数;<br></code></pre></td></tr></table></div></figure>


        <h2 id="查询选项"   >
          <a href="#查询选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询选项" class="headerlink" title="查询选项"></a>查询选项</h2>
      <p>select[查询选项]字段名称 from 表名：</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select [查询选项] 字段名称 <span class="hljs-keyword">from</span> 表名：<br>all  显示所有查询出来的数据[默认] <br>distinct  去除结果集中重复的数据之后再显示<br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select all stuId <span class="hljs-keyword">from</span> rel<br>select distinct stuId <span class="hljs-keyword">from</span> rel<br></code></pre></td></tr></table></div></figure>

<p> 注意</p>
<p>如果是通过distinct来对结果集中重复的数据进行去重，那么只有所有列的数据都相同才会去重</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select distinct * <span class="hljs-keyword">from</span> rel <span class="hljs-comment">// 全部</span><br>select distinct stuId <span class="hljs-keyword">from</span> rel <span class="hljs-comment">// stuId 去重</span><br><br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">完整的查询语句<br><br>select[查询选项]宁段名称 [<span class="hljs-keyword">from</span> 表名〕[where 条件〕 <span class="hljs-title class_">Lorder</span> by 排序〕[group by 分组]<br>[having 条件] [limit分页]<br></code></pre></td></tr></table></div></figure>


        <h2 id="多表查询"   >
          <a href="#多表查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2>
      <p>1.多表查询</p>
<p>多表查询只需要在单表查询基础上增加一张表即可 </p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span>，表名<span class="hljs-number">2</span>；<br></code></pre></td></tr></table></div></figure>

<p>注意点：</p>
<p>默认情况下多表查询的结果是笛卡尔集</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql25.png"  alt="Untitled">
      </p>
<p>2.union</p>
<p>在纵向上将多张表的结果结合起来返回给我们</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> union select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">2</span><br></code></pre></td></tr></table></div></figure>

<p>注意</p>
<ol>
<li>使用union进行多表查询，返回的结果集的表头的名称是第一张表的名称</li>
<li>使用union进行多表查询，必须保证多张表查询的字段个数一致</li>
<li>使用union进行多表查询，默认情况下会自动去重</li>
<li>使用union进行多表查询，如果不想自动去重，那么可以在union后面加上all</li>
</ol>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> union all select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">2</span><br><span class="hljs-comment">// 不去重</span><br></code></pre></td></tr></table></div></figure>


        <h2 id="表的连接"   >
          <a href="#表的连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#表的连接" class="headerlink" title="表的连接"></a>表的连接</h2>
      <p>1.表的连接查询</p>
<p>将多张表中’关联的字段’’连接’在一起查询我们称之为’表的连接查询’ </p>
<p>大白话：查询多张表中满足条件的数据</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu, grade where stu.<span class="hljs-property">id</span> = grade. <span class="hljs-attr">stuld</span>:<br></code></pre></td></tr></table></div></figure>

<p>1.1内连接 inner join</p>
<p>在内连接中只会返回满足条件的数据</p>
<p>在进行多表查询的时候，如果想查询指定的字段，那么必须在字段名称前面加上表名才行</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> inner join 表名<span class="hljs-number">2</span> on 条件;<br>select * <span class="hljs-keyword">from</span> stu inner join grade on stu. id = grade. stuld;<br>select stu.<span class="hljs-property">id</span>,stu.<span class="hljs-property">name</span>,grade.<span class="hljs-property">score</span> <span class="hljs-keyword">from</span> stu inner join grade on stu. id = grade. stuld;<br></code></pre></td></tr></table></div></figure>

<p>1.2外连接</p>
<p>1.2.1左外连接 left join</p>
<p>在左外连接中，左边的表是不看条件的，无论条件是否满足，都会返回左边表中所有的数据</p>
<p>在左外连接中，只有右边的表会看条件，对于右边的表而言，只有满足条件才会返回对应的数据</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">#select stu.<span class="hljs-property">id</span>, stu.<span class="hljs-property">name</span>, grade. score <span class="hljs-keyword">from</span> stu left join grade on stu.<span class="hljs-property">id</span>=grade.<span class="hljs-property">stuld</span>:<br>在以上的查询语句中stu表在左边，grade表在右边 <br>所以stu表不看条件，只有grade表看条件<br></code></pre></td></tr></table></div></figure>

<p>1.2.2右外连接 right join</p>
<p>在右外连接中，左边的表是不看条件的，无论条件是否满足，都会返回左边表中所有的数据</p>
<p>在右外连接中，只有左边的表会看条件，对于左边的表而言，只有满足条件才会返回对应的数据 /</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">#select stu。 id， stu。 name， grade。 score <span class="hljs-keyword">from</span> stu right join grade on stu。 id = grade。 stuld；<br>在以上的查询语句中stu表在左边，grade表在右边<br><br>所以stu表看条件，只有grade表不看条件<br></code></pre></td></tr></table></div></figure>

<p>1.3交叉连接 Cross join</p>
<p>如果没有指定条件，那么返回笛卡尔集</p>
<p>如果指定了条件，那么就等价于内连接</p>
<p>1.4全连接 full join (MySQL不支持全连接）</p>

        <h2 id="自然连接"   >
          <a href="#自然连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h2>
      <p>1.自然连接 (natural)</p>
<p>自然连接是用来简化’内连接和外连接’的</p>
<p>如果多张表需要判断的条件字段名称一致，那么不用编写条件，自然连接会自动判断</p>
<p>1.1自然内连接</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> inner join 表名<span class="hljs-number">2</span> on 条件;<br>select * <span class="hljs-keyword">from</span> stu inner join grade on stu.<span class="hljs-property">id</span>=grade.<span class="hljs-property">stuId</span>;<br>stu 改为 stuId<br>select * <span class="hljs-keyword">from</span> stu naturl join grade;<br></code></pre></td></tr></table></div></figure>

<p>注意</p>
<ol>
<li>如果没有指定条件，也没有同名的字段，那么就会返回笛卡尔集</li>
<li>在自然连接中，返回的结果集会自动优化，会自动去除重复的判断字段</li>
</ol>
<p>1.2自然外连接</p>
<p>1.2.1自然左外连接</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu naturl left join grade;<br></code></pre></td></tr></table></div></figure>

<p>1.2.1自然右外连接</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu naturl right join grade;<br></code></pre></td></tr></table></div></figure>


        <h2 id="using关键字"   >
          <a href="#using关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h2>
      <p>using关键字</p>
<p>如果多张表需要判断的条件字段名称一致,那么除了可以使用自然连接来简化以外还可以使用using关键字来简化</p>
<p>1.1内连接</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu inner join grade on stu. stuld = grade. stuld;<br>select * <span class="hljs-keyword">from</span> stu inner join grade <span class="hljs-title function_">using</span>(stuld)<br></code></pre></td></tr></table></div></figure>

<p>1.2外连接</p>
<p>1.2.1左外连接</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu left join grade   <span class="hljs-title function_">using</span>(stuld)<br></code></pre></td></tr></table></div></figure>

<p>1.2.2右外连接</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu right join grade  <span class="hljs-title function_">using</span>(stuld)<br></code></pre></td></tr></table></div></figure>


        <h2 id="子查询"   >
          <a href="#子查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2>
      <p>1.子查询</p>
<p>将一个查询语句查询的结果作为另一个查询语句的条件来使用</p>
<p>将一个查询语句查询的结果作为另一个查询语句的表来使用</p>
<p>2。将一个查询语句查询的结果作为另一个查询的条件来使用</p>
<p>2.1标准子查询（返回的结果只有一个）</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stuId <span class="hljs-keyword">from</span> grade <span class="hljs-keyword">where</span> score <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span> stuld <span class="hljs-number">3</span><br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuld <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuId <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> stuId <span class="hljs-keyword">from</span> grade <span class="hljs-keyword">where</span> score <span class="hljs-operator">=</span> <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></div></figure>

<p>2.2非标准子查询（返回的结果有多个）</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stuId frpm grade <span class="hljs-keyword">where</span> score ＞<span class="hljs-operator">=</span> <span class="hljs-number">60</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> stuId <span class="hljs-number">1</span> <span class="hljs-number">3</span> <br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuld <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-keyword">OR</span> stuld <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuld <span class="hljs-keyword">in</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br><br>seleet name <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> stuld <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> stuld <span class="hljs-keyword">from</span> grade <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span>)<br><br></code></pre></td></tr></table></div></figure>

<p>3。 将一个查询语句查询的结果作为另一个查询的表来使用</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name, city, score <span class="hljs-keyword">from</span> person <span class="hljs-keyword">where</span> score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span>:<br><br>seleet name, city, score <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> name, city, score <span class="hljs-keyword">from</span> person <span class="hljs-keyword">where</span> score<span class="hljs-operator">&gt;</span><span class="hljs-number">60</span>) <span class="hljs-keyword">as</span> temp;<br><br></code></pre></td></tr></table></div></figure>

<p>注意点：</p>
<p>如果要将一个查询语句查询的结果作为另一个查询的表来使用，那么必须给子查询起一个别名</p>

        <h2 id="事务介绍"   >
          <a href="#事务介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务介绍" class="headerlink" title="事务介绍"></a>事务介绍</h2>
      <p>银行表</p>
<div class="table-container"><table>
<thead>
<tr>
<th>cardId</th>
<th>name</th>
<th>money</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>zs</td>
<td>1000</td>
</tr>
<tr>
<td>1002</td>
<td>ls</td>
<td>1000</td>
</tr>
</tbody></table></div>
<p>ls给zs转账1000</p>
<p>第一种情况：</p>
<p>1。首先从ls的卡上扣除1000块钱</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> carld<span class="hljs-operator">=</span><span class="hljs-number">1002</span><br></code></pre></td></tr></table></div></figure>

<p>2。然后再给zs的卡上增加1000块钱</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> carld<span class="hljs-operator">=</span><span class="hljs-number">1001</span><br></code></pre></td></tr></table></div></figure>

<p>第二种情况：</p>
<p>1。首先给zs的卡上增加1000块钱</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> carld<span class="hljs-operator">=</span><span class="hljs-number">1001</span><br></code></pre></td></tr></table></div></figure>

<p>2。然后再从Is的卡上扣除1000块钱</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> carld<span class="hljs-operator">=</span><span class="hljs-number">1002</span><br></code></pre></td></tr></table></div></figure>

<p>如果停电了怎么半？会中断</p>
<p>1.事务基木概念</p>
<p>MySQL中的事务主要用于处理容易出错的数据。</p>
<p>事务可以用来维护数据库的完整性，保证成批的 SQL语句要么全部热行，要么全部不执行。</p>
<p>事务用来管理 insert， update， delete 语句</p>
<p>MySQL中只有使用了 Innodb 数据库引擎的表才支持事务。</p>

        <h2 id="事务原理和使用"   >
          <a href="#事务原理和使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务原理和使用" class="headerlink" title="事务原理和使用"></a>事务原理和使用</h2>
      <p>事物语法</p>
<p>开启事务:start transaction</p>
<p>提交事务:commit</p>
<p>回滚事务:rollback</p>
<p>3.示例一:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> bank(<br>	id <span class="hljs-type">int</span> unsigned auto_ increment <span class="hljs-keyword">primary</span> key,<br>	candid <span class="hljs-type">varchar</span> (<span class="hljs-number">4</span>),<br>	name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>),<br>	money <span class="hljs-type">int</span><br>)<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> bank <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>, <span class="hljs-number">1001</span> Zs <span class="hljs-number">1000</span>),(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;1002&#x27;</span>,<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-number">1000</span>)s<br></code></pre></td></tr></table></div></figure>

<p>第一种:先扣再增加</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span><span class="hljs-string">&#x27; 1002&#x27;</span> <br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span><span class="hljs-string">&#x27; 1001&#x27;</span><br></code></pre></td></tr></table></div></figure>

<p>第二种:先增加再扣</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001&#x27;</span> <br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1002&#x27;</span><br></code></pre></td></tr></table></div></figure>

<p>使用事物</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> transaction:<br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">-</span><span class="hljs-string">&#x27; 1002&#x27;</span> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> collback<br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-operator">+</span><span class="hljs-number">1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">-</span><span class="hljs-string">&#x27; 1001&#x27;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">commit</span><br></code></pre></td></tr></table></div></figure>

<p>注意点：</p>
<p>事务的本质是开启事务的时候拷贝一张一模一样的表</p>
<p>然后执行相关的操作都是在拷贝的这张表中做操作</p>
<p>如果失败了，如果执行了rollback，那么系统就会自动删除拷贝的这张表</p>
<p>所以失败了不会影响到原有的数据</p>
<p>如果成功了，如果扒行了comnit，那么系统就会自动利用拷贝表中最新的数据後盖原有表中的数据所以成功了会影响到原有的数据</p>

        <h2 id="事务回滚点"   >
          <a href="#事务回滚点" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务回滚点" class="headerlink" title="事务回滚点"></a>事务回滚点</h2>
      <p>事务回滚点</p>
<p><strong>记住需要commit</strong></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">savepoint</span> 回滚点名称 <br><br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> 回滚点名称<br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> transaction;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> bank <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>, <span class="hljs-number">1003</span> <span class="hljs-string">&#x27;333&#x27;</span>, <span class="hljs-number">33333</span>):<br><br><span class="hljs-keyword">savepoint</span> abc;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> bank <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;1003&#x27;</span>,<span class="hljs-string">&#x27;444&#x27;</span>, <span class="hljs-number">44444</span>);<br><br><span class="hljs-keyword">Savepoint</span> def:<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> bank <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>, <span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;555&#x27;</span>,<span class="hljs-number">55555</span>):<br></code></pre></td></tr></table></div></figure>


        <h2 id="事务特点"   >
          <a href="#事务特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务特点" class="headerlink" title="事务特点"></a>事务特点</h2>
      <p>事务特点：</p>
<p>1.原子性（关注的是状态）：</p>
<p>事务开启后的所有操作，要么全部成功，要么全部失败，不可能出现部分成功的情况事务扒行过程中如果出错，哪怕我们不手动回滚，系统也会自动帮我们回滚</p>
<p>2.一致性（关注数据可见性）：</p>
<p>事务开始前和结束后，数据库的完整性约束没有被破坏</p>
<p>例如 A向B转账，不可能A扣了钱，B却没收到</p>
<p>3.持久性：</p>
<p>事务完成后，事务对数据库的所有操作是永久的，操作完成之后就不能再回滚</p>
<p>4.隔离性：</p>
<p>数据库允许多个并发事务同时对其数据进行读写和修改的能力， 隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。</p>

        <h2 id="事务隔离级别"   >
          <a href="#事务隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2>
      <p>1.事务隔离级别</p>
<p>读未提交(read uncommitted):一个事务可以读取另一个未提交事务的数据</p>
<p>读提交(read committed):一个事务要等另一个事务提交后才能读取数据</p>
<p>可重复读(repeatable read）:一个事务范围内多个相同的查询返回相同的结果</p>
<p>申行化(serializable）:前面一个事务没有执行完后面一个事务不能执行</p>
<p>查看隔离级别:</p>
<p>全局的:select @@global. transaction_ isolation;</p>
<p>当前会话的:select @@transaction_ isolation:</p>
<p>设置隔离级别:</p>
<p>全局的:set global transaction isolation level 级别名称;</p>
<p>当前会话:set session transaction isolation level 级别名称:</p>

        <h4 id="脏读"   >
          <a href="#脏读" class="heading-link"><i class="fas fa-link"></i></a><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4>
      <p>能读取到其它事务没有提交的数据示例:</p>
<p>A客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level read uncommitted:<br><br><span class="hljs-keyword">start</span> transaction:<br><br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardId<span class="hljs-operator">=</span><span class="hljs-string">&#x27; 1002&#x27;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> bank;<br></code></pre></td></tr></table></div></figure>

<p>B客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> sessioll transaction isolation level read uncommitted;<br><br><span class="hljs-keyword">select</span> 米 fron bank:<br></code></pre></td></tr></table></div></figure>

<p><strong>解决办法：读提交 read committed</strong></p>

        <h4 id="不可重复读"   >
          <a href="#不可重复读" class="heading-link"><i class="fas fa-link"></i></a><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4>
      <p>一个事务范围内多次查询的结果不同示例:</p>
<p>A客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level read committed;<br><br><span class="hljs-keyword">start</span> transaction;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> bank:<br></code></pre></td></tr></table></div></figure>

<p>B客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level read committed;<br><br><span class="hljs-keyword">start</span> transaction;<br><br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardld<span class="hljs-operator">=</span> <span class="hljs-number">1002</span> <span class="hljs-keyword">commit</span>:<br></code></pre></td></tr></table></div></figure>

<p><strong>解决办法：可重复读</strong></p>

        <h4 id="重复读"   >
          <a href="#重复读" class="heading-link"><i class="fas fa-link"></i></a><a href="#重复读" class="headerlink" title="重复读"></a>重复读</h4>
      <p>一个事务范围内多次查询的结果相同 A客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level repeatable read:<br><br><span class="hljs-keyword">start</span> transaction:<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> bank:<br></code></pre></td></tr></table></div></figure>

<p>B客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level repeatable read;<br><br><span class="hljs-keyword">start</span> transaction;<br><br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span><span class="hljs-string">&#x27; 1002&#x27;</span> <span class="hljs-keyword">commit</span>:<br></code></pre></td></tr></table></div></figure>

<p>幻读的问题，改为串行化</p>

        <h4 id="串行化"   >
          <a href="#串行化" class="heading-link"><i class="fas fa-link"></i></a><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4>
      <p>保证永远的都是这个正确的，但是性能比较低</p>
<p>幻读</p>
<p>读到到的结果并不是最终的结果</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level serializable;<br><br><span class="hljs-keyword">start</span> transaction:<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> bank:<br></code></pre></td></tr></table></div></figure>

<p>B客户端:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session transaction isolation level serializable;<br><br><span class="hljs-keyword">start</span> transaction:<br><br><span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1002&#x27;</span> <span class="hljs-keyword">commit</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 会卡在这里<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">update</span> bank <span class="hljs-keyword">set</span> money<span class="hljs-operator">=</span>money<span class="hljs-number">-1000</span> <span class="hljs-keyword">where</span> cardid<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1002&#x27;</span> <span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></div></figure>

<p>事务隔离级别对应关系</p>
<div class="table-container"><table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>不可重复读</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table></div>

        <h2 id="视图基本概念"   >
          <a href="#视图基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#视图基本概念" class="headerlink" title="视图基本概念"></a>视图基本概念</h2>
      <p>1.视图基本概念</p>
<p>视图本质就是将结果集缓存起来</p>
<p>由于结果集是一张虚拟的表，所以视图也是一张虚拟的表由于结果集是建立在表的基础上的，所以视图也是建立在表的基础上的</p>
<p>2.视图的作用：</p>
<p>视图可以用来简化SQL语句</p>
<p>视图可以用来隐藏表的结构</p>
<p>视图可以用来提升数据安全性</p>
<p>3.创建视图语法</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> 视图名称 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 语句；<br><br><span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">WHERE</span> score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> person_view <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">WHERE</span> score <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person_view<br><br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, score <span class="hljs-keyword">FROM</span> Stu <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> grade <span class="hljs-keyword">on</span> stu.stuld <span class="hljs-operator">=</span> grade.stuId;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span> <span class="hljs-keyword">SELECT</span> name, score <span class="hljs-keyword">FROM</span> Stu <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> grade <span class="hljs-keyword">on</span> stu.stuld <span class="hljs-operator">=</span> grade.stuId;<br></code></pre></td></tr></table></div></figure>


        <h2 id="视图基本操作"   >
          <a href="#视图基本操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#视图基本操作" class="headerlink" title="视图基本操作"></a>视图基本操作</h2>
      <p>1.视图数据操作</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> person_view <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;it&#x27;</span>,<span class="hljs-string">&#x27;武汉&#x27;</span>）;<br></code></pre></td></tr></table></div></figure>

<p>注意点：</p>
<p>由于视图保存的是结果集，由于结果集是基于原始表的所以操作视图中的数据，本质上操作的是原始表中的数据，在原来的数据里面也会看到</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">view</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> person <span class="hljs-keyword">view</span> <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;it666&#x27;</span>,<span class="hljs-string">&#x27;武汉&#x27;</span>）;<br><br><span class="hljs-keyword">UPDATE</span> person <span class="hljs-keyword">View</span> <span class="hljs-keyword">set</span> city<span class="hljs-operator">=</span><span class="hljs-string">&#x27;香港&#x27;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;it666&#x27;</span>:<br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">view</span> <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27; it666&#x27;</span>;<br></code></pre></td></tr></table></div></figure>

<p>2.修改视图内容</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> 视图名称 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 语句:<br></code></pre></td></tr></table></div></figure>

<ol>
<li>删除视图</li>
</ol>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> if <span class="hljs-keyword">exists</span> 视图名;<br></code></pre></td></tr></table></div></figure>


        <h2 id="创建视图完整语句"   >
          <a href="#创建视图完整语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建视图完整语句" class="headerlink" title="创建视图完整语句"></a>创建视图完整语句</h2>
      <p>1.视图完整语句</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> [algorithm<span class="hljs-operator">=</span> &#123;<span class="hljs-keyword">merge</span> <span class="hljs-operator">||</span> temptable <span class="hljs-operator">||</span> undefined&#125; ] <span class="hljs-keyword">view</span> 视图名称<br><br><span class="hljs-keyword">select</span> 语句<br><br>[<span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option]<br></code></pre></td></tr></table></div></figure>

<p>2。 视图算法</p>
<p>merge：合并式(替代式）算法</p>
<p>将视图的语句和外层的语句合并之后再执行</p>
<p>改算法允许更新数据</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person;<br><span class="hljs-keyword">CREATE</span> algorithm<span class="hljs-operator">=</span><span class="hljs-keyword">merge</span> <span class="hljs-keyword">VIEW</span> person_view1 <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> person_view1;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 等价于<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person) <span class="hljs-keyword">as</span> t;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 增删改查都可以<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> person_view <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;it&#x27;</span>,<span class="hljs-string">&#x27;武汉&#x27;</span>）;<br></code></pre></td></tr></table></div></figure>

<p>temptable：临时表(具代式）算法</p>
<p>将视图生成一个临时表，再执行外层的语句</p>
<p>该算法<strong>不允许</strong>更新数据</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person;<br><span class="hljs-keyword">CREATE</span> algorithm<span class="hljs-operator">=</span>temptable <span class="hljs-keyword">VIEW</span> person_view2 <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 等价于<br>(<span class="hljs-keyword">SELECT</span> name, city <span class="hljs-keyword">FROM</span> person) <span class="hljs-keyword">as</span> t<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t <br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 增删改查都不可以<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> person_view <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;it&#x27;</span>,<span class="hljs-string">&#x27;武汉&#x27;</span>）;<br></code></pre></td></tr></table></div></figure>

<p>undefined：未定义算法，默认</p>
<p>由MySQL自己决定使用如上的哪一种算法，默认就是undefined </p>
<p>一般情况下会自动选择merge算法</p>
<p>3.视图限制(with check option)</p>
<p>在with check option的选项下,可以总结为</p>
<p>1.要保证数据update之后也要符合where的条件</p>
<p>2.要保证insert之后的数据能被视图查询出来</p>
<p>3.对于delete,有无 with check option都一样</p>
<p>4.对于没有where字句的视图,使用with check option是多余的</p>
<p>默认情况下哪怕插入的数据和更新的数据不符合创建视图条件，我们也是可以通过视图来插入和更新的</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, city, score <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">WHERE</span> score ＞<span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> person_view <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> name, city, score <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">WHERE</span> Score ＞<span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 随便编辑<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> person_view <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;it666&#x27;</span>,<span class="hljs-string">&#x27;台湾&#x27;</span>,<span class="hljs-number">33</span>)<br></code></pre></td></tr></table></div></figure>

<p>如果想让插入和更新的数据必须符合创建视图的条件，那么就可以在创建视图的时候添加限制条件</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, city, score <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">WHERE</span> score ＞<span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> person_view <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> name, city, score <br><span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">WHERE</span> Score ＞<span class="hljs-operator">=</span> <span class="hljs-number">60</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 下面的会失败，不符合条件<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> person_view <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;it666&#x27;</span>,<span class="hljs-string">&#x27;台湾&#x27;</span>,<span class="hljs-number">33</span>)<br></code></pre></td></tr></table></div></figure>


        <h2 id="更新视图"   >
          <a href="#更新视图" class="heading-link"><i class="fas fa-link"></i></a><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2>
      <p>视图更新限制</p>
<p>1.1如果视图的算法是merge 算法，那么可以更新视图</p>
<p>1.2如果没有指vith check option，那么无论数据符不符合创建视图条件都可以更新</p>
<p>1.3如果指定了with check option，那么只有符合创建视图条件才可以更新</p>
<p>1.4除此之外由于视图是一张虚拟表，视图是基于原始表的，更新视图的本质就是更新原始表所以只有原始表中存在的原始数据才可以更新，通过其它方式生成的数据都不可以更新</p>
<p>2.更新限制</p>
<p>聚合函数</p>
<p>DISTINCT关键字</p>
<p>GROUP BY子句</p>
<p>HAVING子句</p>
<p>UNION运算符</p>
<p>FROM子句包含多张表</p>
<p>SELECT语句中应用了不可更新的形势图</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> city <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<br><span class="hljs-keyword">SELECT</span> city, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> avgScore <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> person_view <span class="hljs-keyword">As</span> <span class="hljs-keyword">SELECT</span> city, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">as</span> avgScore <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> person_view;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 更新平均分将会失败<br><span class="hljs-keyword">UPDATE</span> person_View <span class="hljs-keyword">set</span> avgScore<span class="hljs-operator">=</span><span class="hljs-number">11</span> <span class="hljs-keyword">WHERE</span> city<span class="hljs-operator">=</span><span class="hljs-string">&#x27;北京&#x27;</span>;<br></code></pre></td></tr></table></div></figure>


        <h2 id="Mysql预处理"   >
          <a href="#Mysql预处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mysql预处理" class="headerlink" title="Mysql预处理"></a>Mysql预处理</h2>
      <p>1.预处理：</p>
<p>所谓的预处理技术，最初也是由MySQL提出的一种减轻服务器压力的一种技术！</p>

        <h4 id="传统mysql-处理流程"   >
          <a href="#传统mysql-处理流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#传统mysql-处理流程" class="headerlink" title="传统mysql 处理流程"></a>传统mysql 处理流程</h4>
      <p>1.在客户端准备sql语句</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">select * <span class="hljs-keyword">from</span> stu where id=<span class="hljs-number">1</span>；<br></code></pre></td></tr></table></div></figure>

<p>2.发送sql语句到MySQL服务器</p>
<p>3.MySQL服务器对sql语句进行解析(词法，语法)，然后编译，然后执行该sql语句 </p>
<p>4.服务器将执行结果返回给客户端</p>
<p><strong>弊端：</strong></p>
<p>哪怕多次传递的语句大部分内容都是相同的，每次还是要重复传递</p>
<p>哪怕语句是相同的，每次执行之前还是要先解析、编译之后才能执行</p>

        <h4 id="预处理的处理流程"   >
          <a href="#预处理的处理流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#预处理的处理流程" class="headerlink" title="预处理的处理流程"></a>预处理的处理流程</h4>
      <p>1.在客户端准备预处理sql语句</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">prepare 预处理名称 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;sql语句&#x27;</span><br><br>prepare test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;select * from stu where id=?;&#x27;</span>;<br></code></pre></td></tr></table></div></figure>

<p>2.发送预处理sql语句到MySQL服务器</p>
<p>3.MySQL服务器对预处理sql语句进行解析(词法，语法)，但不会执行</p>
<p>4.在客户端准备相关数据 </p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">set @id=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></div></figure>

<p>5.MySQL服务器对数据和预处理sql编译，然后执行该sql语句 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">execute</span> test <span class="hljs-keyword">using</span> <span class="hljs-variable">@id</span>;<br></code></pre></td></tr></table></div></figure>

<p>6.服务器将执行结果返回给客户端</p>
<p>优点：</p>
<p>只对sql语句进行了一次解析</p>
<p>重复内容大大减少(网络传输更快)</p>
<p>如何在MySQL中定义变量</p>
<p>全局变量：@变量名称</p>
<p>给变量赋值：set @变量名称=值：</p>

        <h2 id="Mysql-存储过程"   >
          <a href="#Mysql-存储过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mysql-存储过程" class="headerlink" title="Mysql 存储过程"></a>Mysql 存储过程</h2>
      <p>1。 什么是存储过程？</p>
<p>存储过程和其它编程语言的函数很像，可以用于封装一组特定功能的SQL语句集</p>
<p>用户通过<strong>’call 存储过程的名称()’</strong>来调用执行它。</p>
<ol start="2">
<li>存储过程基本语法</li>
</ol>
<p>2.1定义</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> 存储过程名称(形参列表)<br><br><span class="hljs-keyword">begin</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-keyword">sql</span>语句<br><br><span class="hljs-keyword">end</span>；<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_stu()<br><span class="hljs-keyword">BEGIN</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_stu_by_id(stuId <span class="hljs-type">int</span>)<br><span class="hljs-keyword">BEGIN</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>stuId;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></div></figure>

<p>2.2调用</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">call</span> 存储过程名称(参数);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <br><span class="hljs-keyword">call</span> show_stu()<br><span class="hljs-keyword">call</span> show_stu_by_id(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></div></figure>

<p>3.查看存储过程</p>
<p>3.1查看MySQL中所有存储过程 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">procedure</span> status;<br></code></pre></td></tr></table></div></figure>

<p>3.2查看指定数据库中的存储过程</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">procedure</span> status <span class="hljs-keyword">where</span> db<span class="hljs-operator">=</span><span class="hljs-string">&#x27; db name&#x27;</span><br></code></pre></td></tr></table></div></figure>

<p>3.3查看指定存储过程的源代码 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> show_stu;<br></code></pre></td></tr></table></div></figure>

<p>4.删除存储过程</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> show_stu;<br></code></pre></td></tr></table></div></figure>


        <h2 id="Mysql-变量存储"   >
          <a href="#Mysql-变量存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mysql-变量存储" class="headerlink" title="Mysql 变量存储"></a>Mysql 变量存储</h2>
      <p>1.如何在MySQL中定义变量</p>
<p><strong>全局变量</strong></p>
<p>定义：@变量名称；</p>
<p>赋值：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> @全局变量名称<span class="hljs-operator">=</span>值；<br><span class="hljs-keyword">select</span> 字段名称 <span class="hljs-keyword">into</span> @全局变量名称 <span class="hljs-keyword">from</span> 表名：<br></code></pre></td></tr></table></div></figure>

<p><strong>局部变量</strong></p>
<p>定义：declare 变量名称 数据类型：</p>
<p>赋值：set 局部变量名称=值；</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> 局部变量名称<span class="hljs-operator">=</span>值；<br><span class="hljs-keyword">select</span> 字段名称 <span class="hljs-keyword">into</span> 局部变量名称 <span class="hljs-keyword">from</span> 表名；<br></code></pre></td></tr></table></div></figure>

<p>2.全局变量</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@stuId</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@stuName</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-variable">@stuId</span>;<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">into</span> <span class="hljs-variable">@stuName</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-variable">@stuId</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@stuName</span> <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></div></figure>

<p>3.局部变量</p>
<p>局部变量只能在存储过程和函数中定义，所以也称之为存储过程变量</p>
<p>default 可以设置默认值</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_stu()<br><span class="hljs-keyword">BEGIN</span><br>	<span class="hljs-keyword">declare</span> stuId2 <span class="hljs-type">int</span>;<br>	<span class="hljs-keyword">declare</span> stuName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>);<br>	<span class="hljs-keyword">set</span> stuId2 <span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br>	<span class="hljs-keyword">select</span> name <span class="hljs-keyword">into</span> stuName <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-variable">@stuId</span>;<br>	<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>stuId;<br>	<span class="hljs-keyword">select</span> stuName <span class="hljs-keyword">from</span> dual;<br><span class="hljs-keyword">END</span><br><span class="hljs-keyword">call</span> show_stu();<br></code></pre></td></tr></table></div></figure>


        <h2 id="Mysql-储存过程深入"   >
          <a href="#Mysql-储存过程深入" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mysql-储存过程深入" class="headerlink" title="Mysql 储存过程深入"></a>Mysql 储存过程深入</h2>
      <p>1.存储过程参数：</p>
<p>MySQL存储过程中的参数分为：</p>
<p>in 输入参数[默认]</p>
<p>out 输出参数</p>
<p>inout 输入输出参数</p>
<p>示例一：输入参数</p>
<p>外界传递给我们的参数</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_stu_by_id(<span class="hljs-keyword">in</span> stuId <span class="hljs-type">int</span>)<br><span class="hljs-keyword">BEGIN</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>stuId;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></div></figure>

<p>示例二：输出参数</p>
<p>存储过程中返回给外界的参数</p>
<p>MySQL存储过程中不能使用return返回值，需要通过参数来向外返回值</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_stu_by_id(<span class="hljs-keyword">in</span> stuId <span class="hljs-type">int</span>,<span class="hljs-keyword">out</span> stuName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>))<br><span class="hljs-keyword">BEGIN</span><br>	<span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">into</span> stuName <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>stuId;<br><span class="hljs-keyword">END</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@stuName</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">call</span> show_stu_by_id(<span class="hljs-number">1</span>,<span class="hljs-variable">@stuName</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@stuName</span> <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></div></figure>

<p>示例三：输入输出参数</p>
<p>同时具备了输入参数和输出参数所有功能</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_stu_by_id(<span class="hljs-keyword">inout</span> data <span class="hljs-type">int</span>)<br><span class="hljs-keyword">BEGIN</span><br>	<span class="hljs-keyword">SELECT</span> age <span class="hljs-keyword">into</span> data <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>data;<br><span class="hljs-keyword">END</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@data</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">call</span> show_stu_by_id(<span class="hljs-variable">@data</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@data</span> <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></div></figure>


        <h2 id="自定义函数"   >
          <a href="#自定义函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2>
      <p>1.什么是自定义函数</p>
<p>自定义函数和存储过程很像，只不过自定义函数不需要手动通过call调用</p>
<p>而是和其它的聚合函数一样会在SQL语句中自动被调用</p>
<p>例如：select avg (score) from stu</p>
<p>例如：select count (*) from stu where age &gt;=18；</p>
<p>2.创建自定义函数</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> 函数名（形参列表） <span class="hljs-keyword">returns</span> 数据类型 函数特征 <br><span class="hljs-keyword">begin</span><br><br><span class="hljs-keyword">sql</span>语句：<br>... ...<br><span class="hljs-keyword">return</span> 值；<br><br><span class="hljs-keyword">end</span>：<br></code></pre></td></tr></table></div></figure>

<p>函数特征</p>
<p>1.DETERMINISTIC 不确定的</p>
<p>2.NO SQL 没有SQl语句，当然也不会修改数据</p>
<p>3.READS SQL DATA 只是读取数据，不会修改数据</p>
<p>4.MODIFIES SQL DATA 要修改数据 5 CONTAINS SOL 包含了SQL语句</p>
<p>3.调用函数</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 函数名称(参数) <span class="hljs-keyword">from</span> dual;<br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fun_add(a <span class="hljs-type">int</span>,b <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span> <span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">begin</span><br><br><span class="hljs-keyword">declare</span> sum <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">set</span> sum <span class="hljs-operator">=</span>a<span class="hljs-operator">+</span>b;<br><span class="hljs-keyword">return</span> sum;<br><br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> check_stu(stuId <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> stuName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">into</span> stuName <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span> stuId;<br><span class="hljs-keyword">return</span> stuName;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></div></figure>


        <h2 id="条件语句"   >
          <a href="#条件语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2>
      <p>1.IF语</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">if 条件表达式 <span class="hljs-keyword">then</span><br>...<br>elseif 条件表达式 <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">else</span><br>...<br><span class="hljs-keyword">end</span> if;<br></code></pre></td></tr></table></div></figure>

<p>示例一:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fun_test(age <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">begin</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">result</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>if age<span class="hljs-operator">&gt;=</span><span class="hljs-number">18</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;成年人&#x27;</span>;<br><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;未成年人&#x27;</span>;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">result</span>;<br><br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 使用<br><span class="hljs-keyword">SELECT</span> fun_test(<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> DUAL;<br></code></pre></td></tr></table></div></figure>

<p>示例二:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fn_test2(score <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DETERMINISTIC</span> <br><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">result</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>if score<span class="hljs-operator">&lt;</span><span class="hljs-number">0</span><span class="hljs-operator">||</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;没有这个分数&#x27;</span>;<br>elseif score <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;不及格&#x27;</span>;<br>elseif score <span class="hljs-operator">&lt;</span><span class="hljs-number">80</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span><span class="hljs-operator">=</span> <span class="hljs-string">&#x27;良好&#x27;</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">result</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;优秀&#x27;</span>;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 使用<br><span class="hljs-keyword">SELECT</span> fun_test2(<span class="hljs-number">2</span>) <span class="hljs-keyword">from</span> DUAL;<br></code></pre></td></tr></table></div></figure>

<p>2.CASE语句</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">case</span><br><br><span class="hljs-keyword">when</span> 条件表达式 <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">when</span> 条件表达式 <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span>:<br></code></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> check_stu(score <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">result</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">case</span><br><br><span class="hljs-keyword">when</span> score<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;keeping&#x27;</span>;<br><span class="hljs-keyword">when</span>  score<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;not keeping&#x27;</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></div></figure>

<p>3.循环语句</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">while 条件表达式 do<br>...<br><span class="hljs-keyword">end</span> while;<br></code></pre></td></tr></table></div></figure>

<p>示例:1+ n的和/ 1+ 2+3+4+5</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fun_test6(num <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span> <span class="hljs-keyword">DETERMINISTIC</span> <br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> sum <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">declare</span> currentIndex <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br>while currentIndex <span class="hljs-operator">&lt;=</span> num do<br><span class="hljs-keyword">set</span> sum<span class="hljs-operator">=</span>sum<span class="hljs-operator">+</span>currentIndex;<br><span class="hljs-keyword">set</span> currentIndex<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">+</span>currentIndex;<br><br><span class="hljs-keyword">end</span> while;<br><br><span class="hljs-keyword">return</span> sum;<br> <span class="hljs-keyword">end</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 使用<br><span class="hljs-keyword">select</span> fun_test6(<span class="hljs-number">4</span>) <span class="hljs-keyword">from</span> DUAL;<br></code></pre></td></tr></table></div></figure>

<p>repeat 循环</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">repeat<br>...<br>until 条件表达式 <span class="hljs-keyword">end</span> repeat;<br></code></pre></td></tr></table></div></figure>

<p>示例:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fun_test6(num <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span> <span class="hljs-keyword">DETERMINISTIC</span> <br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> sum <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">declare</span> currentIndex <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br>repeat<br>	<span class="hljs-keyword">set</span> sum<span class="hljs-operator">=</span>sum<span class="hljs-operator">+</span>currentIndex;<br><span class="hljs-keyword">set</span> currentIndex<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">+</span>currentIndex;<br>until currentIndex <span class="hljs-operator">&gt;</span> num <span class="hljs-keyword">end</span> repeat;<br><br><span class="hljs-keyword">return</span> sum;<br> <span class="hljs-keyword">end</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 使用<br><span class="hljs-keyword">select</span> fun_test6(<span class="hljs-number">4</span>) <span class="hljs-keyword">from</span> DUAL;<br></code></pre></td></tr></table></div></figure>


        <h2 id="批量数据处理"   >
          <a href="#批量数据处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#批量数据处理" class="headerlink" title="批量数据处理"></a>批量数据处理</h2>
      <p>需求：往数据库里存储一万条数据实现方案：</p>
<p>1.写一万条insert into语句</p>
<p>2.将insert into语句封装到存储过程或者函数中</p>
<p>将来怎么使用？</p>
<p>是配合其它SQL语句使用，还是单独使用</p>
<p>单独使用–存储过程</p>
<p>配合其它SQL语句使用一-自定义函数</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> add_status(num <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">DECLARE</span> currentId <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">DECLARE</span> currentAge <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">DECLARE</span> currentName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>while currentId<span class="hljs-operator">&lt;</span>num do<br>	<span class="hljs-keyword">set</span> currentId<span class="hljs-operator">=</span>currentId<span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br>	<span class="hljs-keyword">set</span> currentAge<span class="hljs-operator">=</span> <span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">30</span>);<br>	<span class="hljs-keyword">set</span> currentName<span class="hljs-operator">=</span> concat(<span class="hljs-string">&#x27;it&#x27;</span>,currentAge);<br>	<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span>(currentId,currentName,currentAge);<br><span class="hljs-keyword">end</span> WHILE;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 调用 <span class="hljs-keyword">call</span><br><span class="hljs-keyword">CALL</span> add_status(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></div></figure>

<p>注意点：</p>
<p>以上封装存在的问题，默认情况下每生成一条插入语句，就会立即执行这条插入的语句</p>
<p>所以整个过程我们生成了一万条插入语句，我们解析了一万条插入的语句，编译了一万条语句，执行了一万条语句，所以比较耗时</p>
<p><strong>优化方式1</strong></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> add_status3(num <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">DECLARE</span> currentId <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">DECLARE</span> currentAge <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">DECLARE</span> currentName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>while currentId<span class="hljs-operator">&lt;</span>num do<br>	<span class="hljs-keyword">set</span> currentId<span class="hljs-operator">=</span>currentId<span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br>	<span class="hljs-keyword">set</span> currentAge<span class="hljs-operator">=</span> <span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">30</span>);<br>	<span class="hljs-keyword">set</span> currentName<span class="hljs-operator">=</span> concat(<span class="hljs-string">&#x27;it&#x27;</span>,currentAge);<br>	<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span>(currentId,currentName,currentAge);<br><span class="hljs-keyword">end</span> WHILE;<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 调用 <span class="hljs-keyword">call</span><br><span class="hljs-keyword">CALL</span> add_status3(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></div></figure>

<p>set autocommit=0; commit;</p>
<p>等到循环结束以后再去执行sql语句</p>
<p>注意点：</p>
<p>只要在循环前面加上set autocommit = 0；，在循环后面加上commit；</p>
<p>那么就不会生成一条插入语句就执行一条插入语句了</p>
<p>会等到所有的插入语句都生成之后，再统一的解析，统一的编译，统一的执行</p>
<p>优化方式2</p>
<p><strong>预处理不能使用局部变量</strong></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> add_status4(num <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-variable">@currentId</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">set</span> <span class="hljs-variable">@currentAge</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentName</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>;<br>	<span class="hljs-keyword">prepare</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;INSERT INTO stu VALUES(?,?,?);&#x27;</span>;<br>while <span class="hljs-variable">@currentId</span><span class="hljs-operator">&lt;</span>num do<br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentId</span><span class="hljs-operator">=</span><span class="hljs-variable">@currentId</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentAge</span><span class="hljs-operator">=</span> <span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">30</span>);<br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentName</span><span class="hljs-operator">=</span> concat(<span class="hljs-string">&#x27;it&#x27;</span>,<span class="hljs-variable">@currentAge</span>);<br>	<span class="hljs-keyword">execute</span> test <span class="hljs-keyword">using</span> <span class="hljs-variable">@currentId</span>,<span class="hljs-variable">@currentName</span>,<span class="hljs-variable">@currentAge</span>;<br><span class="hljs-keyword">end</span> WHILE;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 调用 <span class="hljs-keyword">call</span><br><span class="hljs-keyword">CALL</span> add_status4(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></div></figure>

<p><strong>两者结合</strong></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> add_status4(num <span class="hljs-type">int</span>)<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-variable">@currentId</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">set</span> <span class="hljs-variable">@currentAge</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentName</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>;<br>	<span class="hljs-keyword">prepare</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;INSERT INTO stu VALUES(?,?,?);&#x27;</span>;<br>	<span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>while <span class="hljs-variable">@currentId</span><span class="hljs-operator">&lt;</span>num do<br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentId</span><span class="hljs-operator">=</span><span class="hljs-variable">@currentId</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>; <br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentAge</span><span class="hljs-operator">=</span> <span class="hljs-built_in">FLOOR</span>(RAND()<span class="hljs-operator">*</span><span class="hljs-number">30</span>);<br>	<span class="hljs-keyword">set</span> <span class="hljs-variable">@currentName</span><span class="hljs-operator">=</span> concat(<span class="hljs-string">&#x27;it&#x27;</span>,<span class="hljs-variable">@currentAge</span>);<br>	<span class="hljs-keyword">execute</span> test <span class="hljs-keyword">using</span> <span class="hljs-variable">@currentId</span>,<span class="hljs-variable">@currentName</span>,<span class="hljs-variable">@currentAge</span>;<br><span class="hljs-keyword">end</span> WHILE;<br><span class="hljs-keyword">commit</span>;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 调用 <span class="hljs-keyword">call</span><br><span class="hljs-keyword">CALL</span> add_status4(<span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></div></figure>


        <h2 id="Mysql-索引介绍"   >
          <a href="#Mysql-索引介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mysql-索引介绍" class="headerlink" title="Mysql 索引介绍"></a>Mysql 索引介绍</h2>
      <p>1.什么是索引</p>
<p>索引就相当于字典中的目录（拼音/偏旁部首手）</p>
<p>有了目录我们就能通过目录快速的找到想要的结果，</p>
<p>但是如果没有目录（拼音/偏旁部首手），没有索引</p>
<p>那么如果想要查找某条数据就必须从前往后一条一条的查找</p>
<p>所以索引就是用于帮助我们提升数据的查询速度的</p>
<p>2.索引的优缺点和使用原则</p>
<p>2.1优点</p>
<ul>
<li>大大加快数据的查询速度</li>
<li>没有任何限制，所有Mysql字段都可以用作索引</li>
</ul>
<p>2.2缺点</p>
<ul>
<li>索引是真实存在的会占空间，会增加数据库体积</li>
<li>如果对作为索引的字段进行增删修操作，系统需要花费时间去更新维护索引</li>
</ul>
<p>2.3原则</p>
<ul>
<li>对经常用于查询的字段应该创建索引(作为where条件字段、作为group by分组的字段，作为order by排序的字段)</li>
<li>对于<strong>主键和外键</strong>系统会自动创建索引，无序我们手动创建</li>
<li>对于数据量小的表不需要刻意使用索引</li>
</ul>
<p>3.索引分类</p>
<ul>
<li>单值索引：将某个字段的值作为索引</li>
<li>复合索引：将多个字段的值作为索引</li>
<li>唯一索引（唯一键）：索引列中的值必须是唯一的，但是允许为空值</li>
<li>主键索引：是一种特殊的唯一索引，不允许有空值</li>
</ul>

        <h2 id="索引的创建和修改"   >
          <a href="#索引的创建和修改" class="heading-link"><i class="fas fa-link"></i></a><a href="#索引的创建和修改" class="headerlink" title="索引的创建和修改"></a>索引的创建和修改</h2>
      <p>1.查看当前查询是否使用索引</p>
<p>1.1查询没有索引的表</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">999999</span>;## <span class="hljs-number">0.695</span><br></code></pre></td></tr></table></div></figure>

<p>1.2查询有索引的表</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu2 <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">999999</span>;## <span class="hljs-number">0.008</span><br></code></pre></td></tr></table></div></figure>

<p>1.3如何查看当前的查询语句有没有用到素引</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> stu2 <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">999999</span>;## 查看key字段<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql26.png"  alt="Untitled">
      </p>
<p>如果返回的结果集中的key有值，那么就表示当前的查询语句中用到了索引</p>
<p>如果返回的结果集中的key没有值，那么就表示当前的查询语句中没有用到索引</p>
<p>2.如何添加索引</p>
<p>2.1给表设置主键，只要设置了主键，那么系统就会自动创建对应的索引</p>
<p>2.2给表设置外键，只要设置了外键，那么系统就会自动创建对应的索引</p>
<p>2.3给表设置唯一键，只要设置了某一个字段的取值是唯一的，也会自动创建对应的索引</p>
<p>2.4创建表的时候指定给哪个字段添加索引</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test1(<br>	id <span class="hljs-type">int</span>,<br>	name <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>),<br>	index idx_name (id) #创建索引<br>)<br></code></pre></td></tr></table></div></figure>

<p>2.5创建好表之后再给指定字段添加索引 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test2(<br>	id <span class="hljs-type">int</span>，<br>	name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)，<br>)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 下面的方式任选一种<br><span class="hljs-keyword">create</span> index idx_name <span class="hljs-keyword">on</span> test2(id)；#创建索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> test3 <span class="hljs-keyword">add</span> index idx_name(id) ## 创建索引<br></code></pre></td></tr></table></div></figure>

<p>3.删除索引</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index 索引名称 <span class="hljs-keyword">on</span> 表名<br></code></pre></td></tr></table></div></figure>


        <h2 id="索引算法"   >
          <a href="#索引算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#索引算法" class="headerlink" title="索引算法"></a>索引算法</h2>
      <p>1.什么是索引算法？</p>
<p>索引算法决定了如何创建索引</p>
<p>索引算法决定了如何查找索引对应的数据</p>
<p><strong>传统查找</strong></p>
<p>1， 2， 3， 4， 5</p>
<p><strong>btree查找</strong></p>
<p>平衡的多叉树</p>
<p>BTree索引是基于平衡多叉排序树实现的,能够缩短查找的次数</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/mysql27.png"  alt="Untitled">
      </p>
<p><strong>Hahs索引</strong></p>
<p>哈希索引是基于哈希表实现的,只能用于memory存储引擎,可以一次性定位到指定数据</p>

        <h2 id="Node与Mysql"   >
          <a href="#Node与Mysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#Node与Mysql" class="headerlink" title="Node与Mysql"></a>Node与Mysql</h2>
      <p>1.如何在Node程序中操作MySOL数据库？</p>
<p>我们都知道操作MySQL数据库就是连接MySQL服务器，给MySQL服务器发送指令在NodeJS中我们可以借助第三方库来连接MySQL服务器，给MySQL服务器发送指令</p>
<p>1.1 mysql驱动库</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npm install mysql<br></code></pre></td></tr></table></div></figure>

<p>1.2 mysal2驱动库</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npm install mysql2<br></code></pre></td></tr></table></div></figure>

<p>2。由于node第三方库还不支持最新的mysql加密，所以我们需要修改为旧版本加密方式</p>
<p>2.1、更改加密方式：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> ‘ root‘ @‘ localhost‘ IDENTIFIED <span class="hljs-keyword">BY</span> ‘ password‘ PASSWORD EXPIRE NEVER;<br></code></pre></td></tr></table></div></figure>

<p>2.2、更改密码：该例子中123为新密码</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> ‘ root‘ @‘ localhost‘ IDENT IFIED <span class="hljs-keyword">WITH</span> mysgl native password <span class="hljs-keyword">BY</span> root<br></code></pre></td></tr></table></div></figure>


        <h2 id="Sequelize"   >
          <a href="#Sequelize" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h2>
      <p>1.什么是Sequelize？</p>
<p>Sequelize是一个基于Promise的NodeJS ORM模块</p>
<p>2.什么是ORM？</p>
<p>ORM (Object-Relational-Mapping) 是对象关系映射</p>
<p>对象关系映射可以把JS中的类和对象，和数据库中的表和数据进行关系映射映射</p>
<p>之后我们就可以直接通过类和对象来操作数据表和数据了，就不用编写SQL</p>
<p>ORM有效的解决了直接在NodeJS中编写SQL不够直观，不够高效，容易出错等问题</p>
<p>3.如何映射？</p>
<p>在Sequelize中Js中的一个类(一个模型） 就对应数据库中的一张表</p>
<p>在Sequelize中JS中的一个对象就对应表中的一条数据（一条记录） </p>
<p>在Sequelize中Js中的一个对象的属性就对应一条数据的一个字段</p>

        <h2 id="Sequelize基本使用"   >
          <a href="#Sequelize基本使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sequelize基本使用" class="headerlink" title="Sequelize基本使用"></a>Sequelize基本使用</h2>
      <p>1.Sequelize基本使用</p>
<p><span class="exturl"><a class="exturl__link"   href="https://sequelize.org/" >https://sequelize.org/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>2.什么是数据库连接池？</p>
<p>默认情况下有一个人要使用数据库，那么就必须创建一个连接</p>
<p>默认情况下有一个人不用数据库了，为了不占用资源，那么就必须销毁一个连接</p>
<p>但是频繁的创建和销毁连接是非常消耗服务器性能的，所以为了提升服务器性能就有了连接池</p>
<p>数据库连接池是负责分配、管理和释放数据库连接</p>
<p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/20220905163945.png" >
      </p>

        <h2 id="Sequelize创建表"   >
          <a href="#Sequelize创建表" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sequelize创建表" class="headerlink" title="Sequelize创建表"></a>Sequelize创建表</h2>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">const <span class="hljs-keyword">User</span> <span class="hljs-operator">=</span> sequelize.define(<span class="hljs-string">&#x27;User&#x27;</span>, &#123;<br>  username: DataTypes.STRING,<br>  birthday: DataTypes.DATE,<br>&#125;);<br></code></pre></td></tr></table></div></figure>

<p>1.sequelize在根据模型创建表的时候，会自动将我们指定的表的名称变成复数</p>
<p>2.sequelize在根据模型创建表的时候，会自动增加两个字段 createAt/updateAt</p>

        <h2 id="Sequelize-CLI创建数据库"   >
          <a href="#Sequelize-CLI创建数据库" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sequelize-CLI创建数据库" class="headerlink" title="Sequelize-CLI创建数据库"></a>Sequelize-CLI创建数据库</h2>
      <p>1.什么是Sequelize-CLI？</p>
<p>在编程开发中为了能够更好的管理代码，我们可以使用Git来管理我们的代码，</p>
<p>实现对代码变更的追踪，实现在各个不同版本之间切换</p>
<p>在数据库开发中为了能够更好的管理数据库，我们也可以使用数据库迁移工具来管理我们的数据库， 实现对数据库变更的追踪，实现在各个不同版本之间切换</p>
<p>Sequelize-CLI就是一款数据库迁移工具，能够让我们追踪数据库的变更，在各个不同版本之间随意切换</p>
<p>2.如何使用Sequelize-CLI？</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npm i sequelize sequelize<span class="hljs-operator">-</span>cli mysgl2 <span class="hljs-operator">-</span>s<br><br>npx sequelize <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></div></figure>

<p>3.初始化Sequelize-CLI</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npx sequelize<span class="hljs-operator">-</span>cli init<br></code></pre></td></tr></table></div></figure>

<p>config：数据库配置文件，用于告诉CLI如何连接数据库</p>
<p>models：数据库模型文件，用于告诉CLI如何创建表</p>
<p>migrations：数据库迁移文件，用于记录用户不同版本操作</p>
<p>seeders：数据库种子文件，用于编写测试数据</p>
<p>修改环境变量 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> NODE_ENV<span class="hljs-operator">=</span>test<br></code></pre></td></tr></table></div></figure>

<p>4.创建</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npx sequelize db:<span class="hljs-keyword">create</span><br></code></pre></td></tr></table></div></figure>


        <h2 id="Sequelize-CLI创建表"   >
          <a href="#Sequelize-CLI创建表" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sequelize-CLI创建表" class="headerlink" title="Sequelize-CLI创建表"></a>Sequelize-CLI创建表</h2>
      <p>1.创建模型</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npx sequelize model: generate <span class="hljs-operator">-</span>name XXX <span class="hljs-comment">--attributes key: type</span><br></code></pre></td></tr></table></div></figure>

<p>2.根据模型创建表</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npx sequelize db:migrate<br></code></pre></td></tr></table></div></figure>

<p>3.回退到某个时刻</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs sql">npx sequelize db:migrate:undo <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 回退到上一个版本<br><br>npx sequelize db:migrate:undo:a11<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 回退所有<br><br>npx sequelize db:migrate:undo <span class="hljs-operator">-</span>name<span class="hljs-number">-20200329045955</span><span class="hljs-operator">-</span><span class="hljs-keyword">create</span><span class="hljs-operator">-</span>book. js <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 回退指定操作<br></code></pre></td></tr></table></div></figure>


        <h2 id="Sequelize-CLI修改表"   >
          <a href="#Sequelize-CLI修改表" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sequelize-CLI修改表" class="headerlink" title="Sequelize-CLI修改表"></a>Sequelize-CLI修改表</h2>
      <p>1.如何修改表？</p>
<p>使用Sequelize-CL1管理数据库的目的就是为了监控数据库的变化所以我们不能直接修改表的结构，如果要修改，必须通过migration文件修改这样我们就能记录修改操作，就能追踪修改过程，就能回退到指定版本</p>
<p>2.修改表步骤</p>
<p>2.1 通过 migration：generate 创建迁移文件</p>
<p>2.2 在迁移文件中编写修改的内容</p>
<p>2.3 通过 db：migrate 执行编写好的迁移文件</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>博客更换网址</title>
    <url>/posts/blog-change-url.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h1 id="博客更换网址了"   >
          <a href="#博客更换网址了" class="heading-link"><i class="fas fa-link"></i></a><a href="#博客更换网址了" class="headerlink" title="博客更换网址了"></a>博客更换网址了</h1>
      <p><span class="exturl"><a class="exturl__link"   href="https://www.kitety.com/" >新的网址换为 https://www.kitety.com 了</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
  </entry>
  <entry>
    <title>Nestjs学习笔记</title>
    <url>/posts/nestjs-study-notes.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/20220830000642.png" >
      </p>

        <h1 id="mysql-的安装信息"   >
          <a href="#mysql-的安装信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#mysql-的安装信息" class="headerlink" title="mysql 的安装信息"></a>mysql 的安装信息</h1>
      <blockquote>
<p>C:\Users\kitety&gt;mysqld –initialize –console<br>2021-12-31T13:48:46.173370Z 0 [System] [MY-013169] [Server] D:\fav\mysql-8.0.27-winx64\bin\mysqld.exe (mysqld 8.0.27) initializing of server in progress as process 8884<br>2021-12-31T13:48:46.352720Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.<br>2021-12-31T13:48:52.446815Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.<br>2021-12-31T13:49:10.994404Z 0 [Warning] [MY-013746] [Server] A deprecated TLS version TLSv1 is enabled for channel mysql_main<br>2021-12-31T13:49:10.994556Z 0 [Warning] [MY-013746] [Server] A deprecated TLS version TLSv1.1 is enabled for channel mysql_main<br>2021-12-31T13:49:11.166673Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: CktOrXq9ru&amp;w</p>
</blockquote>
<p>输入net start mysql或sc start mysql</p>
<p>启动mysql服务</p>
<p>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</p>
<span id="more"></span>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%201.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%202.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%203.png"  alt="Untitled">
      </p>
<p>nest generate controller messages/messages –flat 不会产生新的文件夹</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%204.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%205.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%206.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%207.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%208.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%209.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2010.png"  alt="Untitled">
      </p>
<p>执行的时候都会变为js，那么类型就不存在了。那这是怎么做到的呢？</p>
<p>所以并不是所有的ts都不会被编译到js里面</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2011.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2012.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2013.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2014.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2015.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2016.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2017.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2018.png"  alt="Untitled">
      </p>
<p>后面发现需要的话就会重用实例</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2019.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2020.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2021.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2022.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2023.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2024.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2025.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2026.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2027.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2028.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2029.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2030.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2031.png"  alt="Untitled">
      </p>
<p>database</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2032.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2033.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2034.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2035.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2036.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2037.png"  alt="Untitled">
      </p>
<p>user resource</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2038.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2039.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2040.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2041.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2042.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2043.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2044.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2045.png"  alt="Untitled">
      </p>
<p>save和remove就是为instance设计的</p>
<p>更新的逻辑，效率有点低</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2046.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2047.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2048.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2049.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2050.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2051.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2052.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2053.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2054.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2055.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2056.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2057.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2058.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2059.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2060.png"  alt="Untitled">
      </p>
<p>大项目</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2061.png"  alt="Untitled">
      </p>
<p>小项目</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2062.png"  alt="Untitled">
      </p>
<p>以后的发展</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2063.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2064.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2065.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2066.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2067.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2068.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2069.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2070.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2071.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2072.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2073.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2074.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2075.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2076.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2077.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2078.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2079.png"  alt="Untitled">
      </p>
<p><span class="exturl"><a class="exturl__link"   href="https://www.notion.so/" >https://www.notion.so</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2080.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2081.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2082.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2083.png"  alt="Untitled">
      </p>
<p>因此需要创建拦截器</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2084.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2085.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2086.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2087.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2088.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2089.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2090.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2091.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2092.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2093.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2094.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2095.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2096.png"  alt="Untitled">
      </p>
<p><span class="exturl"><a class="exturl__link"   href="https://www.notion.so/" >https://www.notion.so</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2097.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2098.png"  alt="Untitled">
      </p>
<p>e2e测试跳过了main.ts file</p>
<p>换成下面的这种</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%2099.png"  alt="Untitled">
      </p>
<p>以便让e2e运行pipe和cookie-session</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20100.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20101.png"  alt="Untitled">
      </p>
<p>多数据库</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20102.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20103.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20104.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20105.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20106.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20107.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20108.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20109.png"  alt="Untitled">
      </p>
<p>需要注意并行运行e2e测试，并行访问sqlite文件会报错，因此改为串行<code>--maxWorkers=1</code></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20110.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20111.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20112.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20113.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20114.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20115.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20116.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20117.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20118.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20119.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20120.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20121.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20122.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20123.png"  alt="Untitled">
      </p>
<p>onetomany 数据库没有改变，Manytone，数据库有改变</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20124.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20125.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20126.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20127.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20128.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20129.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20130.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20131.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20132.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20133.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20134.png"  alt="Untitled">
      </p>
<p>验证和授权</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20135.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20136.png"  alt="Untitled">
      </p>
<p>需要转换为middleware</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20137.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20138.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20139.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20140.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20141.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20142.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20143.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20144.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20145.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20146.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20147.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20148.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20149.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20150.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20151.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20152.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20153.png"  alt="Untitled">
      </p>
<p>typeorm cli中不能获取到connection options</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20154.png"  alt="Untitled">
      </p>
<ul>
<li>没有能力读取json、yml格式的文件</li>
<li>不应该用ts，因为直接运行的是js,其实现在已经可以了</li>
<li>不能利用环境变量来设置类型</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20155.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20156.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20157.png"  alt="Untitled">
      </p>
<p>测试的时候使用这个执行的，会报错</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20158.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20159.png"  alt="Untitled">
      </p>
<p>dev—js</p>
<p>test—ts</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20160.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20161.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20162.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20163.png"  alt="Untitled">
      </p>
<p>npm install -g ts-node</p>
<p><span class="exturl"><a class="exturl__link"   href="https://orkhan.gitbook.io/typeorm/docs/using-cli" >https://orkhan.gitbook.io/typeorm/docs/using-cli</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>To create a new empty migration use “typeorm migration:create” command<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/20220829234803.png" >
      <br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20164.png"  alt="Untitled">
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/image/Untitled%20165.png"  alt="Untitled">
      </p>
<p>heroku create</p>
<p><span class="exturl"><a class="exturl__link"   href="https://secure-garden-44648.herokuapp.com/" >https://secure-garden-44648.herokuapp.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> | <span class="exturl"><a class="exturl__link"   href="https://git.heroku.com/secure-garden-44648.git" >https://git.heroku.com/secure-garden-44648.git</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>heroku addons: create heroku-postgresql:hobby-dev</p>
<p>Creating heroku-postgresql:hobby-dev on ⬢ secure-garden-44648… free<br>Database has been created and is available<br>! This database is empty. If upgrading, you can transfer<br>! data from another database with pg:copy<br>Created postgresql-flat-19586 as DATABASE_URL<br>Use heroku addons:docs heroku-postgresql to view documentation</p>
<p>heroku config:set COOKIE_KEY=1k23412k3j4</p>
<p>heroku config:set NODE_ENV=production</p>
<p>git push heroku master</p>
]]></content>
      <tags>
        <tag>Nextjs</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>春日的太阳</title>
    <url>/posts/spring-sun.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>我们可能不经意间想起<br>有走过的路<br>有说过的话<br>有吃过的饭</p>
</blockquote>
<blockquote>
<p>本来谁都不打算告诉的<br>只是某天阳光照进来<br>突然间仿佛记起了全部<br>然后只想告诉给她今天灿烂的太阳</p>
</blockquote>
<p>在某一天，太阳出来了。看到这样的景色，我准备了一箩筐话，碎碎念了好多遍，见你之后，轻轻说了句，今天的太阳真好。–2020年2月21日</p>
]]></content>
      <tags>
        <tag>小诗</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 伪类合集分享</title>
    <url>/posts/css-pseudoclass-collection-sharing.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- demo的样式 -->
<style>
.demo{
   border:1px dashed #ccc;
   padding:5px;
}
.demo:hover{
   box-shadow: 0 0 11px rgba(33,33,33,.2);
}
</style>


        <h2 id="引用"   >
          <a href="#引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用" class="headerlink" title="引用"></a>引用</h2>
      <p>分享总结一下现有的伪类和简单的 demo<br>源地址：<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes" >MDN</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="伪类"   >
          <a href="#伪类" class="heading-link"><i class="fas fa-link"></i></a><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2>
      
        <h3 id="active"   >
          <a href="#active" class="heading-link"><i class="fas fa-link"></i></a><a href="#active" class="headerlink" title=":active"></a>:active</h3>
      <p>匹配被用户激活的元素。它让页面能在浏览器监测到激活时给出反馈。当用鼠标交互时，它代表的是用户按下按键和松开按键之间的时间。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.active</span><span class="hljs-selector-pseudo">:active</span>&#123; <span class="hljs-attribute">color</span>:red;&#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>鼠标按下就变为红色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
 .demo .active:active{ color:red;}
  </style>
  <div class="active">鼠标按下就变为红色</div>
</div>
<span id="more"></span>


        <h3 id="only-child"   >
          <a href="#only-child" class="heading-link"><i class="fas fa-link"></i></a><a href="#only-child" class="headerlink" title=":only-child"></a>:only-child</h3>
      <p>匹配没有任何兄弟元素的元素。</p>
<p>等效的选择器还可以写成:first-child:last-child 或者:nth-child(1):nth-last-child(1),当然,前者的权重会低一点.</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.onlyChild</span> <span class="hljs-selector-pseudo">:only-child</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.onlyChild</span> <span class="hljs-selector-class">.haha</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css"> <span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;after伪类不影响&#x27;</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;onlyChild&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  直接的文本也不影响选择<br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>没有兄弟元素<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>有兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>有兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>有兄弟 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>没兄弟<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
  .demo   .onlyChild :only-child {
      color: red;
    }
  .demo   .onlyChild .haha::after {
      content:'after伪类不影响';
    }
  </style>
  <div class="onlyChild">
    <div class="haha">
      直接的文本也不影响选择
      <i>没有兄弟元素,</i>
    </div>
    <div>
      <i>有兄弟</i><br>
      <b>有兄弟</b><br>
      <span>有兄弟 <span>没兄弟</span></span>
    </div>
</div>
</div>


        <h3 id="any-link"   >
          <a href="#any-link" class="heading-link"><i class="fas fa-link"></i></a><a href="#any-link" class="headerlink" title=":any-link"></a>:any-link</h3>
      <p>选择器代表一个有链接锚点的元素，而不管它是否被访问过，也就是说，它会匹配每一个有<strong>href</strong>属性的 <code>&lt;a&gt;</code>、<code>&lt;area&gt;</code> 或 <code>&lt;link&gt;</code> 元素。因此，它会匹配到所有的 :link 或 :visited。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.anyLink</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:any-link</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css">/_ WebKit browsers _/</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.anyLink</span> <span class="hljs-selector-tag">a</span>:-webkit-any-link &#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;anyLink&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://example.com&quot;</span>&gt;</span>href为地址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>href为#<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>href为空字符串<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>href为#的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>没有 href<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
.demo .anyLink a:any-link {
  color: red;
}
/_ WebKit browsers _/
.demo .anyLink a:-webkit-any-link {
color: red;
}
</style>
<div class="anyLink">
<span class="exturl"><a class="exturl__link"   href="https://example.com" >href为地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>
<a href="#">href为#</a><br>
<a href="">href为空字符串</a><br>
<div href="#">href为#的div</div><br>
<a>没有 href</a>
</div>

</div>


        <h3 id="only-of-type"   >
          <a href="#only-of-type" class="heading-link"><i class="fas fa-link"></i></a><a href="#only-of-type" class="headerlink" title=":only-of-type"></a>:only-of-type</h3>
      <p>代表了任意一个元素，这个元素没有其他相同类型的兄弟元素。(子元素中唯一的标签)</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.onlyoftype</span> <span class="hljs-selector-pseudo">:only-of-type</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;onlyoftype&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>I am `div` #1.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>I am the only `p` among my siblings.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>I am `div` #2.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>I am `div` #3.<br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>I am the only `i` child.<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>I am `em` #1.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>I am `b` #2.<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
  .demo .onlyoftype :only-of-type {
    color: red;
  }
  </style>
  <div class="onlyoftype">
    <div>I am `div` #1.</div>
    <p>I am the only `p` among my siblings.</p>
    <div>I am `div` #2.</div>
    <div>I am `div` #3.
      <i>I am the only `i` child.</i>
      <em>I am `em` #1.</em>
      <b>I am `b` #2.</b>
    </div>
  </div>
</div>


        <h3 id="blank-火狐验证"   >
          <a href="#blank-火狐验证" class="heading-link"><i class="fas fa-link"></i></a><a href="#blank-火狐验证" class="headerlink" title=":blank 火狐验证"></a>:blank 火狐验证</h3>
      <p>没有子节点；仅有空的文本节点；仅有空白符的文本节点。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.blanks</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: lightblue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.blanks</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:blank</span> &#123; <span class="hljs-attribute">display</span>: none; &#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.blanks</span> <span class="hljs-selector-tag">p</span>:-moz-only-whitespace &#123; <span class="hljs-attribute">display</span>: none; &#125; <span class="hljs-comment">/* Mozilla-only pseudo-class that works like :blank will */</span></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blanks&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This paragraph is not empty or blank.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!--this is empty and blank --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- this is not empty, because it has whitespace. But it is blank.--&gt;</span><br>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This paragraph is not empty or blank.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
.demo .blanks p {
  min-height: 30px;
  width: 250px;
  background-color: lightblue;
}
.demo .blanks p:blank { display: none; }
.demo .blanks p:-moz-only-whitespace { display: none; } /* Mozilla-only pseudo-class that works like :blank will */
</style>

  <div class="blanks">
  <p>This paragraph is not empty or blank.</p>
  <p><!--this is empty and blank --></p>
  <p>
    
    <!-- this is not empty, because it has whitespace. But it is blank.-->
    
  </p>
  <p>This paragraph is not empty or blank.</p>
</div>
</div>


        <h3 id="empty"   >
          <a href="#empty" class="heading-link"><i class="fas fa-link"></i></a><a href="#empty" class="headerlink" title=":empty"></a>:empty</h3>
      <p>代表没有子元素的元素。子元素只可以是元素节点或文本（包括空格）。注释或处理指令都不会产生影响。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.empty</span> <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: pink;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.empty</span> <span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:empty</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: lime;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;empty&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- I will be lime --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>I will be pink<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- I will be red because of the whitespace around this comment --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .empty .box {
        background: pink;
        height: 80px;
        width: 80px;
    }
   .demo  .empty .box:empty {
      background: lime;
    }
</style>

  <div class="empty">
    <div class="box"><!-- I will be lime --></div>
    <div class="box">I will be pink</div>
    <div class="box">
        <!-- I will be red because of the whitespace around this comment -->
    </div>
  </div>
</div>


        <h3 id="optional"   >
          <a href="#optional" class="heading-link"><i class="fas fa-link"></i></a><a href="#optional" class="headerlink" title=":optional"></a>:optional</h3>
      <p>任意没有 required 属性的 <code>&lt;input&gt;</code>，<code>&lt;select&gt;</code> 或 <code>&lt;textarea&gt;</code> 元素使用它。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.optional</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:optional</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed red;</span><br><span class="language-css">&#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;optional&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">required</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;有required的input&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
 .demo  .optional input:optional {
  border: 1px dashed red;
}
  </style>
  <div class="optional">
  <input type="text"/>
  <input type="text" required placeholder="有required的input"/>
  </div>
</div>


        <h3 id="checked"   >
          <a href="#checked" class="heading-link"><i class="fas fa-link"></i></a><a href="#checked" class="headerlink" title=":checked"></a>:checked</h3>
      <p>选择器表示任何处于选中状态的 radio(<code>&lt;input type=&quot;radio&quot;&gt;</code>), checkbox (<code>&lt;input type=&quot;checkbox&quot;&gt;</code>) 或(“select”) 元素中的 option HTML 元素(“option”)</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.checked</span> <span class="hljs-selector-pseudo">:checked</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>:red;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>Yes<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>No<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
  .demo .checked :checked {
    background:red;
    margin-left:20px;
    margin-right:20px;
  }
  </style>
  <div class="checked">
  <input type="radio" name="my-input" id="yes">
  <label for="yes">Yes</label>

  <input type="radio" name="my-input" id="no">
  <label for="no">No</label>
  </div>
</div>


        <h3 id="hover"   >
          <a href="#hover" class="heading-link"><i class="fas fa-link"></i></a><a href="#hover" class="headerlink" title=":hover"></a>:hover</h3>
      <p>光标（鼠标指针）悬停在元素上时提供关联的样式,按照 LVHA 的循顺序声明:link－:visited－:hover－:active。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.hover</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">   <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hover&quot;</span>&gt;</span><br>hover<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
 .demo  .hover:hover {
   color:red;
  }
  </style>
  <div class="hover">
hover
  </div>
</div>


        <h3 id="out-of-range-和-in-range"   >
          <a href="#out-of-range-和-in-range" class="heading-link"><i class="fas fa-link"></i></a><a href="#out-of-range-和-in-range" class="headerlink" title=":out-of-range 和:in-range"></a>:out-of-range 和:in-range</h3>
      <ul>
<li>out-of-range:表示一个 <code>&lt;input&gt;</code> 元素，其当前值处于属性 min 和 max 限定的范围外</li>
<li>in-range：表一个 <code>&lt;input&gt;</code> 元素，其当前值处于属性 min 和 max 限定的范围之内</li>
</ul>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.outofrange</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:in-range</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.outofrange</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:out-of-range</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>);</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.outofrange</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:in-range</span> + <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;okay.&#x27;</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.outofrange</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:out-of-range</span> + <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;out of range!&#x27;</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outofrange&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>Values between 1 and 10 are valid.<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;1 to 10&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;value1&quot;</span>&gt;</span>Your value is <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
  input {
    border: 1px solid black;
  }
 .demo  .outofrange input:in-range {
    background-color: rgba(0, 255, 0, 0.25);
  }
 .demo  .outofrange input:out-of-range {
    background-color: rgba(255, 0, 0, 0.25);
    border: 2px solid red;
  }
  .demo .outofrange input:in-range + label::after {
    content: 'okay.';
  }
  .demo .outofrange input:out-of-range + label::after {
    content: 'out of range!';
  }
  </style>
  <div class="outofrange">
    <form action="" id="form1">
      <ul>Values between 1 and 10 are valid.
        <li>
          <input id="value1" name="value1" type="number" placeholder="1 to 10" min="1" max="10" value="12">
          <label for="value1">Your value is </label>
        </li>
      </ul>
    </form>
  </div>
</div>


        <h3 id="indeterminate"   >
          <a href="#indeterminate" class="heading-link"><i class="fas fa-link"></i></a><a href="#indeterminate" class="headerlink" title=":indeterminate"></a>:indeterminate</h3>
      <p>表示状态不确定的表单元素。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.indeterminate</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:indeterminate</span>, <span class="hljs-selector-class">.indeterminate</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:indeterminate</span> + <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;indeterminate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>Background should be green<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span>Background should be green<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> inputs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.indeterminate&#x27;</span>).<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; inputs.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">    inputs[i].<span class="hljs-property">indeterminate</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
  .demo .indeterminate input:indeterminate, .indeterminate input:indeterminate + label {
    background: red;
  }
  </style>
  <div class="indeterminate">
    <input type="checkbox" id="checkbox">
    <label for="checkbox">Background should be green</label></br>
    <input type="radio" id="radio">
    <label for="radio">Background should be green</label>
  </div>
  <script>
  var inputs = document.querySelector('.indeterminate').getElementsByTagName("input");
  for(var i = 0; i < inputs.length; i++) {
    inputs[i].indeterminate = true;
  }
  </script>
</div>


        <h3 id="default"   >
          <a href="#default" class="heading-link"><i class="fas fa-link"></i></a><a href="#default" class="headerlink" title=":default"></a>:default</h3>
      <p>选择设置默认值的元素，该选择器可以在 <code>&lt;button&gt;</code>, <code>&lt;input type=&quot;checkbox&quot;&gt;</code>, <code>&lt;input type=&quot;radio&quot;&gt;</code>, 以及 <code>&lt;option&gt;</code> 上使用。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.default1</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:default</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">1px</span> red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.default1</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:default</span> + <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;default1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;season&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;spring&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;spring&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;season&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;summer&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;summer&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .default1 input:default {
      box-shadow: 0 0 2px 1px red;
    }
   .demo  .default1 input:default + label {
      color: red;
    }
  </style>

  <div class="default1">
    <input type="radio" name="season" id="spring" >
    <label for="spring">1</label>
    <input type="radio" name="season" id="summer" checked>
    <label for="summer">2</label>
  </div>
</div>


        <h3 id="placeholder-shown"   >
          <a href="#placeholder-shown" class="heading-link"><i class="fas fa-link"></i></a><a href="#placeholder-shown" class="headerlink" title=":placeholder-shown"></a>:placeholder-shown</h3>
      <p>在 placeholader 显示的时候被选择</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.placeholader</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:placeholder-shown</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;placeholader&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Type something here!&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    空placeholder<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    无placeholder<span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .placeholader input:placeholder-shown {
      border-color: red;
    }
  </style>

  <div class="placeholader">
    <input placeholder="Type something here!">
    </br>
    空placeholder<input placeholder="" >
    </br>
    无placeholder<input>
  </div>
</div>


        <h3 id="invalid"   >
          <a href="#invalid" class="heading-link"><i class="fas fa-link"></i></a><a href="#invalid" class="headerlink" title=":invalid"></a>:invalid</h3>
      <p>表示任意内容未通过验证的 <code>&lt;input&gt;</code> 或其他 <code>&lt;form&gt;</code> 元素</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.invalid</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:invalid</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;invalid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;url_input&quot;</span>&gt;</span>Enter a URL:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url_input&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email_input&quot;</span>&gt;</span>Enter an email address:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email_input&quot;</span> <span class="hljs-attr">required</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .invalid input:invalid {
      background-color: red;
    }
  </style>

  <div class="invalid">
    <form>
      <label for="url_input">Enter a URL:</label>
      <input type="url" id="url_input" />
      <br />
      <br />
      <label for="email_input">Enter an email address:</label>
      <input type="email" id="email_input" required/>
    </form>
  </div>
</div>


        <h3 id="read-only"   >
          <a href="#read-only" class="heading-link"><i class="fas fa-link"></i></a><a href="#read-only" class="headerlink" title=":read-only"></a>:read-only</h3>
      <p>选择只读的元素</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.readonly</span> <span class="hljs-selector-tag">input</span>:-moz-read-only &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* Supported in Blink/WebKit/Edge without a prefix */</span></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.readonly</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:read-only</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.readonly</span> <span class="hljs-selector-tag">p</span>:-moz-read-only &#123; <span class="hljs-attribute">background</span>: lightgray; &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.readonly</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:read-only</span> &#123; <span class="hljs-attribute">background</span>: lightgray; &#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.readonly</span> <span class="hljs-selector-class">.div</span><span class="hljs-selector-pseudo">:read-only</span> &#123; <span class="hljs-attribute">background</span>: lightgray; &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;readonly&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;This is a read-only field.&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>不可以编辑的都可以被选中<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>可以编辑的p标签就不行<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span>div也一样<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .readonly input:-moz-read-only {
      background-color: #ccc;
    }
    /* Supported in Blink/WebKit/Edge without a prefix */
 .demo  .readonly input:read-only {
      background-color: #ccc;
    }
.demo  .readonly p:-moz-read-only { background: lightgray; }
.demo  .readonly p:read-only { background: lightgray; }
.demo  .readonly .div:read-only { background: lightgray; }
  </style>

  <div class="readonly">
    <input type="text" value="This is a read-only field." readonly>
    <p>不可以编辑的都可以被选中</p>
    <p contenteditable="true">可以编辑的p标签就不行</p>
    <div class="div">div也一样</div>
  </div>
</div>


        <h3 id="read-write"   >
          <a href="#read-write" class="heading-link"><i class="fas fa-link"></i></a><a href="#read-write" class="headerlink" title=":read-write"></a>:read-write</h3>
      <p>选择可以被用户编辑的元素</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.readwrite</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:read-write</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* Supported in Blink/WebKit/Edge without a prefix */</span></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.readwrite</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:read-write</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.readwrite</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:read-write</span> &#123; <span class="hljs-attribute">background</span>: lightgray; &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.readwrite</span> <span class="hljs-selector-class">.div</span><span class="hljs-selector-pseudo">:read-write</span> &#123; <span class="hljs-attribute">background</span>: lightgray; &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;readwrite&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;This is a read-only field.&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>可以编辑的p标签也行<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>不可以编辑的不可以被选中<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .readwrite input:read-write {
      background-color: #ccc;
    }
    /* Supported in Blink/WebKit/Edge without a prefix */
.demo   .readwrite input:read-write {
      background-color: #ccc;
    }
  .demo .readwrite p:read-write { background: lightgray; }
  .demo .readwrite .div:read-write { background: lightgray; }
  </style>

  <div class="readwrite">
    <input type="text" value="This is a read-only field." >
    <p contenteditable="true">可以编辑的p标签也行</p>
    <p>不可以编辑的不可以被选中</p>
  </div>
</div>


        <h3 id="disabled"   >
          <a href="#disabled" class="heading-link"><i class="fas fa-link"></i></a><a href="#disabled" class="headerlink" title=":disabled"></a>:disabled</h3>
      <p>选择禁用的元素(表单元素)。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.disabled1</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:disabled</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span><span class="hljs-selector-pseudo">:not</span>-allowed;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.disabled1</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:disabled</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span><span class="hljs-selector-pseudo">:not</span>-allowed;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;我被禁用了，尴尬&quot;</span> <span class="hljs-attr">disabled</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">disabled</span> &gt;</span>禁用的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .disabled1 input:disabled {
      background-color: #ccc;
      cursor:not-allowed;
    }
   .demo  .disabled1 div:disabled {
      background-color: #ccc;
      cursor:not-allowed;
    }
  
  </style>
  <div class="disabled1">
    <input type="text" value="我被禁用了，尴尬" disabled >
    <div disabled >禁用的div</div>
  </div>
</div>


        <h3 id="enabled"   >
          <a href="#enabled" class="heading-link"><i class="fas fa-link"></i></a><a href="#enabled" class="headerlink" title=":enabled"></a>:enabled</h3>
      <p>表示任何被启用的（enabled）元素。如果一个元素能够被激活（如选择、点击或接受文本输入），或者能够获取焦点，则该元素是启用的。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.enabled</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:enabled</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.enabled</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:enabled</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;enabled&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;我可以输入，尴尬&quot;</span>  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  &gt;</span>禁用的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
   .demo  .enabled input:enabled {
      background-color: red;
    }
   .demo  .enabled div:enabled {
      background-color: red;
    }
  
  </style>
  <div class="enabled">
    <input type="text" value="我可以输入，尴尬"  >
    <div  >禁用的div</div>
  </div>
</div>


        <h3 id="lang"   >
          <a href="#lang" class="heading-link"><i class="fas fa-link"></i></a><a href="#lang" class="headerlink" title=":lang()"></a>:lang()</h3>
      <p>基于元素语言来匹配页面元素。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.lang</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:lang</span>(en) &gt; <span class="hljs-selector-tag">q</span> &#123; <span class="hljs-attribute">background</span>:red; &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.lang</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:lang</span>(fr) &gt; <span class="hljs-selector-tag">q</span> &#123;<span class="hljs-attribute">background</span>:green;&#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>英语语言<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>法语语言<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
 .demo   .lang div:lang(en) > q { background:red; }
 .demo   .lang div:lang(fr) > q {background:green;}
  </style>
  <div class="lang">
    <div lang="en"><q>英语语言</q></div>
    <div lang="fr"><q>法语语言</div>
  </div>
</div>


        <h3 id="not"   >
          <a href="#not" class="heading-link"><i class="fas fa-link"></i></a><a href="#not" class="headerlink" title=":not()"></a>:not()</h3>
      <p>用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation pseudo-class）。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.not</span> <span class="hljs-selector-class">.fancy</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> gold;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 类名不是 `.fancy` 的 &lt;p&gt; 元素 */</span></span><br><span class="language-css">   <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.not</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.fancy</span>) &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 非 &lt;p&gt; 元素 */</span> </span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.not</span>  <span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">p</span>) &#123;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 既不是 &lt;div&gt; 也不是 &lt;span&gt; 的元素 */</span></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.not</span>  <span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">div</span>)<span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">span</span>) &#123;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 类名不是 `.crazy` 或 `.fancy` 的元素 */</span></span><br><span class="language-css">    <span class="hljs-comment">/* 注意，此语法尚未获广泛支持。 */</span></span><br><span class="language-css">  <span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.not</span>  <span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.crazy</span>, <span class="hljs-selector-class">.fancy</span>) &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;not&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fancy&quot;</span>&gt;</span>我好看极了！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我「不是」一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
  <style>
 .demo   .not .fancy {
      text-shadow: 2px 2px 3px gold;
    }
    /* 类名不是 `.fancy` 的 <p> 元素 */
 .demo    .not p:not(.fancy) {
      color: green;
    }
    /* 非 <p> 元素 */ 
  .demo   .not  :not(p) {
      text-decoration: underline;
    }
    /* 既不是 <div> 也不是 <span> 的元素 */
  .demo   .not  :not(div):not(span) {
      font-weight: bold;
    }
    /* 类名不是 `.crazy` 或 `.fancy` 的元素 */
    /* 注意，此语法尚未获广泛支持。 */
   .demo  .not  :not(.crazy, .fancy) {
      color:red;
    }
  </style>
  <div class="not">
    <p>我是一个段落。</p>
    <p class="fancy">我好看极了！</p>
    <div>我「不是」一个段落。</div>
  </div>
</div>


        <h3 id="focus"   >
          <a href="#focus" class="heading-link"><i class="fas fa-link"></i></a><a href="#focus" class="headerlink" title=":focus"></a>:focus</h3>
      <p>:focus 表示获得焦点的元素（如表单输入）。当用户点击或触摸元素或通过键盘的 “tab” 键选择它时会被触发。</p>
<details>
<summary>展开查看</summary>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.demo</span>   <span class="hljs-selector-class">.focus</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>````<br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.focus</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;focus&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>### :focus-within<br><br>表示一个元素获得焦点，或，该元素的后代元素获得焦点。换句话说，元素自身或者它的某个后代匹配 :focus 伪类。（shadow DOM 树中的后代也包括在内）<br><br>子元素获得焦点，父元素改变样式<br><br><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>展开查看<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>```html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.focusWithin</span><span class="hljs-selector-pseudo">:focus-within</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;focusWithin&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>````<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.focusWithin</span><span class="hljs-selector-pseudo">:focus-within</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;focusWithin&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>### :fullscreen<br><br>应用于当前处于全屏显示模式的元素。<br><br><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>展开查看<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>```html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.demo</span>  <span class="hljs-selector-class">.top</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.right</span><span class="hljs-selector-pseudo">:fullscreen</span>&#123;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>:green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#dddddd</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.demo</span> <span class="hljs-selector-class">.right</span><span class="hljs-selector-pseudo">:fullscreen</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: green;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;rightScreen()&quot;</span>&gt;</span>全屏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">fullScreen</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@description</span>: 全屏初始化</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; fn 用户浏览器不支持全屏的回调</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">fn</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">prefixName</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 浏览器前缀</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isFullscreenData</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 浏览器是否支持全屏</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isFullscreen</span>(fn);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@description</span>: 将传进来的元素全屏</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; domName 要全屏的dom名称</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title class_">Fullscreen</span>(domName) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(domName);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> methodName =</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">prefixName</span> === <span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">        ? <span class="hljs-string">&quot;requestFullscreen&quot;</span></span><br><span class="language-javascript">        : <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.prefixName&#125;</span>RequestFullScreen`</span>;</span><br><span class="language-javascript">    element[methodName]();</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">// 退出全屏</span></span><br><span class="language-javascript">  <span class="hljs-title function_">exitFullscreen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> methodName =</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">prefixName</span> === <span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">        ? <span class="hljs-string">&quot;exitFullscreen&quot;</span></span><br><span class="language-javascript">        : <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.prefixName&#125;</span>ExitFullscreen`</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>[methodName]();</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@description</span>: 监听进入/离开全屏</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; enter 进入全屏的回调</span></span><br><span class="hljs-comment"><span class="language-javascript">   *  <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; quit 离开全屏的回调</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">screenChange</span>(<span class="hljs-params">enter, quit</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isFullscreenData</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> methodName = <span class="hljs-string">`on<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.prefixName&#125;</span>fullscreenchange`</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>[methodName] = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isElementFullScreen</span>()) &#123;</span><br><span class="language-javascript">        enter &amp;&amp; <span class="hljs-title function_">enter</span>(e); <span class="hljs-comment">// 进入全屏回调</span></span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        quit &amp;&amp; <span class="hljs-title function_">quit</span>(e); <span class="hljs-comment">// 离开全屏的回调</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@description</span>: 浏览器无法进入全屏时触发,可能是技术原因，也可能是用户拒绝：比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; enterErrorFn 回调</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">screenError</span>(<span class="hljs-params">enterErrorFn</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> methodName = <span class="hljs-string">`on<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.prefixName&#125;</span>fullscreenerror`</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>[methodName] = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">      enterErrorFn &amp;&amp; <span class="hljs-title function_">enterErrorFn</span>(e);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@description</span>: 是否支持全屏+判断浏览器前缀</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Function</span>&#125; fn 不支持全屏的回调函数 这里设了一个默认值</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">isFullscreen</span>(<span class="hljs-params">fn</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> fullscreenEnabled;</span><br><span class="language-javascript">    <span class="hljs-comment">// 判断浏览器前缀</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">fullscreenEnabled</span>) &#123;</span><br><span class="language-javascript">      fullscreenEnabled = <span class="hljs-variable language_">document</span>.<span class="hljs-property">fullscreenEnabled</span>;</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">webkitFullscreenEnabled</span>) &#123;</span><br><span class="language-javascript">      fullscreenEnabled = <span class="hljs-variable language_">document</span>.<span class="hljs-property">webkitFullscreenEnabled</span>;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">prefixName</span> = <span class="hljs-string">&quot;webkit&quot;</span>;</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">mozFullScreenEnabled</span>) &#123;</span><br><span class="language-javascript">      fullscreenEnabled = <span class="hljs-variable language_">document</span>.<span class="hljs-property">mozFullScreenEnabled</span>;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">prefixName</span> = <span class="hljs-string">&quot;moz&quot;</span>;</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">msFullscreenEnabled</span>) &#123;</span><br><span class="language-javascript">      fullscreenEnabled = <span class="hljs-variable language_">document</span>.<span class="hljs-property">msFullscreenEnabled</span>;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">prefixName</span> = <span class="hljs-string">&quot;ms&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (!fullscreenEnabled) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isFullscreenData</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">      fn &amp;&amp; <span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// 执行不支持全屏的回调</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@description</span>: 检测有没有元素处于全屏状态</span></span><br><span class="hljs-comment"><span class="language-javascript">   * <span class="hljs-doctag">@return</span> 布尔值</span></span><br><span class="hljs-comment"><span class="language-javascript">   */</span></span><br><span class="language-javascript">  <span class="hljs-title function_">isElementFullScreen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> fullscreenElement =</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">fullscreenElement</span> ||</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">msFullscreenElement</span> ||</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">mozFullScreenElement</span> ||</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">webkitFullscreenElement</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (fullscreenElement === <span class="hljs-literal">null</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 当前没有元素在全屏状态</span></span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 有元素在全屏状态</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> full = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fullScreen</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;不支持&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">full.<span class="hljs-title function_">screenError</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进去全屏失败:&quot;</span>, e);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">// 全屏请求必须在事件处理函数中调用，否则将会被拒绝。</span></span><br><span class="language-javascript"><span class="hljs-comment">// full.Fullscreen(&quot;.left&quot;); // 触发进去全屏失败回调</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">enter</span>: <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 如果退出全屏 退出的还是全屏状态，将会触发进入全屏的回调，这种情况比较少 注意一下</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进入全屏&quot;</span>, e);</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">quit</span>: <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;退出全屏&quot;</span>, e);</span><br><span class="language-javascript">    <span class="hljs-comment">// 通常不会出现嵌套的情况</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript">full.<span class="hljs-title function_">screenChange</span>(obj.<span class="hljs-property">enter</span>, obj.<span class="hljs-property">quit</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">leftScreen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  full.<span class="hljs-title class_">Fullscreen</span>(<span class="hljs-string">&quot;.left&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rightScreen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  full.<span class="hljs-title class_">Fullscreen</span>(<span class="hljs-string">&quot;.right&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">redScreen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  full.<span class="hljs-title class_">Fullscreen</span>(<span class="hljs-string">&quot;.left-son&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 退出全屏 退出到上次的状态</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exitScreen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  full.<span class="hljs-title function_">exitFullscreen</span>();</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></div></figure>
</details>
<div class="demo">
<style>
.demo .top {
  margin: 15px;
}
.demo .main {
  width: 100%;
  display: flex;
}
.demo .right:fullscreen{
  background:green;
}
.demo .right {
  width: 100%;
  height: 300px;
  background: #dddddd;
}
.demo .right:fullscreen {
  background: green;
  color:red;
  font-size:20px;
}
</style>

<div class="top">
  <button onclick="rightScreen()">全屏</button>
</div>
<div class="main">
  <div class="right">内容</div>
</div>
<script>
class fullScreen {
  /**
   * @description: 全屏初始化
   * @param {Function} fn 用户浏览器不支持全屏的回调
   */
  constructor(fn) {
    this.prefixName = ""; // 浏览器前缀
    this.isFullscreenData = true; // 浏览器是否支持全屏
    this.isFullscreen(fn);
  }
  /**
   * @description: 将传进来的元素全屏
   * @param {String} domName 要全屏的dom名称
   */
  Fullscreen(domName) {
    const element = document.querySelector(domName);
    const methodName =
      this.prefixName === ""
        ? "requestFullscreen"
        : `${this.prefixName}RequestFullScreen`;
    element[methodName]();
  }
  // 退出全屏
  exitFullscreen() {
    const methodName =
      this.prefixName === ""
        ? "exitFullscreen"
        : `${this.prefixName}ExitFullscreen`;
    document[methodName]();
  }
  /**
   * @description: 监听进入/离开全屏
   * @param {Function} enter 进入全屏的回调
   *  @param {Function} quit 离开全屏的回调
   */
  screenChange(enter, quit) {
    if (!this.isFullscreenData) return;
    const methodName = `on${this.prefixName}fullscreenchange`;
    document[methodName] = e => {
      if (this.isElementFullScreen()) {
        enter && enter(e); // 进入全屏回调
      } else {
        quit && quit(e); // 离开全屏的回调
      }
    };
  }
  /**
   * @description: 浏览器无法进入全屏时触发,可能是技术原因，也可能是用户拒绝：比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误
   * @param {Function} enterErrorFn 回调
   */
  screenError(enterErrorFn) {
    const methodName = `on${this.prefixName}fullscreenerror`;
    document[methodName] = e => {
      enterErrorFn && enterErrorFn(e);
    };
  }
  /**
   * @description: 是否支持全屏+判断浏览器前缀
   * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值
   */
  isFullscreen(fn) {
    let fullscreenEnabled;
    // 判断浏览器前缀
    if (document.fullscreenEnabled) {
      fullscreenEnabled = document.fullscreenEnabled;
    } else if (document.webkitFullscreenEnabled) {
      fullscreenEnabled = document.webkitFullscreenEnabled;
      this.prefixName = "webkit";
    } else if (document.mozFullScreenEnabled) {
      fullscreenEnabled = document.mozFullScreenEnabled;
      this.prefixName = "moz";
    } else if (document.msFullscreenEnabled) {
      fullscreenEnabled = document.msFullscreenEnabled;
      this.prefixName = "ms";
    }
    if (!fullscreenEnabled) {
      this.isFullscreenData = false;
      fn && fn(); // 执行不支持全屏的回调
    }
  }
  /**
   * @description: 检测有没有元素处于全屏状态
   * @return 布尔值
   */
  isElementFullScreen() {
    const fullscreenElement =
      document.fullscreenElement ||
      document.msFullscreenElement ||
      document.mozFullScreenElement ||
      document.webkitFullscreenElement;
    if (fullscreenElement === null) {
      return false; // 当前没有元素在全屏状态
    } else {
      return true; // 有元素在全屏状态
    }
  }
}
let full = new fullScreen(() => {
  console.log("不支持");
});
full.screenError(e => {
  console.log("进去全屏失败:", e);
});
// 全屏请求必须在事件处理函数中调用，否则将会被拒绝。
// full.Fullscreen(".left"); // 触发进去全屏失败回调
const obj = {
  enter: e => {
    // 如果退出全屏 退出的还是全屏状态，将会触发进入全屏的回调，这种情况比较少 注意一下
    console.log("进入全屏", e);
  },
  quit: e => {
    console.log("退出全屏", e);
    // 通常不会出现嵌套的情况
  }
};
full.screenChange(obj.enter, obj.quit);
function leftScreen() {
  full.Fullscreen(".left");
}
function rightScreen() {
  full.Fullscreen(".right");
}
function redScreen() {
  full.Fullscreen(".left-son");
}
// 退出全屏 退出到上次的状态
function exitScreen() {
  full.exitFullscreen();
}
</script>
</div>


        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>以上就是本次的全部分享内容，合理的利用伪类可以比较巧妙的实现一些特殊效果。但是部分伪类还是涉及到浏览器的兼容问题，或者还在草案之中，具体的兼容性可以为<span class="exturl"><a class="exturl__link"   href="https://caniuse.com/" >Can I Use</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>查看</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>RXJS入门分享之Observable、Operators</title>
    <url>/posts/observable-and-operators-shared-by-rxjs-entry.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h3 id="RX的发展"   >
          <a href="#RX的发展" class="heading-link"><i class="fas fa-link"></i></a><a href="#RX的发展" class="headerlink" title="RX的发展"></a><strong>RX的发展</strong></h3>
      <p>源自微软，火于<strong>Netflix</strong>(奈飞)公司。2011年微软开发出RX框架(开发的LinQ扩展出来的开源方案)，由于当时的<strong>Netflix</strong>公司发展太快，旧有的一些架构问题加上新增长的一些问题，导致架构特别复杂，一直在寻找一套能够梳理清楚这种复杂架构的框架或模式。<strong>Netflix</strong>公司借鉴了RX的设计理念，基于JAVA语言开发出了RxJava。从此RX这种理念迎来了爆发。发展至今，RX已经形成了一个开源集合，支持多种语言。</p>
<blockquote>
<p>RX支持的语言：<span class="exturl"><a class="exturl__link"   href="http://reactivex.io/languages.html" >http://reactivex.io/languages.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20220829233509.png" >
      </p>
<span id="more"></span>

        <h3 id="RX的优势？"   >
          <a href="#RX的优势？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RX的优势？" class="headerlink" title="RX的优势？"></a><strong>RX的优势？</strong></h3>
      <ul>
<li>三大统一，异步与同步，获取与订阅，现在与未来</li>
<li>可组合的数据变更过程</li>
</ul>
<p>在实际应用中，很多问题可以抽象成数据流，网页的DOM事件、Ajax获取数据资源等操作都可以看成(抽象)是一个数据流。</p>

        <h3 id="认识-Rxjs"   >
          <a href="#认识-Rxjs" class="heading-link"><i class="fas fa-link"></i></a><a href="#认识-Rxjs" class="headerlink" title="认识 Rxjs"></a><strong>认识 Rxjs</strong></h3>
      <p>Rxjs是一套由Observable sequences (可观察的对象序列)来组合异步行为和事件流的library。</p>
<p>Rxjs中的数据流可能包含复杂的功能，但是可以分解成一个个单体来实现，实现某个小功能就是<strong>操作符</strong>，学习RxJS就是学习如何组合操作符来解决复杂问题。</p>
<blockquote>
<p>简单的说，可以把Rxjs看成是异步的lodash</p>
</blockquote>
<p>这也被称为Functional Reactive Programming，更切确地说是指Functional Programming 及Reactive Programming 两个编程思想的结合。</p>
<p>Reactive Programming 简单来说就是 <strong>当变量或资源发生变动时，由变量或资源自动告诉我发生变动了。想想Vue</strong></p>
<p>丰富多彩的前端界：<strong>Angular</strong>、<strong>Nestjs</strong>、vue-rx、redux-observable</p>

        <h3 id="RxJS-核心概念与内容概览"   >
          <a href="#RxJS-核心概念与内容概览" class="heading-link"><i class="fas fa-link"></i></a><a href="#RxJS-核心概念与内容概览" class="headerlink" title="RxJS 核心概念与内容概览"></a><strong>RxJS 核心概念与内容概览</strong></h3>
      <ul>
<li><strong>Observable (可观察对象):</strong> 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li>
<li><strong>Observer (观察者):</strong> 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li>
<li><strong>Subscription (订阅):</strong> 表示 Observable 的执行，具体应该做何操作。</li>
<li><strong>Operators (操作符):</strong> 采用函数式编程风格的纯函数 (pure function)，使用像 <code>map</code>、<code>filter</code>、<code>concat</code>、<code>flatMap</code> 等这样的操作符来处理集合。</li>
<li><strong>Subject (主体):</strong> 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li>
<li><strong>Schedulers (调度器):</strong> 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 或其他。</li>
</ul>
<blockquote>
<p>让我们来看个小例子，假设我们想要监听点击事件，但点击一次之后不再监听</p>
</blockquote>
<ul>
<li>Javascript</li>
</ul>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> <span class="hljs-title function_">handler</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>	<span class="hljs-comment">// 取消监听</span><br>	<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handler); <br>&#125;<br><span class="hljs-comment">// 监听</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handler);<br></code></pre></td></tr></table></div></figure>

<ul>
<li>使用Rxjs</li>
</ul>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span><br>	.<span class="hljs-title function_">fromEvent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, <span class="hljs-string">&#x27;click&#x27;</span>) <span class="hljs-comment">// 注册</span><br>	.<span class="hljs-title function_">take</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 只取一次，是不是很像lodash的once</span><br>	.<span class="hljs-title function_">subscribe</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br></code></pre></td></tr></table></div></figure>

<p>什么是<strong>Observable</strong></p>
<p>看点其他的</p>
<p>观察者</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>	<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>		<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span> = [];<br>	&#125;<br>	<span class="hljs-title function_">addListener</span>(<span class="hljs-params">listener</span>) &#123;<br>		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> listener === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>			<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">push</span>(listener)<br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;listener must be function&#x27;</span>)<br>		&#125;<br>	&#125;<br>	<span class="hljs-title function_">removeListener</span>(<span class="hljs-params">listener</span>) &#123;<br>		<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">indexOf</span>(listener), <span class="hljs-number">1</span>)<br>	&#125;<br>	<span class="hljs-title function_">notify</span>(<span class="hljs-params">message</span>) &#123;<br>		<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">listener</span> =&gt;</span> &#123;<br>			<span class="hljs-title function_">listener</span>(message);<br>		&#125;)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> egghead = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(); <br><span class="hljs-comment">// new egghead</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">listener1</span>(<span class="hljs-params">message</span>) &#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message + <span class="hljs-string">&#x27;from listener1&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">listener2</span>(<span class="hljs-params">message</span>) &#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message + <span class="hljs-string">&#x27;from listener2&#x27;</span>);<br>&#125;<br>egghead.<span class="hljs-title function_">addListener</span>(listener1); <span class="hljs-comment">// 注册</span><br>egghead.<span class="hljs-title function_">addListener</span>(listener2);<br>egghead.<span class="hljs-title function_">notify</span>(<span class="hljs-string">&#x27;A new course!!&#x27;</span>) <span class="hljs-comment">// 执行</span><br></code></pre></td></tr></table></div></figure>

<p>iterator可迭代，渐进取值</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> iterator = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 1, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 2, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: 3, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>();<br><span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></div></figure>

<p>Observable 的字面意思是「可观察的」，Observable 就像是一个序列，里面的元素会随着时间推送。</p>
<p>在 RxJS 里你其实可以理解为「<strong>把任何数据封装成，具备可观察、可处理、可订阅能力的类</strong>」。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20220829233153.png" >
      </p>
<p>直接来吧</p>
<p>创建<strong>Observable</strong></p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> observable = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span><br>	.<span class="hljs-title function_">create</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">observer</span>) &#123;<br>		observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;Jerry&#x27;</span>);<br>		observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;Anna&#x27;</span>);<br>	&#125;)<br>	<br><span class="hljs-comment">// 订阅observable	</span><br>observable.<span class="hljs-title function_">subscribe</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;)<br></code></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/holy-voice-htnno4?file=/index.html" >https://codesandbox.io/s/holy-voice-htnno4?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> observable = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">create</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">observer</span>) &#123;<br>        observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>        observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;Anna&quot;</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;RxJS learning&quot;</span>);<br>        &#125;, <span class="hljs-number">30</span>);<br>      &#125;);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br><br>      <span class="hljs-comment">// 订阅observable</span><br>      observable.<span class="hljs-title function_">subscribe</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>      &#125;);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/xenodochial-almeida-81xjmj?file=/index.html" >https://codesandbox.io/s/xenodochial-almeida-81xjmj?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> observable = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span><br>	.<span class="hljs-title function_">create</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">observer</span>) &#123;<br>		observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;Jerry&#x27;</span>);<br>		observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;Anna&#x27;</span>);<br>	&#125;)<br>observable.<span class="hljs-title function_">subscribe</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); &#125;,<span class="hljs-comment">// 正常</span><br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error: &#x27;</span>, error); &#125;,<span class="hljs-comment">//错误</span><br>    <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>) &#125; <span class="hljs-comment">// 结束</span><br>)<br></code></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/damp-waterfall-zzj0i1?file=/index.html" >https://codesandbox.io/s/damp-waterfall-zzj0i1?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> observable = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">create</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">observer</span>) &#123;<br>        observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>        observer.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;Anna&quot;</span>);<br>				observer.<span class="hljs-title function_">complete</span>();<span class="hljs-comment">// 结束</span><br>      &#125;);<br>      observable.<span class="hljs-title function_">subscribe</span>(&#123;<br>				<span class="hljs-comment">// 正常</span><br>        <span class="hljs-attr">next</span>: <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>        &#125;,<br>				<span class="hljs-comment">// 错误</span><br>        <span class="hljs-attr">error</span>: <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error&quot;</span>, v);<br>        &#125;,<br>				<span class="hljs-comment">// 结束</span><br>        <span class="hljs-attr">complete</span>: <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;complete&quot;</span>);<br>        &#125;<br>      &#125;);<br></code></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/interesting-bogdan-bzibtu?file=/index.html" >https://codesandbox.io/s/interesting-bogdan-bzibtu?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>除了基本的创建之外，还有许多 <strong>Creation Operator</strong></p>
<div class="table-container"><table>
<thead>
<tr>
<th>of</th>
<th>Rx.Observable.of(‘Jerry’, ‘Anna’)</th>
<th><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/floral-sunset-8cv5fb?file=/index.html" >https://codesandbox.io/s/floral-sunset-8cv5fb?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></th>
</tr>
</thead>
<tbody><tr>
<td>from</td>
<td>和of类似，参数是一个数组或者类数组，或者 promise</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/peaceful-water-6bhrun?file=/index.html" >https://codesandbox.io/s/peaceful-water-6bhrun?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/dreamy-lichterman-gcxh9b?file=/index.html" >https://codesandbox.io/s/dreamy-lichterman-gcxh9b?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>  promise</td>
</tr>
<tr>
<td>fromEvent</td>
<td>来自一个事件</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/immutable-https-hpctyh?file=/index.html" >https://codesandbox.io/s/immutable-https-hpctyh?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>fromPromise</td>
<td>传入一个promise</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/dreamy-lichterman-gcxh9b?file=/index.html" >https://codesandbox.io/s/dreamy-lichterman-gcxh9b?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>  promise</td>
</tr>
<tr>
<td>never</td>
<td>∞无穷，永远不会完成</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/quirky-panna-1tz6sl?file=/index.html" >https://codesandbox.io/s/quirky-panna-1tz6sl?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>empty</td>
<td>空的，直接完成</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/green-lake-mdep1g?file=/index.html" >https://codesandbox.io/s/green-lake-mdep1g?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>throw</td>
<td>promise.reject() 类似的意思，立马执行error</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/intelligent-field-bekvj9?file=/index.html" >https://codesandbox.io/s/intelligent-field-bekvj9?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>interval</td>
<td>和setInterval触发next类似，就是多次触发next的简单写法</td>
<td></td>
</tr>
<tr>
<td>参数时间间隔</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/busy-robinson-y4pqet?file=/index.html" >https://codesandbox.io/s/busy-robinson-y4pqet?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
<td></td>
</tr>
<tr>
<td>timer</td>
<td>当 timer 有两个参数时，第一个参数的时间间隔，之后参数的时间间隔</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/loving-sound-xb4rtz?file=/index.html" >https://codesandbox.io/s/loving-sound-xb4rtz?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
</tbody></table></div>
<p>取消订阅</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">subscriptionA.<span class="hljs-title function_">unsubscribe</span>()<br></code></pre></td></tr></table></div></figure>


        <h2 id="什么是Operator？"   >
          <a href="#什么是Operator？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是Operator？" class="headerlink" title="什么是Operator？"></a>什么是Operator？</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://rxjs-cn.github.io/learn-rxjs-operators/" >学习 RxJS 操作符</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>Operators 就是一个个被附加到Observable 工具函数，例如像是map, filter, contactAll…等等，所有这些函数都会拿到原本的observable 并回传一个新的observable。</p>

        <h3 id="弹珠图（marble-diagrams）"   >
          <a href="#弹珠图（marble-diagrams）" class="heading-link"><i class="fas fa-link"></i></a><a href="#弹珠图（marble-diagrams）" class="headerlink" title="弹珠图（marble diagrams）"></a>弹珠图（marble diagrams）</h3>
      <p>学习网址：<span class="exturl"><a class="exturl__link"   href="https://rxmarbles.com/" >https://rxmarbles.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>弹珠图（Marble diagrams）就是用图例形象地表示 Observable 和各种操作符的一种方法。<br>用 - 表示一小段时间，X 代表有错误发生， | 表示结束，() 表示同步发生。</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>);<br>-----<span class="hljs-number">0</span>-----<span class="hljs-number">1</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">3</span>--...<br></code></pre></td></tr></table></div></figure>

<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>(<span class="hljs-number">1234</span>)|<br></code></pre></td></tr></table></div></figure>

<div class="table-container"><table>
<thead>
<tr>
<th>map</th>
<th>array map</th>
<th><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/muddy-cookies-yr7kld?file=/index.html" >https://codesandbox.io/s/muddy-cookies-yr7kld?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></th>
</tr>
</thead>
<tbody><tr>
<td>filter</td>
<td>array filter，过滤出结果为真的</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/youthful-bas-xy70pv?file=/index.html" >https://codesandbox.io/s/youthful-bas-xy70pv?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>mapTo</td>
<td>可以把传进来的值改成一个固定的值</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/mystifying-turing-0op67y?file=/index.html" >https://codesandbox.io/s/mystifying-turing-0op67y?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>take</td>
<td>取前几个元素后就结束,array slice?</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/happy-brook-o4rwpe?file=/index.html" >https://codesandbox.io/s/happy-brook-o4rwpe?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>takeLast</td>
<td>取后面几个</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/practical-turing-5zx90z?file=/index.html" >https://codesandbox.io/s/practical-turing-5zx90z?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>first</td>
<td>取第一个</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/adoring-breeze-9s4qk7?file=/index.html" >https://codesandbox.io/s/adoring-breeze-9s4qk7?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>last</td>
<td>取最后一个</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/quizzical-tdd-twhll9?file=/index.html" >https://codesandbox.io/s/quizzical-tdd-twhll9?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>takeUntil</td>
<td>他可以在某件事情发生时，让一个observable 直送出完成(complete)讯息</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/eloquent-elbakyan-zlfkmf?file=/index.html" >https://codesandbox.io/s/eloquent-elbakyan-zlfkmf?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>concatAll</td>
<td>二维数组转以为数组</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/icy-darkness-pmrnfr?file=/index.html" >https://codesandbox.io/s/icy-darkness-pmrnfr?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>skip</td>
<td>跳过n个</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/serene-mendel-ovy5zh?file=/index.html" >https://codesandbox.io/s/serene-mendel-ovy5zh?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>concat</td>
<td>可以把多个observable 实例合并成一个,有先后顺序</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/strange-euclid-b2vw9o?file=/index.html" >https://codesandbox.io/s/strange-euclid-b2vw9o?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>startWith</td>
<td>可以在observable 的一开始塞要发送的元素</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/intelligent-dream-vdwcs8?file=/index.html" >https://codesandbox.io/s/intelligent-dream-vdwcs8?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>merge</td>
<td>merge把多个observable 同时处理，这跟 concat 一次处理一个observable 是完全不一样的，OR 语法</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/inspiring-thompson-eivrys?file=/index.html" >https://codesandbox.io/s/inspiring-thompson-eivrys?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>zip</td>
<td>zip 会取每个observable 相同顺序的元素并传入callback</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/adoring-mestorf-znmkzp?file=/index.html" >https://codesandbox.io/s/adoring-mestorf-znmkzp?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>combineLatest</td>
<td>取得各个observable 最后送出的值，再输出成一个值</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/gallant-hopper-w7hhfh?file=/index.html" >https://codesandbox.io/s/gallant-hopper-w7hhfh?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>withLatestFrom</td>
<td>只有在主要的observable 送出新的值时，才会执行callback。<br/><strong>主的订阅时候取最新的从的状态</strong></td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/rough-mountain-2gwsio?file=/index.html" >https://codesandbox.io/s/rough-mountain-2gwsio?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>scan</td>
<td>array reduce</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/angry-dust-pudel1?file=/index.html" >https://codesandbox.io/s/angry-dust-pudel1?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>buffer</td>
<td>source.buffer(source2)，根据source2的触发去触发source</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/dazzling-bird-mlibg4?file=/index.html:0-736" >https://codesandbox.io/s/dazzling-bird-mlibg4?file=/index.html:0-736</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>bufferTime</td>
<td>指定时间去触发</td>
<td></td>
</tr>
<tr>
<td>bufferCount</td>
<td>指定数量去触发</td>
<td></td>
</tr>
<tr>
<td>delay</td>
<td>整体延迟触发</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/blissful-murdock-719bir?file=/index.html" >https://codesandbox.io/s/blissful-murdock-719bir?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>delayWhen</td>
<td>每个元素延迟触发</td>
<td><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/stoic-volhard-7ycxg0?file=/index.html" >https://codesandbox.io/s/stoic-volhard-7ycxg0?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
</tbody></table></div>
<p> map</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">var</span> newest = source.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">1</span>);<br><br><span class="hljs-attr">source</span>: -----<span class="hljs-number">0</span>-----<span class="hljs-number">1</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">3</span>--...<br>            <span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">1</span>)<br><span class="hljs-attr">newest</span>: -----<span class="hljs-number">1</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">3</span>-----<span class="hljs-number">4</span>--...<br></code></pre></td></tr></table></div></figure>

<p>mapTo</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">source</span>: -----<span class="hljs-number">0</span>-----<span class="hljs-number">1</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">3</span>--...<br>                <span class="hljs-title function_">mapTo</span>(<span class="hljs-number">2</span>)<br><span class="hljs-attr">newest</span>: -----<span class="hljs-number">2</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">2</span>--...<br></code></pre></td></tr></table></div></figure>

<p>filter</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">source</span>: -----<span class="hljs-number">0</span>-----<span class="hljs-number">1</span>-----<span class="hljs-number">2</span>-----<span class="hljs-number">3</span>-----<span class="hljs-number">4</span>-...<br>            <span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br><span class="hljs-attr">newest</span>: -----<span class="hljs-number">0</span>-----------<span class="hljs-number">2</span>-----------<span class="hljs-number">4</span>-...<br></code></pre></td></tr></table></div></figure>

<p><strong>concatAll</strong></p>
<p>就像数组的map一样，map后面返回都是要是一个和原数组元素的一样的类型，你返回一个不一样的就需要转换了，这里的observeable是一样的道理</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">i</span>=&gt;</span>i+<span class="hljs-number">1</span>)<span class="hljs-comment">// [1,2]</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">i</span>=&gt;</span>[i+<span class="hljs-number">1</span>]) <span class="hljs-comment">// [[1],[2]] ??  concatAll [1,2]</span><br><br><span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">i</span>=&gt;</span>i+<span class="hljs-number">1</span>) <span class="hljs-comment">// 1,2,3...</span><br><span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">i</span>=&gt;</span><span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">of</span>(i+<span class="hljs-number">1</span>))<br> <span class="hljs-comment">// Observable&lt;Observable&gt;  ?? 就不是了，需要拍平</span><br></code></pre></td></tr></table></div></figure>

<p>rxjs更多的是一种思维的转变，小demo</p>
<p><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/magical-williamson-if3w30?file=/index.html:652-1233" >https://codesandbox.io/s/magical-williamson-if3w30?file=/index.html:652-1233</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>过程</p>
<ol>
<li>选择元素</li>
<li>绑定事件</li>
<li>按下的时候开始</li>
<li>监听移动，同步修改位置</li>
<li>弹起取消</li>
</ol>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> dragDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;drag&quot;</span>);<br><span class="hljs-keyword">const</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br><span class="hljs-keyword">const</span> mouseDown = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(dragDOM, <span class="hljs-string">&quot;mousedown&quot;</span>);<br><span class="hljs-keyword">const</span> mouseUp = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(body, <span class="hljs-string">&quot;mouseup&quot;</span>);<br><span class="hljs-keyword">const</span> mouseMove = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(body, <span class="hljs-string">&quot;mousemove&quot;</span>);<br><span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>;<br>mouseDown<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    x = event.<span class="hljs-property">offsetX</span>;<br>    y = event.<span class="hljs-property">offsetY</span>;<br>    <span class="hljs-keyword">return</span> mouseMove.<span class="hljs-title function_">takeUntil</span>(mouseUp);<br>  &#125;)<br>  .<span class="hljs-title function_">concatAll</span>()<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> (&#123; <span class="hljs-attr">x</span>: event.<span class="hljs-property">clientX</span>, <span class="hljs-attr">y</span>: event.<span class="hljs-property">clientY</span> &#125;))<br>  .<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">pos</span>) =&gt;</span> &#123;<br>    dragDOM.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = pos.<span class="hljs-property">x</span> - x + <span class="hljs-string">&quot;px&quot;</span>;<br>    dragDOM.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = pos.<span class="hljs-property">y</span> - y + <span class="hljs-string">&quot;px&quot;</span>;<br></code></pre></td></tr></table></div></figure>

<p><strong>takeLast</strong></p>
<p>原来的是需要先执行的，不然我怎么知道后面几个是是什么</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> source = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">take</span>(<span class="hljs-number">6</span>);<br><span class="hljs-keyword">var</span> example = source.<span class="hljs-title function_">takeLast</span>(<span class="hljs-number">2</span>);<br>example.<span class="hljs-title function_">subscribe</span>(&#123;<br>    <span class="hljs-attr">next</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); &#125;,<br>    <span class="hljs-attr">error</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error: &#x27;</span> + err); &#125;,<br>    <span class="hljs-attr">complete</span>: <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>); &#125;<br>&#125;);<br><br>source : ----<span class="hljs-number">0</span>----<span class="hljs-number">1</span>----<span class="hljs-number">2</span>----<span class="hljs-number">3</span>----<span class="hljs-number">4</span>----<span class="hljs-number">5</span>|<br>                <span class="hljs-title function_">takeLast</span>(<span class="hljs-number">2</span>)<br><span class="hljs-attr">example</span>: ------------------------------(<span class="hljs-number">45</span>)|<br></code></pre></td></tr></table></div></figure>

<p>merge </p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : ----<span class="hljs-number">0</span>----<span class="hljs-number">1</span>----<span class="hljs-number">2</span>|<br><span class="hljs-attr">source2</span>: --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>--<span class="hljs-number">5</span>|<br>            <span class="hljs-title function_">merge</span>()<br><span class="hljs-attr">example</span>: --<span class="hljs-number">0</span>-<span class="hljs-number">01</span>--<span class="hljs-number">21</span>-<span class="hljs-number">3</span>--(<span class="hljs-number">24</span>)--<span class="hljs-number">5</span>|<br><br><span class="hljs-variable constant_">OR</span> 语法<br></code></pre></td></tr></table></div></figure>

<p><strong><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/gallant-hopper-w7hhfh?file=/index.html" >combineLatest</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></strong></p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : ----<span class="hljs-number">0</span>----<span class="hljs-number">1</span>----<span class="hljs-number">2</span>|<br>newest : --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>--<span class="hljs-number">5</span>|<br>    <span class="hljs-title function_">combineLatest</span>(newest, <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y);<br><span class="hljs-attr">example</span>: ----<span class="hljs-number">01</span>--<span class="hljs-number">23</span>-<span class="hljs-number">4</span>--(<span class="hljs-number">56</span>)--<span class="hljs-number">7</span>|<br><span class="hljs-number">00</span>-<span class="hljs-number">01</span>-<span class="hljs-number">02</span>-<span class="hljs-number">12</span>-<span class="hljs-number">13</span>-<span class="hljs-number">14</span>-<span class="hljs-number">24</span>-<span class="hljs-number">25</span><br></code></pre></td></tr></table></div></figure>

<p>zip</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : ----<span class="hljs-number">0</span>----<span class="hljs-number">1</span>----<span class="hljs-number">2</span>|<br>newest : --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>--<span class="hljs-number">5</span>|<br>    <span class="hljs-title function_">zip</span>(newest, <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y)<br><span class="hljs-attr">example</span>: ----<span class="hljs-number">0</span>----<span class="hljs-number">2</span>----<span class="hljs-number">4</span>|<br></code></pre></td></tr></table></div></figure>

<p>withLatestFrom</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">main   : ----h----e----l----l----o|<br>some   : --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">0</span>--<span class="hljs-number">0</span>--<span class="hljs-number">0</span>--<span class="hljs-number">1</span>|<br><span class="hljs-title function_">withLatestFrom</span>(some, <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span>  y === <span class="hljs-number">1</span> ? x.<span class="hljs-title function_">toUpperCase</span>() : x);<br><span class="hljs-attr">example</span>: ----h----e----l----L----O|<br><br>main 送出了h，此时some 上一次送出的值为<span class="hljs-number">0</span>，把这两个参数传入callback 得到h。<br>main 送出了e，此时some 上一次送出的值为<span class="hljs-number">0</span>，把这两个参数传入callback 得到e。<br>main 送出了l，此时some 上一次送出的值为<span class="hljs-number">0</span>，把这两个参数传入callback 得到l。<br>main 送出了l，此时some 上一次送出的值为<span class="hljs-number">1</span>，把这两个参数传入callback 得到L。<br>main 送出了o，此时some 上一次送出的值为<span class="hljs-number">1</span>，把这两个参数传入callback 得到O。<br><br>withLatestFrom 很常用在一些checkbox 型的功能，例如说一个编辑器，我们开启粗体后，<br>打出来的字就都要变粗体，粗体就像是some observable，而我们打字就是main observable。<br></code></pre></td></tr></table></div></figure>

<p>小demo2</p>
<p><span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/wonderful-pasteur-s9ebp3" >https://codesandbox.io/s/wonderful-pasteur-s9ebp3</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>scan </p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : ----h----e----l----l----o|<br>    <span class="hljs-title function_">scan</span>(<span class="hljs-function">(<span class="hljs-params">origin, next</span>) =&gt;</span> origin + next, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-attr">example</span>: ----h----(he)----(hel)----(hell)----(hello)|<br></code></pre></td></tr></table></div></figure>

<p>加法减法demo3 <span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/recursing-shaw-d1ubvq?file=/index.html" >https://codesandbox.io/s/recursing-shaw-d1ubvq?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>buffer</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>--<span class="hljs-number">5</span>--<span class="hljs-number">6</span>--<span class="hljs-number">7.</span>.<br><span class="hljs-attr">source2</span>: ---------<span class="hljs-number">0</span>---------<span class="hljs-number">1</span>--------...<br>            <span class="hljs-title function_">buffer</span>(source2)<br><span class="hljs-attr">example</span>: ---------([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])---------([<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></div></figure>

<p>delay</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>|<br>        <span class="hljs-title function_">delay</span>(<span class="hljs-number">500</span>)<br><span class="hljs-attr">example</span>: -------<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>|<br></code></pre></td></tr></table></div></figure>

<p>delayWhen</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">source : --<span class="hljs-number">0</span>--<span class="hljs-number">1</span>--<span class="hljs-number">2</span>--<span class="hljs-number">3</span>--<span class="hljs-number">4</span>|<br>    .<span class="hljs-title function_">delayWhen</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">empty</span>().<span class="hljs-title function_">delay</span>(<span class="hljs-number">100</span> * x * x));<br><span class="hljs-attr">example</span>: --<span class="hljs-number">0</span>---<span class="hljs-number">1</span>----<span class="hljs-number">2</span>-----<span class="hljs-number">3</span>-----<span class="hljs-number">4</span>|<br></code></pre></td></tr></table></div></figure>

<p>demo4 <span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/hopeful-hoover-yf6m29?file=/index.html" >https://codesandbox.io/s/hopeful-hoover-yf6m29?file=/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>学习资料</p>
<p><span class="exturl"><a class="exturl__link"   href="https://rxjs.dev/" >https://rxjs.dev/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://cn.rx.js.org/" >https://cn.rx.js.org/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://rxmarbles.com/" >https://rxmarbles.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://rxjs-cn.github.io/RxJS-Ultimate-CN/" >https://rxjs-cn.github.io/RxJS-Ultimate-CN/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://blog.jerry-hong.com/series/rxjs" >https://blog.jerry-hong.com/series/rxjs</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <tags>
        <tag>RXJS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于画点连线的思考</title>
    <url>/posts/thoughts-on-drawing-dotted-lines.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>点和线是平面世界的基础，而画点连线更是基本操作。但是关于画点连线的方法，以及所能带来的思考，也是蛮有意思的。</p>
<p>在这片文章中，我会简单分析画点连线的基本方法。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210404111938.png" >
      </p>
<span id="more"></span>


        <h2 id="一起来画画"   >
          <a href="#一起来画画" class="heading-link"><i class="fas fa-link"></i></a><a href="#一起来画画" class="headerlink" title="一起来画画"></a>一起来画画</h2>
      
        <h3 id="基本的画点连线"   >
          <a href="#基本的画点连线" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本的画点连线" class="headerlink" title="基本的画点连线"></a>基本的画点连线</h3>
      <p>在这个章节，我们会创建 <code>canvas</code> 并且在上面获取鼠标的点的位置，并且将点放入一个数组存储，用直线连接起来。为了方便操作，我们使用 <span class="exturl"><a class="exturl__link"   href="https://www.pixijs.com/" >PIXI</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 这个库来简化操作。</p>
<p>具体的细节步骤如下：</p>
<ul>
<li>首先使用 PIXI 初始化应用，创建一个舞台</li>
<li>然后获取 app.view，在 canvas 上面绑定点击事件</li>
<li>获取点击事件的具体的坐标，在对应位置绘制圆，将其放入数组存储</li>
<li>循环遍历数组，将两点依次连线，绘制出图形。</li>
</ul>
<p>便可以得出以下的效果<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327114145.png" >
      <br>也可以在下面的环境中测试。</p>
<p class="codepen" data-height="600" data-theme-id="dark" data-default-tab="js,result" data-user="kitety" data-slug-hash="xxgVzpW" data-preview="true" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="xxgVzpW">
  <span>See the Pen <span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety/pen/xxgVzpW" >
  xxgVzpW</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> by kitety (<span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety" >@kitety</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)
  on <span class="exturl"><a class="exturl__link"   href="https://codepen.io" >CodePen</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

<p>上述的 demo 基本的实现了直线连接，但是表述很生硬，就是一段一段的线段，没有任何的美感。假如我们想要的是折线图，这就已经实现目标了，但是如果我们想要的是有点美感的曲线呢？这应该怎么做呢？这个时候就该我们的贝赛尔曲线登场了。</p>

        <h3 id="贝赛尔曲线"   >
          <a href="#贝赛尔曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#贝赛尔曲线" class="headerlink" title="贝赛尔曲线"></a>贝赛尔曲线</h3>
      <p>在<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" >维基百科</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中，他是这么解释的：在数学的数值分析领域中，贝塞尔曲线（英语：Bézier curve）是计算机图形学中相当重要的参数曲线。</p>
<p>感觉还是不理解，详细的过程可以参考这篇<span class="exturl"><a class="exturl__link"   href="https://github.com/hujiulong/blog/issues/1" >文章</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>本节不是对贝塞尔曲线做专业分析，如果有需要请参考其他网站，本文引用已经列举出来了。</p>

        <h4 id="二次贝赛尔曲线"   >
          <a href="#二次贝赛尔曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#二次贝赛尔曲线" class="headerlink" title="二次贝赛尔曲线"></a>二次贝赛尔曲线</h4>
      <p>大概的二次贝赛尔曲线就如下图所示：<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://z3.ax1x.com/2021/03/27/6x5yX4.gif" >
      <br>二次贝塞尔曲线由三个点 <code>P0</code>、<code>P1</code>、<code>P2</code> 来确定，这些点也叫做控制点。我们需要三个点就可以绘制出一条二次贝赛尔曲线，在 <code>canvas</code> 中的对应的方法就是<code>quadraticCurveTo</code>这个方法。</p>

        <h4 id="高次贝塞尔曲线"   >
          <a href="#高次贝塞尔曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#高次贝塞尔曲线" class="headerlink" title="高次贝塞尔曲线"></a>高次贝塞尔曲线</h4>
      <p>随着控制点的个数的增加，可以有三次，四次，N 次贝赛尔曲线，再多就不过多探讨。需要提示一下，绘制三次贝塞尔曲线的方法<code>bezierCurveTo</code>。</p>

        <h3 id="使用贝塞尔曲线绘制平滑曲线"   >
          <a href="#使用贝塞尔曲线绘制平滑曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用贝塞尔曲线绘制平滑曲线" class="headerlink" title="使用贝塞尔曲线绘制平滑曲线"></a>使用贝塞尔曲线绘制平滑曲线</h3>
      <p>要想绘制贝赛尔曲线，我们最简单的思路就是需要找准起点，控制点，终点。</p>
<p>最简单的就是假如我们有 A、B、C 三个点，我们需要绘制一条看似还算完美的曲线，我们应该怎么去思考呢？</p>
<p>我们会计算出 B 和 C 的中点 B1，以 A 为起点，B 为控制点，B1 为终点，最后将 B1、C 用直线链接。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327121024.png" >
      </p>
<p>当然这只是三个点的情况，我们如此循环往复就可以绘制足够多的点了。</p>

        <h4 id="代码简析"   >
          <a href="#代码简析" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码简析" class="headerlink" title="代码简析"></a>代码简析</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawLine</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 绘制之前全部清除</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> ii = <span class="hljs-number">0</span>; ii &lt; ss.<span class="hljs-property">length</span>; ii++) &#123;<br>    <span class="hljs-keyword">const</span> bezier = ss[ii];<br>    app.<span class="hljs-property">stage</span>.<span class="hljs-title function_">removeChild</span>(bezier);<br>  &#125;<br>  ss = [];<br><br>  <span class="hljs-keyword">let</span> start = arr[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// 两个点直接连线</span><br>    <span class="hljs-title function_">drawBaseLine</span>(start.<span class="hljs-property">pos</span>, arr[<span class="hljs-number">1</span>].<span class="hljs-property">pos</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> control = arr[i];<br>      <span class="hljs-keyword">let</span> end;<br>      <span class="hljs-keyword">if</span> (!arr[i + <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-comment">// 后面没有点了，将上一个贝塞尔曲线的终点和当前点连接</span><br>        <span class="hljs-title function_">drawBaseLine</span>(start.<span class="hljs-property">pos</span>, arr[i].<span class="hljs-property">pos</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 将贝赛尔曲线终点设置为两点之间的中点</span><br>        end = <span class="hljs-title function_">getMiddle</span>(arr[i], arr[i + <span class="hljs-number">1</span>]);<br>      &#125;<br>      <span class="hljs-comment">//  绘制贝赛尔曲线</span><br>      <span class="hljs-keyword">var</span> bezier = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-title class_">Graphics</span>();<br><br>      bezier.<span class="hljs-title function_">lineStyle</span>(<span class="hljs-number">4</span>, <span class="hljs-number">0x1a7af8</span>, <span class="hljs-number">1</span>);<br>      bezier.<span class="hljs-title function_">moveTo</span>(start.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>, start.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>);<br>      bezier.<span class="hljs-title function_">quadraticCurveTo</span>(<br>        control.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>,<br>        control.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>,<br>        end.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>,<br>        end.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span><br>      );<br>      bezier.<span class="hljs-title function_">endFill</span>();<br>      start = end;<br>      app.<span class="hljs-property">stage</span>.<span class="hljs-title function_">addChild</span>(bezier);<br>      ss.<span class="hljs-title function_">push</span>(bezier);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>这样我们就可以尽量绘制出比较平滑的曲线了<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327123049.png" >
      <br>也可以在下面的环境中测试。</p>
<p class="codepen" data-height="600" data-theme-id="dark" data-default-tab="js,result" data-user="kitety" data-slug-hash="eYgZjOM" data-preview="true" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="eYgZjOM">
  <span>See the Pen <span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety/pen/eYgZjOM" >
  eYgZjOM</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> by kitety (<span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety" >@kitety</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)
  on <span class="exturl"><a class="exturl__link"   href="https://codepen.io" >CodePen</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

<p>上述的代码基本是实现了比较平滑的曲线，但是我们的还是会发现一些问题，就是在绘制的时候会出现画出来的线并没有经过所有点这种情况。而且参考的文章下面也有了类似的思考，一样抛出了这个问题。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210404111818.png" >
      </p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327123211.png" >
      <br>看来革命尚未成功，同志仍需努力啊。</p>

        <h3 id="相似三角形与贝赛尔曲线"   >
          <a href="#相似三角形与贝赛尔曲线" class="heading-link"><i class="fas fa-link"></i></a><a href="#相似三角形与贝赛尔曲线" class="headerlink" title="相似三角形与贝赛尔曲线"></a>相似三角形与贝赛尔曲线</h3>
      <p>其实在处理问题的时候，我们需要将问题简单化。比如在画点连线的过程中，我们很轻易的知道，两点之间肯定是连接直线就是最佳的。在需要曲线的时候，往往是两个点以上，因此我们就先画好三个点的曲线。</p>

        <h4 id="切线"   >
          <a href="#切线" class="heading-link"><i class="fas fa-link"></i></a><a href="#切线" class="headerlink" title="切线"></a>切线</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327135731.png" >
      <br>如图，我们为三个点分了三种情况，其实前面两种很明显都是不合理的，都出现了没有必要的弯曲，只有最后一种稍显合理。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327135938.png" >
      <br>我们围绕三种情况 B 点的位置做出切线，发现只有看 k1 和 k2 的斜率几乎一直的时候才是比较合理的曲线，也就是三点中，曲线经过中间一点的切线和另外两点所成的直线平行的时候，这样的曲线才是比较合理的。</p>

        <h4 id="贝塞尔切线"   >
          <a href="#贝塞尔切线" class="heading-link"><i class="fas fa-link"></i></a><a href="#贝塞尔切线" class="headerlink" title="贝塞尔切线"></a>贝塞尔切线</h4>
      <p>而贝赛尔曲线的绘制图如下<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://z3.ax1x.com/2021/03/27/6x5yX4.gif" >
      <br>我们截取中间的某个时刻会发现，很明显，贝塞尔曲线的起点和终点（其实也是控制点），他们的切线其实就是和轨迹相切的，这也是贝赛尔曲线的绘制方法，只不过起点和终点对应的就是 <code>t</code> 的 <code>0</code> 时刻和 <code>1</code> 时刻。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327140837.png" >
      </p>
<p>结论：我们绘制的曲线经过点的切线要和相邻的两点的直线平行，而贝赛尔曲线就是起点和终点平行，我们现在只需要找到其他的控制点绘制贝塞尔曲线即可。</p>

        <h4 id="解决问题"   >
          <a href="#解决问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327141659.png" >
      </p>
<p>根据以上的思考，我们就有了后续的思路，我们分别需要在 AB 之间绘制一条贝赛尔曲线，B 为终点，切线相切；同时还要在 BC 之间绘制贝塞尔曲线，并且 B 点此时作为起点，要和上一条曲线经过 B 点的斜率一致。我们就有了上示的草稿图，并且可以得出一些相似的三角形。<br>在当我们有了 A、B、C 三个点的坐标之后，还有对应的相似比 <code>S1</code> 和 <code>S2</code>，<code>P1</code> 和 <code>P2</code> 的坐标就是比较简单了。</p>
<p>接下来我们简单分析一下有 ABCDE 五个点的情况。我们五点中，中间的三个点是 BCD,我们都可以根据其各自的相邻两点做出对应的平行切线，并且每个点的切点上都可以找到对应两个点的控制点，根据控制点和各自的起点终点（其实也是控制点），我们可以绘制不同的红色举行的区域，分别可以用二次贝赛尔曲线绘制和三次贝赛尔曲线绘制。两点中有一个控制点的就是二次贝塞尔，比如 AB 之间；有两个控制点的就是三次贝塞尔，比如 BC 之间等。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210327143112.png" >
      </p>
<p>说了这么多我们还没有落实一个数据，就是上面提到的相似比，我们用 S 表示。采用一种简单的情况来做具体的分析<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210331221957.png" >
      </p>

        <h4 id="代码简析-1"   >
          <a href="#代码简析-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码简析-1" class="headerlink" title="代码简析"></a>代码简析</h4>
      <figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组的两个点的构成的直角三角形的[w，h](w：底边长度，h：高)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">va</span>(<span class="hljs-params">arr, i, j</span>) &#123;<br>  <span class="hljs-keyword">return</span> [arr[<span class="hljs-number">2</span> * j] - arr[<span class="hljs-number">2</span> * i], arr[<span class="hljs-number">2</span> * j + <span class="hljs-number">1</span>] - arr[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>]];<br>&#125;<br><span class="hljs-comment">// 计算arr数组的i和j两个点之间的距离</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">distance</span>(<span class="hljs-params">arr, i, j</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<br>    <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(arr[<span class="hljs-number">2</span> * i] - arr[<span class="hljs-number">2</span> * j], <span class="hljs-number">2</span>) +<br>      <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(arr[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>] - arr[<span class="hljs-number">2</span> * j + <span class="hljs-number">1</span>], <span class="hljs-number">2</span>)<br>  );<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">controlPoints</span>(<span class="hljs-params">x1, y1, x2, y2, x3, y3</span>) &#123;<br>  <span class="hljs-keyword">var</span> t = <span class="hljs-number">0.5</span>; <span class="hljs-comment">// 常数取得0.5</span><br>  <span class="hljs-comment">// 返回 w 和 h=&gt;[w,h]</span><br>  <span class="hljs-keyword">var</span> v = <span class="hljs-title function_">va</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">var</span> d01 = <span class="hljs-title function_">distance</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">var</span> d12 = <span class="hljs-title function_">distance</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>  <span class="hljs-comment">// 带入距离比例</span><br>  <span class="hljs-keyword">var</span> d012 = d01 + d12;<br>  <span class="hljs-keyword">return</span> [<br>    x2 - (v[<span class="hljs-number">0</span>] * t * d01) / d012,<br>    y2 - (v[<span class="hljs-number">1</span>] * t * d01) / d012,<br>    x2 + (v[<span class="hljs-number">0</span>] * t * d12) / d012,<br>    y2 + (v[<span class="hljs-number">1</span>] * t * d12) / d012,<br>  ];<br>&#125;<br><br><span class="hljs-keyword">let</span> ss = [];<br><span class="hljs-keyword">let</span> pts = [];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawLine2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 清楚所有的线段</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> ii = <span class="hljs-number">0</span>; ii &lt; ss.<span class="hljs-property">length</span>; ii++) &#123;<br>    <span class="hljs-keyword">const</span> bezier = ss[ii];<br>    app.<span class="hljs-property">stage</span>.<span class="hljs-title function_">removeChild</span>(bezier);<br>  &#125;<br>  ss = [];<br>  pts = [];<br>  <span class="hljs-comment">// 将点转换为位置的一维数组</span><br>  <span class="hljs-comment">// [&#123;pos:&#123;x1,y1&#125;&#125;,&#123;pos:&#123;x2,y2&#125;&#125;]=&gt;[x1,y1,x2,y2]</span><br>  arr<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.<span class="hljs-property">pos</span>)<br>    .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      pts.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">x</span>);<br>      pts.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">y</span>);<br>    &#125;);<br><br>  cps = []; <span class="hljs-comment">// 控制点的位置</span><br>  <span class="hljs-comment">// 根据点的位置计算控制点的位置</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; pts.<span class="hljs-property">length</span> - <span class="hljs-number">2</span>; i += <span class="hljs-number">1</span>) &#123;<br>    cps = cps.<span class="hljs-title function_">concat</span>(<br>      <span class="hljs-title function_">controlPoints</span>(<br>        pts[<span class="hljs-number">2</span> * i],<br>        pts[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>],<br>        pts[<span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>],<br>        pts[<span class="hljs-number">2</span> * i + <span class="hljs-number">3</span>],<br>        pts[<span class="hljs-number">2</span> * i + <span class="hljs-number">4</span>],<br>        pts[<span class="hljs-number">2</span> * i + <span class="hljs-number">5</span>]<br>      )<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> start = arr[<span class="hljs-number">0</span>];<br>  <span class="hljs-comment">// 两个点</span><br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-title function_">drawBaseLine</span>(start.<span class="hljs-property">pos</span>, arr[<span class="hljs-number">1</span>].<span class="hljs-property">pos</span>);<br>  &#125;<br>  <span class="hljs-comment">// 多个点</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;pts&quot;</span>, pts, <span class="hljs-string">&quot;cps&quot;</span>, cps);<br>  <span class="hljs-keyword">let</span> end;<br>  <span class="hljs-keyword">let</span> control;<br>  <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">3</span>) &#123;<br>    start = arr[<span class="hljs-number">0</span>];<br>    end = arr[<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 开始的部分为二次贝赛尔曲线</span><br>    <span class="hljs-keyword">var</span> bezier = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-title class_">Graphics</span>();<br>    bezier.<span class="hljs-title function_">lineStyle</span>(<span class="hljs-number">4</span>, <span class="hljs-number">0x1a7af8</span>, <span class="hljs-number">1</span>);<br>    bezier.<span class="hljs-title function_">moveTo</span>(start.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>, start.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>);<br>    bezier.<span class="hljs-title function_">quadraticCurveTo</span>(cps[<span class="hljs-number">0</span>], cps[<span class="hljs-number">1</span>], pts[<span class="hljs-number">2</span>], pts[<span class="hljs-number">3</span>]);<br>    bezier.<span class="hljs-title function_">endFill</span>();<br>    start = end;<br>    app.<span class="hljs-property">stage</span>.<span class="hljs-title function_">addChild</span>(bezier);<br>    ss.<span class="hljs-title function_">push</span>(bezier);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>; i &lt; len - <span class="hljs-number">1</span>; i += <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 中间部分为三次贝赛尔曲线</span><br>      start = end;<br><br>      <span class="hljs-keyword">var</span> bezier = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-title class_">Graphics</span>();<br>      bezier.<span class="hljs-title function_">lineStyle</span>(<span class="hljs-number">4</span>, <span class="hljs-number">0x1a7af8</span>, <span class="hljs-number">1</span>);<br>      bezier.<span class="hljs-title function_">moveTo</span>(start.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>, start.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>);<br>      bezier.<span class="hljs-title function_">bezierCurveTo</span>(<br>        cps[(<span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>],<br>        cps[(<span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>],<br>        cps[<span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>],<br>        cps[<span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>],<br>        pts[i * <span class="hljs-number">2</span>],<br>        pts[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>      );<br>      bezier.<span class="hljs-title function_">endFill</span>();<br>      end = arr[i];<br>      app.<span class="hljs-property">stage</span>.<span class="hljs-title function_">addChild</span>(bezier);<br>      ss.<span class="hljs-title function_">push</span>(bezier);<br>    &#125;<br><br>    start = end;<br>    <span class="hljs-comment">// 结束部分为二次贝赛尔曲线</span><br>    <span class="hljs-keyword">var</span> bezier = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-title class_">Graphics</span>();<br>    bezier.<span class="hljs-title function_">lineStyle</span>(<span class="hljs-number">4</span>, <span class="hljs-number">0x1a7af8</span>, <span class="hljs-number">1</span>);<br>    bezier.<span class="hljs-title function_">moveTo</span>(start.<span class="hljs-property">pos</span>.<span class="hljs-property">x</span>, start.<span class="hljs-property">pos</span>.<span class="hljs-property">y</span>);<br>    bezier.<span class="hljs-title function_">quadraticCurveTo</span>(<br>      cps[(<span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>],<br>      cps[(<span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>],<br>      pts[i * <span class="hljs-number">2</span>],<br>      pts[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>    );<br>    bezier.<span class="hljs-title function_">endFill</span>();<br>    app.<span class="hljs-property">stage</span>.<span class="hljs-title function_">addChild</span>(bezier);<br>    ss.<span class="hljs-title function_">push</span>(bezier);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>具体我们可以看看下面的 demo。(相思比<code>S = t * d01 / d012</code>)</p>
<p class="codepen" data-height="600" data-theme-id="dark" data-default-tab="js,result" data-user="kitety" data-slug-hash="ZELKwyj" data-preview="true" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="ZELKwyj">
  <span>See the Pen <span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety/pen/ZELKwyj" >
  ZELKwyj</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> by kitety (<span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety" >@kitety</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)
  on <span class="exturl"><a class="exturl__link"   href="https://codepen.io" >CodePen</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

<p>除此之外我还做了一下测试，分别做出相似比为 0.1、0.5、0.5 加距离乘积、0.8 的相似比对于<strong>同样</strong>的点，得出如下。</p>
<p>点的位置如下，可见不同的相似比画出来的曲线的效果也是不同的。</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js">[<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">400</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">400</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">400</span> &#125;,<br>  &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">400</span> &#125;,<br>];<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20210405185248.png" >
      </p>
<p>具体的效果可以参见下面的 demo，相似比过大、过小、为负数等都会有奇特的曲线出现，感兴趣的可以试试。</p>
<p class="codepen" data-height="600" data-theme-id="dark" data-default-tab="js,result" data-user="kitety" data-slug-hash="dyNRmbY" data-preview="true" style="height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="dyNRmbY">
  <span>See the Pen <span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety/pen/dyNRmbY" >
  dyNRmbY</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> by kitety (<span class="exturl"><a class="exturl__link"   href="https://codepen.io/kitety" >@kitety</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>)
  on <span class="exturl"><a class="exturl__link"   href="https://codepen.io" >CodePen</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
可见，使用线段位置与具体常数的乘积效果最好。


        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>本篇文章简要分析了使用 canvas 绘制线条的具体方式，循序渐进的讲解了绘制线条，曲线和相似三角形曲线的处理方法，思路也是步步递进。感兴趣的可以在 demo 里面试试效果，尝试更换不同的相似比会有意想不到的效果。</p>
<p>本文也是借鉴了很多前人的思考成果加以思考，参考链接在文章末尾已经列出。</p>
<p>感谢阅读，完结撒花。</p>

        <h2 id="参考链接"   >
          <a href="#参考链接" class="heading-link"><i class="fas fa-link"></i></a><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/7054272/how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas" >how-to-draw-smooth-curve-through-n-points-using-javascript-html5-canvas</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="http://scaledinnovation.com/analytics/splines/aboutSplines.html" >Spline Interpolation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://juejin.cn/post/6844903692747948039" >canvas 进阶——如何画出平滑的曲线?</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/hujiulong/blog/issues/1" >用 canvas 绘制一个曲线动画——深入理解贝塞尔曲线</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/29565629" >怎么理解贝塞尔曲线？</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://output.jsbin.com/ApitIxo/2/" >stackoverflow 中的一个demo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>再学一次JS原型</title>
    <url>/posts/learn-js-prototype-again.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="忘却的知识需要复习"   >
          <a href="#忘却的知识需要复习" class="heading-link"><i class="fas fa-link"></i></a><a href="#忘却的知识需要复习" class="headerlink" title="忘却的知识需要复习"></a>忘却的知识需要复习</h2>
      <p>看到这张图的时候感觉很乱，心中已经忘却的原型知识明显招架不住，因此就需要重新整理一下了。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200823161711.png" >
      </p>
<span id="more"></span>


        <h2 id="单例模式"   >
          <a href="#单例模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/image-20200823162649747.png"  alt="image-20200823162649747">
      </p>
<p>单例模式解决的问题：把描述同一件事物的属性和特征进行归类，存储在同一个内存空间中，因此避免了全局变量之间的冲突、污染。</p>
<p>其中 person1 等就是为命名空间。每一个命名空间都是 JS 的 Object 这个内置基类的实例，单独的实例。</p>

        <h3 id="高级单例模式"   >
          <a href="#高级单例模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#高级单例模式" class="headerlink" title="高级单例模式"></a>高级单例模式</h3>
      <figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nameSpace=(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">12</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">fn</span>:fn<br>  &#125;<br>&#125;)()<br></code></pre></td></tr></table></div></figure>

<p>在给命名空间赋值的时候不是直接返回对象，先执行匿名函数，形成一个私有作用域，不销毁的栈内存。在这个私有作用域中创建堆内存，把堆内存的地址赋值给命名空间。</p>
<p>优点: 可以在命名空间中创建很多的内容，比如变量、函数，哪些需要提供给外面调取使用，我们才返回到最终的对象中，这也是模块化实现的一种思想。</p>

        <h3 id="this-作用域（浏览器中）"   >
          <a href="#this-作用域（浏览器中）" class="heading-link"><i class="fas fa-link"></i></a><a href="#this-作用域（浏览器中）" class="headerlink" title="this 作用域（浏览器中）"></a>this 作用域（浏览器中）</h3>
      <ul>
<li>可以根据函数调用前面的对象来判断。例如<code>a.b()</code>的话 this 就指向 a，没有的话就指向全局。</li>
<li>在事件中指向触发事件的<code>target</code></li>
<li>立即执行函数的 this 指向全局</li>
</ul>

        <h3 id="题目"   >
          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a href="#题目" class="headerlink" title="题目"></a>题目</h3>
      
        <h2 id="工厂模式"   >
          <a href="#工厂模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2>
      <p>把实现相同功能的代码封装，批量生产。低耦合高内聚，减少页面中的冗余代码，提高代码的重复使用率。</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>  obj.<span class="hljs-property">name</span> = name;<br>  obj.<span class="hljs-property">age</span> = age;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">12</span>);<br><span class="hljs-keyword">var</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-number">12</span>);<br></code></pre></td></tr></table></div></figure>


        <h2 id="面向对象"   >
          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2>
      <p>简单的定义</p>
<ul>
<li>对象：万物皆对象；</li>
<li>类：对象的具体细分（功能特点分类）</li>
<li>实例：类中具体的一个事物。</li>
<li>JS 就是基于面向对象设计和开发出来的语言</li>
</ul>

        <h3 id="实例和类型的判断"   >
          <a href="#实例和类型的判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#实例和类型的判断" class="headerlink" title="实例和类型的判断"></a>实例和类型的判断</h3>
      <ul>
<li>typeof</li>
<li>instanceof</li>
<li>Object.prototype.toString.call(X)</li>
</ul>

        <h3 id="原型链的查找原则"   >
          <a href="#原型链的查找原则" class="heading-link"><i class="fas fa-link"></i></a><a href="#原型链的查找原则" class="headerlink" title="原型链的查找原则"></a>原型链的查找原则</h3>
      <ul>
<li>所有的函数数据类型都天生自带一个属性：prototype（原型），这个属性是一个对象，浏览器会默认开辟一个堆内存</li>
<li>在浏览器给 prototype 开辟的堆内存中有一个天生自带的属性：constructor，这个属性指向当前函数本身。</li>
<li>每一个对象都有一个<code>__proto__</code>属性，这个属性指向当前实例所属类的 prototype（如果不能确定他是谁的实例，都是 object 的实例）。</li>
</ul>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200823232308.png" >
      <br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20200823232322.png" >
      </p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>实现自己的React之渲染字符串和数字</title>
    <url>/posts/realize-your-own-react-rendering-strings-and-numbers.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>在上一篇文章中我们已经渲染了我们的字符串到 id 为 root 的元素上，但是用的是直接操作 DOM，我们会在后面逐渐的完善它。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201028205234.png" >
      </p>
<span id="more"></span>


        <h2 id="问题和解决方案"   >
          <a href="#问题和解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题和解决方案" class="headerlink" title="问题和解决方案"></a>问题和解决方案</h2>
      
        <h3 id="遇到的问题"   >
          <a href="#遇到的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3>
      <p>我们上次的操作是直接操作 DOM 来放入字符串或者数字，但是后面我们还会传入 DOM 元素和 class，因此不能够统一处理，<strong>我们需要根据不同的类型来做与之对应的处理</strong>。</p>
<p>除此之外，我们还提到了要为每个 DOM 元素添加属性增加唯一值，以便后续查找和更新。</p>

        <h3 id="解决办法"   >
          <a href="#解决办法" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3>
      <ul>
<li>我们会将传入的元素传入一个工厂函数</li>
<li>这个工厂函数里面会根据类型的不同而返回对应的实例 unit</li>
<li>实例上面有个属性 getMarkup，我们可以传入唯一的 key 用来放在属性上，返回一个字符串。</li>
<li>最后将字符串放入到 container（比如之前 id 为 root 的元素）。</li>
</ul>
<p>大体示意图如下</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201028202228.png" >
      </p>

        <h2 id="渲染字符串和数字"   >
          <a href="#渲染字符串和数字" class="heading-link"><i class="fas fa-link"></i></a><a href="#渲染字符串和数字" class="headerlink" title="渲染字符串和数字"></a>渲染字符串和数字</h2>
      <p><strong>字符串和数字是一样的逻辑，因此我就用字符串举例</strong></p>
<p>修改目录结构</p>
<figure class="highlight oxygene"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs oxygene">▇<br>E:\study\my-react-<span class="hljs-number">15</span>.x<br>├── package.json<br>├── <span class="hljs-keyword">public</span><br>├── README.md<br>├── src<br>|  ├── <span class="hljs-keyword">index</span>.js<br>|  └── react<br>|     ├── <span class="hljs-keyword">index</span>.js<br>|     └── <span class="hljs-keyword">unit</span>.js <span class="hljs-comment">//新增的文件</span><br>└── yarn.lock<br></code></pre></td></tr></table></div></figure>


        <h3 id="index-js"   >
          <a href="#index-js" class="heading-link"><i class="fas fa-link"></i></a><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3>
      <p>我们先修改 react/index.jsx 下面的 render 方法</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">element, container</span>) &#123;<br>  <span class="hljs-comment">// 最重要的形式container.innerHTML = `&lt;span data-reactid=&quot;xxx-id&quot;&gt;$&#123;element&#125;&lt;/span&gt;`</span><br>  <span class="hljs-comment">// 传入元素 返回对应的unit(对象实例),上面有个getMarkUp方法，传入id可以获得字符串</span><br><br>  <span class="hljs-comment">// unit 负责渲染 主要用来将元素转换为html字符串</span><br>  <span class="hljs-keyword">let</span> unit = <span class="hljs-title function_">createUnit</span>(element); <span class="hljs-comment">// createUnit就是要引入的工厂函数</span><br>  <span class="hljs-keyword">let</span> markUp = unit.<span class="hljs-title function_">getMarkUp</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 返回HTML标记 简单示例，从0开始</span><br>  $(container).<span class="hljs-title function_">html</span>(markUp);<br>&#125;<br></code></pre></td></tr></table></div></figure>


        <h3 id="unit-js"   >
          <a href="#unit-js" class="heading-link"><i class="fas fa-link"></i></a><a href="#unit-js" class="headerlink" title="unit.js"></a>unit.js</h3>
      <p>我们这个文件就是根据传入的 element，根据类型返回对象实例。</p>

        <h4 id="工厂函数"   >
          <a href="#工厂函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h4>
      <p>首先我们创建 createUnit 工厂函数</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUnit</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-comment">// 先是处理字符串和数字 根绝typeof</span><br>  <span class="hljs-keyword">if</span> ([<span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> element)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextUint</span>(element);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>


        <h4 id="TextUint"   >
          <a href="#TextUint" class="heading-link"><i class="fas fa-link"></i></a><a href="#TextUint" class="headerlink" title="TextUint"></a>TextUint</h4>
      <p>我们是要根据不同的类型来处理，因此最少有三种类型，我们在这里用一个 Unit 的 class 作为基类，有点像 TS 的抽象类，具体的实现用具体的类去继承。</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基类 不可以实例化</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Unit</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">element</span>) &#123;<br>    <span class="hljs-comment">// 挂载在下划线 私有属性</span><br>    <span class="hljs-comment">// 实例存一份</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentElement</span> = element;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>接下来我们来写具体操作文本的 class</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 文本的类 处理字符串和数字</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextUint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Unit</span> &#123;<br>  <span class="hljs-comment">// 传入id 返回字符串</span><br>  <span class="hljs-title function_">getMarkUp</span>(<span class="hljs-params">reactId</span>) &#123;<br>    <span class="hljs-comment">// id存一份在示例上</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_reactId</span> = reactId;<br>    <span class="hljs-comment">// 因为要添加属性，所以用span包装一下，上面添加data-reactid属性，值为reactId，里面的元素就是实例的时候element，可以从this上面获取</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;span data-reactid=&quot;<span class="hljs-subst">$&#123;reactId&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>._currentElement&#125;</span>&lt;/span&gt;`</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>

<p>然后再暴露出这个工厂函数，在 index.js 引入就可以跑起来了。</p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-10-29/1603947047283-image.png" >
      </p>
<p>本节代码地址：<span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/my-react-15.x/tree/9ee49e3356fe330cebecd7b189efddc8db1bca19" >代码地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>至此，我们用比较规整的方式实现了渲染字符串和数字，接下来我们将渲染原生 DOM。</p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>实现自己的React之基础准备</title>
    <url>/posts/basic-preparation-for-implementing-your-own-react.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>现在的工作中已经用过<span class="exturl"><a class="exturl__link"   href="https://reactjs.org/" >React</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>一段时间了，然后就想好好深入学习一下，尝试着写一个简单的 demo 来体验一下。<br>学习事物都有个过程，大概是了解、熟悉、深入。自己做到理解只是第一步，<strong>真正的掌握是能够完全向别人讲清楚</strong>。因此我就想写下笔记，争取向别人讲清楚，也激励自己学习。<br><strong>注意，本次会先实现简单的 React 15.x 版本，React Fiber 版本会在后面推出</strong><br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201027205937.png" >
      </p>
<span id="more"></span>


        <h2 id="预备知识"   >
          <a href="#预备知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2>
      
        <h3 id="JSX-的了解"   >
          <a href="#JSX-的了解" class="heading-link"><i class="fas fa-link"></i></a><a href="#JSX-的了解" class="headerlink" title="JSX 的了解"></a>JSX 的了解</h3>
      <p>在实际的编写代码中，我们使用最多的就是<code>JSX</code>。实际上根据中文官网的解释：</p>
<blockquote>
<p>JSX 仅仅只是 React.createElement(component, props, …children) 函数的语法糖</p>
</blockquote>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201027211058.png" >
      <br>由图可知，JSX 会经过 babel 转换为 React.createElement 的语句，它只是个语法糖。在后续的过程中，我们实现了自己的 React.createElement，我们也可以写<code>JSX</code>语句来调试。</p>

        <h3 id="jquery-的使用"   >
          <a href="#jquery-的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#jquery-的使用" class="headerlink" title="jquery 的使用"></a>jquery 的使用</h3>
      <p>为了方便开发，我们将采用 Jquery 来代替频繁的原生 DOM 的增删改查和事件绑定和解绑。主要用到了 jquery 的属性选择器和事件的绑定解绑、命名空间。</p>
<!-- 事件的绑定和解绑简单的 demo 可以看下面的 demo。 -->


        <h3 id="DOM-的属性"   >
          <a href="#DOM-的属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#DOM-的属性" class="headerlink" title="DOM 的属性"></a>DOM 的属性</h3>
      <p>我们的网页将会被浏览器解析为各种 Tree，我们比较熟悉的就是 DOM Tree。在我们的这个简单的 React 中也是一样。将为每个 DOM 节点都添加一个唯一的 data-reactid 属性，方便的后续的更新。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201028193346.png" >
      </p>
<p>如图所示，第一个为 0，递进一级，就添加一个<code>.</code>,像数组下标一样从 0 开始逐渐增加。</p>

        <h2 id="环境搭建"   >
          <a href="#环境搭建" class="heading-link"><i class="fas fa-link"></i></a><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2>
      <p>我们将使用<code>create react app</code>快捷创建项目，然后将代码替换为我们的就可以了，简单快捷就可以使用现有的开发环境。</p>

        <h3 id="项目创建"   >
          <a href="#项目创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs bash">npx create-react-app my-react-15<br><span class="hljs-comment"># 项目中有jquery</span><br>yarn add jquery<br></code></pre></td></tr></table></div></figure>


        <h3 id="文件操作"   >
          <a href="#文件操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3>
      <p>删除 src 里面的文件，创建 index.js 修改文件的引入方式，我们简单渲染一个字符串，挂在在 root 上。</p>

        <h4 id="目录结构"   >
          <a href="#目录结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4>
      <figure class="highlight pgsql"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs pgsql">E:\study\my-react<span class="hljs-number">-15.</span>x<br>├── package.json<br>├── <span class="hljs-built_in">public</span><br>├── README.md<br>├── src<br>|  ├── <span class="hljs-keyword">index</span>.js<br>|  └── react<br>|     └── <span class="hljs-keyword">index</span>.js<br>└── yarn.<span class="hljs-keyword">lock</span><br></code></pre></td></tr></table></div></figure>


        <h4 id="代码"   >
          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h4>
      <figure class="highlight tsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//  src/index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./react&quot;</span>;<br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">render</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></div></figure>

<p>新建 react 文件夹，创建 index.js。暴露一个 react 对象，里面有个 render 方法。</p>
<figure class="highlight tsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">//  src/react/index.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">React</span> = &#123;<br>  render,<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">element, container</span>) &#123;<br>  container.<span class="hljs-property">innerHTML</span> = element;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">React</span>;<br></code></pre></td></tr></table></div></figure>

<p>简单跑起来，渲染正常。</p>

        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>在这一节，我们搭建了基本的开发环境，在后面的文章中会逐渐深入，渲染原生 dom 和 class 组件，一起学习吧！</p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>实现自己的React之渲染原生DOM</title>
    <url>/posts/realize-your-own-react-rendering-native-dom.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h2>
      <p>之前我们已经用比较规范的方式实现了字符串和数字的渲染，接下来我们将渲染原生 DOM。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/2020-11-3/1604368409871-image.png" >
      </p>
<span id="more"></span>


        <h2 id="预备知识"   >
          <a href="#预备知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2>
      
        <h3 id="正则"   >
          <a href="#正则" class="heading-link"><i class="fas fa-link"></i></a><a href="#正则" class="headerlink" title="正则"></a>正则</h3>
      <p>我们在匹配事件和 style 属性的时候，我们需要用到简单的正则知识点</p>
<ul>
<li>[A-Z] 大写字母</li>
<li>^ 以**开头</li>
</ul>
<p>除了使用正则的 test 判断以外，我们还可以和<span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" >String.place</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>搭配使用。<strong>注意：这个方法不会改变原字符串。</strong></p>

        <h3 id="jquery-事件的命名空间和事件代理"   >
          <a href="#jquery-事件的命名空间和事件代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#jquery-事件的命名空间和事件代理" class="headerlink" title="jquery 事件的命名空间和事件代理"></a>jquery 事件的命名空间和事件代理</h3>
      <p>在元素创建的时候，我们会在 document 上采用事件委托绑定事件（后面会解释原因），元素移除的时候我们还要移除事件。为了简便操作我们会用命名空间来实现。</p>

        <h2 id="原理分析"   >
          <a href="#原理分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2>
      <p>我们在写 React 的代码的时候，我们一般会写 JSX.而在我们的现在开发中，会经过 babel 等转换为 React.createElement 代码。这也就是 JSX 的作用，简单可以理解为 React.createElement 的语法糖。</p>
<p>我们用下面的代码示例</p>
<figure class="highlight jsx"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;div<br>  onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>  &#125;&#125;<br>  style=&#123;&#123; <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;red&quot;</span> &#125;&#125;<br>&gt;<br>  你好<br>  &lt;span className=<span class="hljs-string">&quot;test&quot;</span> id=<span class="hljs-string">&quot;thisisaspan&quot;</span>&gt;<br>    hehe<br>  &lt;/span&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></div></figure>

<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102210123.png" >
      </p>
<p>而如果我们直接在代码中打印这个 <code>element</code> 会是什么样子呢？代码可以<span class="exturl"><a class="exturl__link"   href="https://codesandbox.io/s/cool-cloud-vfbkc?file=/src/App.js" >看这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102210351.png" >
      </p>
<p>可以看到，打印出来是一个对象，里面有<code>$$typeof、key、type、props</code> 等等很多属性。而我们需要关注的是 <code>type</code> 属性和 <code>props</code> 属性，甚至可以可以看到，<code>props</code> 里面有个 <code>children</code> 属性，而且可以继续展开，里面就是层层递进的 <code>children</code> 子元素。其实这个对象就是<strong>虚拟 DOM</strong>，在后面更新的时候我们也会说到。</p>
<p>至此我们也有了一个大概的流程。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102211725.png" >
      </p>
<p>和之前的字符串的渲染对比得知，我们这次渲染的是 <code>React.createElement</code> 的返回值，它的返回值是一个实例，我们现在称为 <code>Element</code> 实例。</p>

        <h2 id="动手实现"   >
          <a href="#动手实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#动手实现" class="headerlink" title="动手实现"></a>动手实现</h2>
      <p>经过上述的分析，我们得到此次渲染原生 DOM 我们需要做的事情后大致如下<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102212917.png" >
      <br>我们这次渲染的代码为</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//src/index,js</span><br><span class="hljs-keyword">const</span> ele =<br>  <span class="hljs-comment">/*#__PURE__*/</span><br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>    <span class="hljs-string">&quot;div&quot;</span>,<br>    &#123;<br>      <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>      &#125;,<br>      <span class="hljs-attr">style</span>: &#123;<br>        <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-string">&quot;\u4F60\u597D&quot;</span>,<br>    <span class="hljs-comment">/*#__PURE__*/</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>      <span class="hljs-string">&quot;span&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;thisisaspan&quot;</span>,<br>      &#125;,<br>      <span class="hljs-string">&quot;hehe&quot;</span><br>    )<br>  );<br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">render</span>(ele, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></div></figure>


        <h3 id="createElement"   >
          <a href="#createElement" class="heading-link"><i class="fas fa-link"></i></a><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3>
      <p>我们在 react 文件夹新建 element.js，这个函数的作用就是根据将所有传入的参数实例化，返回一个对象<br>代码如下：</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Element</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">type, props</span>) &#123;<br>    <span class="hljs-comment">// 存一遍</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span> = type;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = props;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">React.createElement(&quot;div&quot;, &#123;</span><br><span class="hljs-comment">  onClick: () =&gt; &#123;</span><br><span class="hljs-comment">    console.log(1);</span><br><span class="hljs-comment">  &#125;,</span><br><span class="hljs-comment">  style: &#123;</span><br><span class="hljs-comment">    backgroundColor: &#x27;red&#x27;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">&#125;, &quot;\u4F60\u597D&quot;,React.createElement(&quot;span&quot;, &#123;</span><br><span class="hljs-comment">  className: &quot;test&quot;,</span><br><span class="hljs-comment">  id: &quot;thisisaspan&quot;</span><br><span class="hljs-comment">&#125;, &quot;hehe&quot;));</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 从第三项开始,后面的都是children,因此用了reset的方式存入数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">type, props = &#123;&#125;, ...children</span>) &#123;<br>  <span class="hljs-comment">// 存入props</span><br>  props.<span class="hljs-property">children</span> = children;<br>  <span class="hljs-comment">// 返回的element实例</span><br>  <span class="hljs-comment">// 后面也可以用instanceof来辅助判断</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(type, props);<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">Element</span>, createElement &#125;;<br></code></pre></td></tr></table></div></figure>

<p>再在 react/index.js 引入 createElement，方便调用。</p>

        <h3 id="createUnit"   >
          <a href="#createUnit" class="heading-link"><i class="fas fa-link"></i></a><a href="#createUnit" class="headerlink" title="createUnit"></a>createUnit</h3>
      <p>createElement 函数调用完成之后，我们就要进入 createUnit 工厂函数来进行判断生成实例</p>
<p>这个地方我们要注意，这个时候的 element 是 Element 的实例，因此我们可以用 instanceof，而且渲染的都是原生的 DOM，因此 tag 名称都是字符串，我们可以使用 element.type 辅助判断。</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUnit</span>(<span class="hljs-params">element</span>) &#123;<br>  <span class="hljs-keyword">if</span> ([<span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> element)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextUint</span>(element);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>+    element <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span> &amp;&amp;<br>+    [<span class="hljs-string">&quot;string&quot;</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> element.<span class="hljs-property">type</span>)<br>+  ) &#123;<br>+    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeUint</span>(element);<br>+  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>


        <h3 id="NativeUint"   >
          <a href="#NativeUint" class="heading-link"><i class="fas fa-link"></i></a><a href="#NativeUint" class="headerlink" title="NativeUint"></a>NativeUint</h3>
      <p>经过 createUnit 工厂函数之后我们就要生成 NativeUint 了，我们写一个 NativeUint 的 class。我们仍然是继承了 Unit，将元素存到了 <code>this._currentElement</code></p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NativeUint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Unit</span> &#123;&#125;<br></code></pre></td></tr></table></div></figure>


        <h3 id="调用实例-getMarkUp"   >
          <a href="#调用实例-getMarkUp" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用实例-getMarkUp" class="headerlink" title="调用实例 getMarkUp"></a>调用实例 getMarkUp</h3>
      <p>在这一步我们需要调用 getMarkUp。我们先想想我们这个步骤的大概流程。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102214813.png" >
      <br>我们之前说过，我们的 getMarkup 函数需要传入一个<strong>key</strong>，然后返回一个<strong>字符串</strong>。对这就是最直观的理解，而返回的字符串可能就是下面的样子。<br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102215219.png" >
      <br>我们最终需要的字符串大概为：<code>&lt;span data-reactid=&quot;0.1&quot; class=&quot;test&quot; id=&quot;thisisaspan&quot;&gt;&lt;span data-reactid=&quot;0.1.0&quot;&gt;hehe&lt;/span&gt;&lt;/span&gt;</code>，包含了一个闭合的 tag，上面还有一些属性，我们就需要遍历添加属性，还要添加对应的唯一 id，还要对 children 子元素做处理。</p>
<p>我们理一下：</p>
<ul>
<li>原生 DOM,要根据渲染对应的 tag</li>
<li>style 等 css 处理</li>
<li>class 等属性梳理</li>
<li>事件绑定 <strong>为什么要事件委托，因为开始的时候元素还只是个字符串，无法绑定事件</strong></li>
<li>children 的处理</li>
<li>其他属性</li>
</ul>
<p>我们添加 getMarkup 函数，现在我们讲解这部分代码。</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">reactId</span></span><br><span class="hljs-comment"> * 传入id 返回数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">getMarkUp</span> (reactId) &#123;<br>  <span class="hljs-comment">// 实例存一下id</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">_reactId</span> = reactId<br>  <span class="hljs-comment">// this._currentElement为Element的实例 我们取出type和props</span><br>  <span class="hljs-comment">// 而type就是标签的tag</span><br>  <span class="hljs-keyword">const</span> &#123; type, props &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentElement</span><br>  <span class="hljs-comment">// tag的开头</span><br>  <span class="hljs-keyword">let</span> tagStart = <span class="hljs-string">`&lt;<span class="hljs-subst">$&#123;type&#125;</span> data-reactid=&quot;<span class="hljs-subst">$&#123;reactId&#125;</span>&quot; `</span><br>  <span class="hljs-comment">// 中间的children字符串</span><br>  <span class="hljs-keyword">let</span> childString = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment">// 结尾的tag</span><br>  <span class="hljs-keyword">let</span> tagEnd = <span class="hljs-string">`&lt;/<span class="hljs-subst">$&#123;type&#125;</span>&gt;`</span><br>  <span class="hljs-comment">// 对props进行遍历</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> propName <span class="hljs-keyword">in</span> props) &#123;<br>    <span class="hljs-comment">// 这种就是事件类型</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^on[A-Z]/</span>.<span class="hljs-title function_">test</span>(propName)) &#123;<br>      <span class="hljs-comment">// 需要绑定事件，取出真实的事件，</span><br>      <span class="hljs-keyword">let</span> eventName = propName.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">toLowerCase</span>()<br>      <span class="hljs-comment">// 委托到的document上面 元素还只是个字符串，无法绑定事件</span><br>      $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;eventName&#125;</span>.<span class="hljs-subst">$&#123;reactId&#125;</span>`</span>, <span class="hljs-string">`[data-reactid=&quot;<span class="hljs-subst">$&#123;reactId&#125;</span>&quot;]`</span>, props[propName])<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propName === <span class="hljs-string">&#x27;style&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 样式，取出样式的对象</span><br>      <span class="hljs-keyword">const</span> styleObj = props[propName]<br>      <span class="hljs-comment">// 样式对象 backgroundColor====backgropund-color</span><br>      <span class="hljs-comment">// 将对象先转换为key-value的数组，在yongmap转换为字符串</span><br>      <span class="hljs-keyword">let</span> styles = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(styleObj).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[attr, value]</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 正则+replace处理大写字母</span><br>        attr = attr.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-function">(<span class="hljs-params">m</span>) =&gt;</span> <span class="hljs-string">`-<span class="hljs-subst">$&#123;m.toLocaleLowerCase()&#125;</span>`</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;attr&#125;</span>:<span class="hljs-subst">$&#123;value&#125;</span>`</span><br>      &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;;&#x27;</span>)<br>      <span class="hljs-comment">// 依次添加到 开始的tag后面 注意要加空格</span><br>      tagStart += <span class="hljs-string">` style=&quot;<span class="hljs-subst">$&#123;styles&#125;</span>&quot;`</span><br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propName === <span class="hljs-string">&#x27;children&#x27;</span>) &#123;<br>      <span class="hljs-comment">// children 子元素，徐亚将他们遍历，并且传入索引，搭配reactid作为id</span><br>      <span class="hljs-keyword">let</span> children = props[propName]<br>      <span class="hljs-comment">// map返回字符串，再转换为数组 复制给childString</span><br>      childString = children.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">child, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 通过工程函数生成实例</span><br>        <span class="hljs-keyword">let</span> unit = <span class="hljs-title function_">createUnit</span>(child)<br>        <span class="hljs-comment">// 传入id返回字符串</span><br>        <span class="hljs-keyword">let</span> str = unit.<span class="hljs-title function_">getMarkUp</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;reactId&#125;</span>.<span class="hljs-subst">$&#123;index&#125;</span>`</span>)<br>        <span class="hljs-keyword">return</span> str<br>      &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propName === <span class="hljs-string">&#x27;className&#x27;</span>) &#123;<br>      <span class="hljs-comment">// className 类名，不使用class是因为和js的class冲突</span><br>      tagStart += <span class="hljs-string">` class=&quot;<span class="hljs-subst">$&#123;props[propName]&#125;</span>&quot;`</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 其他的属性直接添加到html上面 如id等等</span><br>      tagStart += <span class="hljs-string">` <span class="hljs-subst">$&#123;propName&#125;</span>=<span class="hljs-subst">$&#123;props[propName]&#125;</span> `</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// forin循环结束，将所欲的字符串拼接到一起 getMarkUp的使命完成</span><br>  <span class="hljs-keyword">return</span> tagStart + <span class="hljs-string">&#x27;&gt;&#x27;</span> + childString + tagEnd<br>&#125;<br></code></pre></td></tr></table></div></figure>


        <h3 id="最后渲染"   >
          <a href="#最后渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#最后渲染" class="headerlink" title="最后渲染"></a>最后渲染</h3>
      <figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 最后在render中完成使命</span><br><span class="hljs-keyword">let</span> unit = <span class="hljs-title function_">createUnit</span>(element);<br><span class="hljs-keyword">let</span> markUp = unit.<span class="hljs-title function_">getMarkUp</span>(<span class="hljs-title class_">React</span>.<span class="hljs-property">rootIndex</span>); <span class="hljs-comment">// 返回HTML标记</span><br>$(container).<span class="hljs-title function_">html</span>(markUp);<br></code></pre></td></tr></table></div></figure>


        <h2 id="结语"   >
          <a href="#结语" class="heading-link"><i class="fas fa-link"></i></a><a href="#结语" class="headerlink" title="结语"></a>结语</h2>
      <p>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102220641.png" >
      <br>
        <img   class="lazyload lazyload-gif"
          src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kitety/blog_img@master/img/20201102220726.png" >
      <br>顺着以上的思路，我们成功渲染了原生 DOM,事件、样式、类名等等都一一成功渲染出来。而原生 DOM 的渲染看起来还是有点点复杂，就是深度优先，直接递归，直到没有元素方才完成使命。</p>
<p>本节代码地址：**<span class="exturl"><a class="exturl__link"   href="https://github.com/kitety/my-react-15.x/tree/c772a7af8a909e21ff2ba280ee1cea69ced95b13" >代码地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>**</p>
<p>今天，我们成功完成了原生 DOM 的渲染，接下来我们将处理 Class Component，敬请期待吧！</p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年末启示</title>
    <url>/posts/end-of-2020-inspiration.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>无论你做什么工作，你都要把自己的本职工作做好，因为公司是不养闲人的。</p>
<p>如果你要技术分享，你可以技术分享，这样会增加你的话语权；并且要尽量将分享落地，和现在的业务逻辑结合起来，这样会更加增加你的影响力。</p>
<p>所有的学习不要仅仅停留在使用的层面，我们要多去想一想他是怎么实现的。保持一颗好奇心，知其原理会更好一些。</p>
<p>想想你的领导为什么他可以当领导，肯定有过人之处，有你值得学习的地方。</p>
<p>去到一个环境多去学习现在所缺乏的，因为先进的理念只有在这些地方才可以学到。</p>
<p>你要学会怎么产生价值，实现自己的价值。</p>
<p>任何时候，心态都是相当重要的。</p>
]]></content>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
</search>
